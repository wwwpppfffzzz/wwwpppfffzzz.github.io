<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ES6基础总结</title>
    <link href="/2020/08/30/16-ES6%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/"/>
    <url>/2020/08/30/16-ES6%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="ES6-基础语法"><a href="#ES6-基础语法" class="headerlink" title="ES6 基础语法"></a>ES6 基础语法</h1><h2 id="ECMAScript-6-简介"><a href="#ECMAScript-6-简介" class="headerlink" title="ECMAScript 6 简介"></a>ECMAScript 6 简介</h2><blockquote><p>本笔记相当于阮一峰老师的ES6教程进行了进一步浓缩</p></blockquote><ul><li>ECMAScript 6.0（以下简称 ES6）是 JavaScript 语言的下一代标准，已经在 2015 年 6 月正式发布了。</li><li>ECMAScript 是 JavaScript 语言的标注规范。</li><li>JavaScript 是 ECMAScript 规范的具体实现。<ul><li>具体实现取决于各大浏览器厂商的支持进度</li></ul></li><li>ECMAScript 6 也被称作 ECMAScript 2015</li><li>目前，各大浏览器对 ES6 的支持可以查看kangax.github.io/compat-table/es6/。</li><li>对于不支持 ES6 的环境，可以使用一些编译转码工具做转换处理再使用<ul><li>比如 babel</li></ul></li></ul><hr><h2 id="let-和-const-命令"><a href="#let-和-const-命令" class="headerlink" title="let 和 const 命令"></a>let 和 const 命令</h2><h3 id="1-let命令特性"><a href="#1-let命令特性" class="headerlink" title="1. let命令特性"></a>1. let命令特性</h3><h4 id="1-1-let-具有块级作用域"><a href="#1-1-let-具有块级作用域" class="headerlink" title="1.1 let 具有块级作用域"></a>1.1 let 具有块级作用域</h4><pre><code class="hljs JavaScript">&#123;  <span class="hljs-keyword">let</span> a = <span class="hljs-number">10</span>;  <span class="hljs-keyword">var</span> b = <span class="hljs-number">1</span>;&#125;<span class="hljs-built_in">console</span>.log(a); <span class="hljs-comment">// ReferenceError: a is not defined.</span><span class="hljs-built_in">console</span>.log(b); <span class="hljs-comment">// 1</span></code></pre><h4 id="1-2-不存在变量提升"><a href="#1-2-不存在变量提升" class="headerlink" title="1.2 不存在变量提升"></a>1.2 不存在变量提升</h4><pre><code class="hljs JavaScript"><span class="hljs-built_in">console</span>.log(bar); <span class="hljs-comment">// 报错ReferenceError</span><span class="hljs-keyword">let</span> bar = <span class="hljs-number">2</span>;</code></pre><h4 id="1-3-暂时性死区"><a href="#1-3-暂时性死区" class="headerlink" title="1.3 暂时性死区"></a>1.3 暂时性死区</h4><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> tmp = <span class="hljs-number">123</span><span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<span class="hljs-comment">// 当前所在块级区域的 tmp 会默认为被 let 声明绑定了 </span><span class="hljs-comment">// 所以只能先声明后赋值</span>  tmp = <span class="hljs-string">&#x27;abc&#x27;</span>; <span class="hljs-comment">// ReferenceError</span>  <span class="hljs-keyword">let</span> tmp;&#125;</code></pre><h4 id="1-4-不允许重复声明"><a href="#1-4-不允许重复声明" class="headerlink" title="1.4 不允许重复声明"></a>1.4 不允许重复声明</h4><p><code>let</code>不允许在相同作用域内，重复声明同一个变量。</p><pre><code class="hljs JavaScript"><span class="hljs-comment">// 报错</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">func</span>(<span class="hljs-params"></span>) </span>&#123;  <span class="hljs-keyword">let</span> a = <span class="hljs-number">10</span>;  <span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;&#125;<span class="hljs-comment">// 报错</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">func</span>(<span class="hljs-params"></span>) </span>&#123;  <span class="hljs-keyword">let</span> a = <span class="hljs-number">10</span>;  <span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span>;&#125;</code></pre><hr><h3 id="2-块级作用域的好处"><a href="#2-块级作用域的好处" class="headerlink" title="2. 块级作用域的好处"></a>2. 块级作用域的好处</h3><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮3<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮4<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">        <span class="hljs-comment">// 点击按钮依次弹出它的索引号</span></span><span class="javascript">        <span class="hljs-keyword">var</span> btns = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&quot;button&quot;</span>);</span><span class="javascript">        <span class="hljs-comment">// 1. 使用var变量 但得用闭包</span></span><span class="javascript">        <span class="hljs-comment">// for (var i = 0; i &lt; btns.length; i++) &#123;</span></span><span class="javascript">        <span class="hljs-comment">//     // 用var  需要用到闭包 才能解决</span></span><span class="javascript">        <span class="hljs-comment">//     (function (i) &#123;</span></span><span class="javascript">        <span class="hljs-comment">//         btns[i].onclick = function () &#123;</span></span><span class="javascript">        <span class="hljs-comment">//             alert(i)</span></span><span class="javascript">        <span class="hljs-comment">//         &#125;</span></span><span class="javascript">        <span class="hljs-comment">//     &#125;)(i)</span></span><span class="javascript">        <span class="hljs-comment">// &#125;;</span></span><span class="javascript">        <span class="hljs-comment">//  2. 使用let变量 直接就可以  因为let具有块级作用域</span></span><span class="javascript">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; btns.length; i++) &#123;</span><span class="javascript">            btns[i].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span>                alert(i)            &#125;        &#125;;    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></code></pre><hr><h3 id="3-const-命令特性"><a href="#3-const-命令特性" class="headerlink" title="3. const 命令特性"></a>3. const 命令特性</h3><blockquote><p>和 let 特性一样 唯一的区别在于 const 声明后不能再修改，常量</p></blockquote><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> PI = <span class="hljs-number">3.14</span>PI = <span class="hljs-number">3</span>  <span class="hljs-comment">//  TypeError: Assignment to constant variable.</span></code></pre><pre><code class="hljs JavaScript"><span class="hljs-comment">// const 常量 对于复杂类型， 内部的值可以更改 但是把复杂类型整体修改是不允许的， 也就是复杂类型整体的内存地址不可更改</span>       <span class="hljs-keyword">const</span> ary = [<span class="hljs-number">100</span>, <span class="hljs-number">200</span>];       ary[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>; <span class="hljs-comment">// 因为更改内部的值 并没有更改它的内存地址 所有可以修改</span>       <span class="hljs-built_in">console</span>.log(ary); <span class="hljs-comment">//  1，200</span>       ary = [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]; <span class="hljs-comment">//  这个 把整体都重新赋值了也就是更改了它的内存地址 故报错</span>       <span class="hljs-built_in">console</span>.log(ary); <span class="hljs-comment">// 报错</span></code></pre><hr><h3 id="4-解构赋值"><a href="#4-解构赋值" class="headerlink" title="4. 解构赋值"></a>4. 解构赋值</h3><blockquote><p>注意：解构赋值 必须要同时进行，不能先声明再赋值  如：  let {a,b};  {a,b}={a:12,b:5}  这样是错的</p></blockquote><h4 id="4-1-基本使用"><a href="#4-1-基本使用" class="headerlink" title="4.1 基本使用"></a>4.1 基本使用</h4><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> [a,b,c]  = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>] <span class="hljs-comment">// 相当于以下</span><span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span><span class="hljs-keyword">let</span> b = <span class="hljs-number">2</span><span class="hljs-keyword">let</span> c = <span class="hljs-number">3</span></code></pre><blockquote><p>本质上，这种写法属于“模式匹配”，只要等号两边的模式相同，左边的变量就会被赋予对应的值</p></blockquote><pre><code class="hljs JavaScript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>(<span class="hljs-params"></span>) </span>&#123;  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;aaa&#x27;</span>);&#125;<span class="hljs-keyword">let</span> [x = f()] = [<span class="hljs-number">1</span>];</code></pre><p>上面代码中，因为x能取到值，所以函数f根本不会执行。上面的代码其实等价于下面的代码。</p><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> x;<span class="hljs-keyword">if</span> ([<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] === <span class="hljs-literal">undefined</span>) &#123;  x = f();&#125; <span class="hljs-keyword">else</span> &#123;  x = [<span class="hljs-number">1</span>][<span class="hljs-number">0</span>];&#125;</code></pre><hr><h4 id="4-2-对象的解构赋值"><a href="#4-2-对象的解构赋值" class="headerlink" title="4.2 对象的解构赋值"></a>4.2 对象的解构赋值</h4><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> &#123; bar, foo &#125; = &#123; <span class="hljs-attr">foo</span>: <span class="hljs-string">&#x27;aaa&#x27;</span>, <span class="hljs-attr">bar</span>: <span class="hljs-string">&#x27;bbb&#x27;</span> &#125;;foo <span class="hljs-comment">// &quot;aaa&quot;</span>bar <span class="hljs-comment">// &quot;bbb&quot;</span><span class="hljs-keyword">let</span> &#123; baz &#125; = &#123; <span class="hljs-attr">foo</span>: <span class="hljs-string">&#x27;aaa&#x27;</span>, <span class="hljs-attr">bar</span>: <span class="hljs-string">&#x27;bbb&#x27;</span> &#125;;baz <span class="hljs-comment">// undefined  因为bar变量没有对应的同名属性，导致取不到值，最后等于undefined。</span></code></pre><hr><h4 id="4-3-字符串的解构赋值"><a href="#4-3-字符串的解构赋值" class="headerlink" title="4.3  字符串的解构赋值"></a>4.3  字符串的解构赋值</h4><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> [a, b, c, d, e] = <span class="hljs-string">&#x27;hello&#x27;</span>;a <span class="hljs-comment">// &quot;h&quot;</span>b <span class="hljs-comment">// &quot;e&quot;</span>c <span class="hljs-comment">// &quot;l&quot;</span>d <span class="hljs-comment">// &quot;l&quot;</span>e <span class="hljs-comment">// &quot;o&quot;</span></code></pre><hr><h4 id="4-4-函数参数的解构赋值"><a href="#4-4-函数参数的解构赋值" class="headerlink" title="4.4 函数参数的解构赋值"></a>4.4 函数参数的解构赋值</h4><pre><code class="hljs JavaScript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">[x, y]</span>)</span>&#123;  <span class="hljs-keyword">return</span> x + y;&#125;add([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]); <span class="hljs-comment">// 3</span></code></pre><h2 id="上面代码中，函数add的参数表面上是一个数组，但在传入参数的那一刻，数组参数就被解构成变量x和y。对于函数内部的代码来说，它们能感受到的参数就是x和y。"><a href="#上面代码中，函数add的参数表面上是一个数组，但在传入参数的那一刻，数组参数就被解构成变量x和y。对于函数内部的代码来说，它们能感受到的参数就是x和y。" class="headerlink" title="上面代码中，函数add的参数表面上是一个数组，但在传入参数的那一刻，数组参数就被解构成变量x和y。对于函数内部的代码来说，它们能感受到的参数就是x和y。"></a>上面代码中，函数add的参数表面上是一个数组，但在传入参数的那一刻，数组参数就被解构成变量x和y。对于函数内部的代码来说，它们能感受到的参数就是x和y。</h2><h4 id="4-5-用途"><a href="#4-5-用途" class="headerlink" title="4.5 用途"></a>4.5 用途</h4><h5 id="1-交换变量的值"><a href="#1-交换变量的值" class="headerlink" title="(1) 交换变量的值"></a>(1) 交换变量的值</h5><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> x = <span class="hljs-number">1</span>;<span class="hljs-keyword">let</span> y = <span class="hljs-number">2</span>;[x, y] = [y, x];</code></pre><h2 id="上面代码交换变量x和y的值，这样的写法不仅简洁，而且易读，语义非常清晰。"><a href="#上面代码交换变量x和y的值，这样的写法不仅简洁，而且易读，语义非常清晰。" class="headerlink" title="上面代码交换变量x和y的值，这样的写法不仅简洁，而且易读，语义非常清晰。"></a>上面代码交换变量x和y的值，这样的写法不仅简洁，而且易读，语义非常清晰。</h2><h5 id="（2）从函数返回多个值"><a href="#（2）从函数返回多个值" class="headerlink" title="（2）从函数返回多个值"></a>（2）从函数返回多个值</h5><pre><code class="hljs JavaScript"><span class="hljs-comment">// 返回一个数组</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">example</span>(<span class="hljs-params"></span>) </span>&#123;  <span class="hljs-keyword">return</span> [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];&#125;<span class="hljs-keyword">let</span> [a, b, c] = example();<span class="hljs-comment">// 返回一个对象</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">example</span>(<span class="hljs-params"></span>) </span>&#123;  <span class="hljs-keyword">return</span> &#123;    foo: <span class="hljs-number">1</span>,    bar: <span class="hljs-number">2</span>  &#125;;&#125;<span class="hljs-keyword">let</span> &#123; foo, bar &#125; = example();</code></pre><hr><h5 id="（3）提取-JSON-数据"><a href="#（3）提取-JSON-数据" class="headerlink" title="（3）提取 JSON 数据"></a>（3）提取 JSON 数据</h5><blockquote><p>解构赋值对提取 JSON 对象中的数据，尤其有用。</p></blockquote><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> jsonData = &#123;  id: <span class="hljs-number">42</span>,  status: <span class="hljs-string">&quot;OK&quot;</span>,  data: [<span class="hljs-number">867</span>, <span class="hljs-number">5309</span>]&#125;;<span class="hljs-keyword">let</span> &#123; id, status, <span class="hljs-attr">data</span>: number &#125; = jsonData;<span class="hljs-built_in">console</span>.log(id, status, number);<span class="hljs-comment">// 42, &quot;OK&quot;, [867, 5309]</span></code></pre><hr><h3 id="5-字符串的扩展"><a href="#5-字符串的扩展" class="headerlink" title="5.字符串的扩展"></a>5.字符串的扩展</h3><h4 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h4><pre><code class="hljs JavaScript"><span class="hljs-comment">//  字符串模板 的 优点   1.  可以直接塞东西进去   $(东西)   2. 可以换行  注意用 反单引号 ``</span><span class="hljs-keyword">let</span> uname = <span class="hljs-string">&#x27;王鹏飞&#x27;</span>;<span class="hljs-comment">// 拼接字符串 </span><span class="hljs-comment">// let str = &#x27;hello,我的名字是&#x27; + uname + &#x27;&#x27;;</span><span class="hljs-comment">// let str = &#x27;hello,我的名字是&#x27; + uname;</span><span class="hljs-keyword">let</span> str = <span class="hljs-string">`hello,我的名字是<span class="hljs-subst">$&#123;uname&#125;</span>`</span>;<span class="hljs-comment">//hello,我的名字是王鹏飞</span><span class="hljs-built_in">console</span>.log(uname);<span class="hljs-built_in">console</span>.log(str);<span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">55</span>, <span class="hljs-number">88</span>, <span class="hljs-number">4156</span>, <span class="hljs-number">12</span>];arr.forEach(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span><span class="hljs-built_in">console</span>.log(<span class="hljs-string">`第<span class="hljs-subst">$&#123;index&#125;</span>个:<span class="hljs-subst">$&#123;item&#125;</span>`</span>));</code></pre><hr><h4 id="startsWith-和-endsWidth"><a href="#startsWith-和-endsWidth" class="headerlink" title="startsWith 和 endsWidth"></a>startsWith 和 endsWidth</h4><ul><li>startsWith() : 表示参数字符串是否在原子符串的头部，返回布尔值</li><li>endsWidth() ：表示参数字符串是否在原字符串的尾部，返回布尔值</li><li></li></ul><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;hello world&#x27;</span>str.startsWith(<span class="hljs-string">&#x27;hello&#x27;</span>)  <span class="hljs-comment">// true</span>str.endsWidth(<span class="hljs-string">&#x27;!&#x27;</span>)  <span class="hljs-comment">// true</span></code></pre><pre><code class="hljs JavaScript"> <span class="hljs-comment">// startsWith</span><span class="hljs-keyword">let</span> start = <span class="hljs-string">&#x27;https://www.baidu.com/&#x27;</span>;<span class="hljs-keyword">if</span> (start.startsWith(<span class="hljs-string">&#x27;http:&#x27;</span>)) &#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;普通网址&#x27;</span>);&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (start.startsWith(<span class="hljs-string">&#x27;https:&#x27;</span>)) &#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;加密网址&#x27;</span>);&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (start.startsWith(<span class="hljs-string">&#x27;svg:&#x27;</span>)) &#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;库&#x27;</span>);&#125; <span class="hljs-keyword">else</span> &#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;其他网址&#x27;</span>)&#125;;<span class="hljs-comment">// endsWidth</span><span class="hljs-keyword">let</span> end = <span class="hljs-string">&#x27;1.jpg&#x27;</span>;<span class="hljs-keyword">if</span> (end.endsWith(<span class="hljs-string">&#x27;.jpg&#x27;</span>)) &#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;jpg图片&#x27;</span>);&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (end.endsWith(<span class="hljs-string">&#x27;.png&#x27;</span>)) &#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;png图片&#x27;</span>);&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (end.endsWith(<span class="hljs-string">&#x27;.webp&#x27;</span>)) &#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;webp图片&#x27;</span>);&#125;<span class="hljs-comment">// repeat</span><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;wpf&#x27;</span>.repeat(<span class="hljs-number">3</span>)); <span class="hljs-comment">// 把wpf 重复三次  wpfwpfwpf色图st</span></code></pre><hr><h3 id="6-数组的扩展"><a href="#6-数组的扩展" class="headerlink" title="6.数组的扩展"></a>6.数组的扩展</h3><h4 id="6-1-Array-from"><a href="#6-1-Array-from" class="headerlink" title="6.1 Array.from()"></a>6.1 Array.from()</h4><blockquote><p>Array.from方法用于将两类对象转为真正的数组：类似数组的对象（array-like object）和可遍历（iterable）的对象（包括 ES6 新增的数据结构 Set 和 Map）。</p></blockquote><p>下面是一个类似数组的对象，Array.from将它转为真正的数组。</p><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> arrayLike = &#123;    <span class="hljs-string">&#x27;0&#x27;</span>: <span class="hljs-string">&#x27;a&#x27;</span>,    <span class="hljs-string">&#x27;1&#x27;</span>: <span class="hljs-string">&#x27;b&#x27;</span>,    <span class="hljs-string">&#x27;2&#x27;</span>: <span class="hljs-string">&#x27;c&#x27;</span>,    length: <span class="hljs-number">3</span>&#125;;<span class="hljs-comment">// ES5的写法</span><span class="hljs-keyword">var</span> arr1 = [].slice.call(arrayLike); <span class="hljs-comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span><span class="hljs-comment">// ES6的写法</span><span class="hljs-keyword">let</span> arr2 = <span class="hljs-built_in">Array</span>.from(arrayLike); <span class="hljs-comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span></code></pre><p>实际应用中，常见的类似数组的对象是 DOM 操作返回的 NodeList 集合，以及函数内部的arguments对象。Array.from都可以将它们转为真正的数组。</p><pre><code class="hljs JavaScript"><span class="hljs-comment">// NodeList对象</span><span class="hljs-keyword">let</span> ps = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;p&#x27;</span>);<span class="hljs-built_in">Array</span>.from(ps).filter(<span class="hljs-function"><span class="hljs-params">p</span> =&gt;</span> &#123;  <span class="hljs-keyword">return</span> p.textContent.length &gt; <span class="hljs-number">100</span>;&#125;);<span class="hljs-comment">// arguments对象</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123;  <span class="hljs-keyword">var</span> args = <span class="hljs-built_in">Array</span>.from(<span class="hljs-built_in">arguments</span>);  <span class="hljs-comment">// ...</span>&#125;</code></pre><p>上面代码中，querySelectorAll方法返回的是一个类似数组的对象，可以将这个对象转为真正的数组，再使用filter方法。</p><h4 id="6-2-Array-of"><a href="#6-2-Array-of" class="headerlink" title="6.2 Array.of()"></a>6.2 Array.of()</h4><blockquote><p>Array.of方法用于将一组值，转换为数组。</p></blockquote><pre><code class="hljs JavaScript"><span class="hljs-built_in">Array</span>.of(<span class="hljs-number">3</span>, <span class="hljs-number">11</span>, <span class="hljs-number">8</span>) <span class="hljs-comment">// [3,11,8]</span><span class="hljs-built_in">Array</span>.of(<span class="hljs-number">3</span>) <span class="hljs-comment">// [3]</span><span class="hljs-built_in">Array</span>.of(<span class="hljs-number">3</span>).length <span class="hljs-comment">// 1</span></code></pre><p>这个方法的主要目的，是弥补数组构造函数Array()的不足。因为参数个数的不同，会导致Array()的行为有差异.</p><pre><code class="hljs JavaScript"><span class="hljs-built_in">Array</span>() <span class="hljs-comment">// []</span><span class="hljs-built_in">Array</span>(<span class="hljs-number">3</span>) <span class="hljs-comment">// [, , ,]</span><span class="hljs-built_in">Array</span>(<span class="hljs-number">3</span>, <span class="hljs-number">11</span>, <span class="hljs-number">8</span>) <span class="hljs-comment">// [3, 11, 8]</span></code></pre><h4 id="6-3-数组实例的-find-和-findIndex"><a href="#6-3-数组实例的-find-和-findIndex" class="headerlink" title="6.3 数组实例的 find() 和 findIndex()"></a>6.3 数组实例的 find() 和 findIndex()</h4><h5 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h5><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> arr = [&#123;        name: <span class="hljs-string">&#x27;wpf&#x27;</span>,        age: <span class="hljs-number">23</span>    &#125;,    &#123;        name: <span class="hljs-string">&#x27;zyz&#x27;</span>,        age: <span class="hljs-number">24</span>    &#125;, &#123;        name: <span class="hljs-string">&#x27;zd&#x27;</span>,        age: <span class="hljs-number">25</span>    &#125;]<span class="hljs-keyword">let</span> newArr = arr.find(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.name === <span class="hljs-string">&#x27;wpf&#x27;</span>)<span class="hljs-built_in">console</span>.log(newArr); <span class="hljs-comment">// &#123; name: &#x27;wpf&#x27;, age: 23 &#125;</span></code></pre><h5 id="findIndex"><a href="#findIndex" class="headerlink" title="findIndex()"></a>findIndex()</h5><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> arr = [&#123;        name: <span class="hljs-string">&#x27;wpf&#x27;</span>,        age: <span class="hljs-number">23</span>    &#125;,    &#123;        name: <span class="hljs-string">&#x27;zyz&#x27;</span>,        age: <span class="hljs-number">24</span>    &#125;, &#123;        name: <span class="hljs-string">&#x27;zd&#x27;</span>,        age: <span class="hljs-number">25</span>    &#125;]<span class="hljs-keyword">let</span> newArr = arr.findIndex(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.name === <span class="hljs-string">&#x27;zyz&#x27;</span>)<span class="hljs-built_in">console</span>.log(newArr); <span class="hljs-comment">// 1</span></code></pre><h4 id="数组实例的-includes"><a href="#数组实例的-includes" class="headerlink" title="数组实例的 includes()"></a>数组实例的 includes()</h4><blockquote><p>数组中是否包含某个元素</p></blockquote><pre><code class="hljs JavaScript">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].includes(<span class="hljs-number">2</span>)     <span class="hljs-comment">// true</span>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].includes(<span class="hljs-number">4</span>)     <span class="hljs-comment">// false</span>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-literal">NaN</span>].includes(<span class="hljs-literal">NaN</span>) <span class="hljs-comment">// true</span></code></pre><h4 id="rest参数"><a href="#rest参数" class="headerlink" title="rest参数"></a>rest参数</h4><blockquote><p>rest 参数（形式为…变量名），用于获取函数的多余参数，这样就不需要使用arguments对象了。rest 参数搭配的变量是一个数组，该变量将多余的参数放入数组中。</p></blockquote><pre><code class="hljs JavaScript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">a, ...args</span>) </span>&#123;    <span class="hljs-built_in">console</span>.log(...args); <span class="hljs-comment">//  2  3</span>    <span class="hljs-built_in">console</span>.log(args); <span class="hljs-comment">//  [2,3]</span>&#125;fn(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)</code></pre><h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><blockquote><p>箭头函数就是用来简化函数定义语法的<br>适用场景: 在方法中使用。 比如： find(),map(),等</p></blockquote><pre><code class="hljs JavaScript">funciton sum (num1,num2)&#123;    <span class="hljs-keyword">return</span> num1 + num2&#125; <span class="hljs-comment">// 相当于以下代码</span><span class="hljs-keyword">const</span> sum = <span class="hljs-function">(<span class="hljs-params">num1,num2</span>) =&gt;</span> num1 + num2</code></pre><ul><li>箭头函数特点<ul><li>如果形参只有一个的话，可以省略小括号（）</li><li>如果函数体中的代码只有一个return，可以省略小括号（）</li><li>this指向的是原先定义好的位置，而不是随着当前箭头函数的位置而改变</li></ul></li><li>由于箭头函数this 的指向问题 所以：<ul><li>不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。</li><li>不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。</li></ul></li></ul><pre><code class="hljs JavaScript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>) </span>&#123;      <span class="hljs-built_in">this</span>.age = <span class="hljs-number">0</span>;      <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;        <span class="hljs-comment">// 回调里面的 `this` 变量就指向了期望的那个对象了</span>        <span class="hljs-built_in">this</span>.age++;    &#125;, <span class="hljs-number">3000</span>);&#125;<span class="hljs-keyword">var</span> p = <span class="hljs-keyword">new</span> Person();</code></pre><hr>]]></content>
    
    
    <categories>
      
      <category>es6</category>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>es6</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>babel转换器</title>
    <link href="/2020/08/28/15.babel%E8%BD%AC%E6%8D%A2%E5%99%A8/"/>
    <url>/2020/08/28/15.babel%E8%BD%AC%E6%8D%A2%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="babel的基本使用"><a href="#babel的基本使用" class="headerlink" title="babel的基本使用"></a>babel的基本使用</h1><h2 id="一、配置文件-babelrc"><a href="#一、配置文件-babelrc" class="headerlink" title="一、配置文件.babelrc"></a>一、配置文件.babelrc</h2><p>Babel的配置文件是.babelrc，存放在项目的根目录下。使用Babel的第一步，就是配置这个文件。</p><p>该文件用来设置转码规则和插件，基本格式如下。</p><pre><code class="hljs JavaScript">&#123;  <span class="hljs-string">&quot;presets&quot;</span>: [],  <span class="hljs-string">&quot;plugins&quot;</span>: []&#125;</code></pre><h5 id="presets字段设定转码规则，官方提供以下的规则集，你可以根据需要安装。"><a href="#presets字段设定转码规则，官方提供以下的规则集，你可以根据需要安装。" class="headerlink" title="presets字段设定转码规则，官方提供以下的规则集，你可以根据需要安装。"></a>presets字段设定转码规则，官方提供以下的规则集，你可以根据需要安装。</h5><pre><code class="hljs bash"><span class="hljs-comment"># ES2015转码规则</span>$ npm install --save-dev babel-preset-es2015<span class="hljs-comment"># react转码规则</span>$ npm install --save-dev babel-preset-react````<span class="hljs-comment">##### 然后，将这些规则加入.babelrc。</span>```JavaScript&#123;    <span class="hljs-string">&quot;presets&quot;</span>: [      <span class="hljs-string">&quot;es2015&quot;</span>,      <span class="hljs-string">&quot;react&quot;</span>,      <span class="hljs-string">&quot;stage-2&quot;</span>    ],    <span class="hljs-string">&quot;plugins&quot;</span>: []  &#125;</code></pre><blockquote><p>注意，以下所有Babel工具和模块的使用，都必须先写好.babelrc。</p></blockquote><h3 id="（前面步骤必不可少）"><a href="#（前面步骤必不可少）" class="headerlink" title="（前面步骤必不可少）"></a>（前面步骤必不可少）</h3><ul><li>babel-cli：命令行转码</li><li>babel-node：babel-cli工具自带一个babel-node命令，提供一个支持ES6的REPL环境</li><li>babel-register：实时转码，所以只适合在开发环境使用</li><li>babel-core：如果某些代码需要调用Babel的API进行转码，就要使用babel-core模块</li></ul><h2 id="二、babel-cli："><a href="#二、babel-cli：" class="headerlink" title="二、babel-cli："></a>二、babel-cli：</h2><p>一种使用方式就是全局安装：<code>npm install -g babel-cli</code>（可以通过 <code>npm root -g</code> 查看全局包安装目录），<br>只要全局安装了 <code>babel-cli</code>，则会在命令行中多出一个命令：<code>babel</code>。</p><p>这里如果使用全局安装的 <code>babel-cli</code> 进行转码是没有问题的，但是问题是如果一旦项目给了别人，<br>别人不知道你使用了这个转码工具，所以解决方式就是将 <code>babel-cli</code> 安装到本地项目中：</p><pre><code class="hljs bash">npm install --save-dev babel-cli</code></pre><p>这种第三方命令行工具如果安装到本地项目，会在 <code>node_modules</code> 中生成一个目录：<code>.bin</code>，<br>然后第三方命令行工具会将对应的可执行文件放到该目录中。</p><p>这样的话，就可以直接在本地项目中使用该第三方命令行工具了。</p><p>对于如何使用，则可以通过配置 <code>package.json</code> 文件中的 <code>scripts</code> 字段来配置使用：</p><pre><code class="hljs json">&#123;  <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;babel-demo&quot;</span>,  <span class="hljs-attr">&quot;scripts&quot;</span>: &#123;    <span class="hljs-attr">&quot;test&quot;</span>: <span class="hljs-string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,    <span class="hljs-attr">&quot;build&quot;</span>: <span class="hljs-string">&quot;babel demo1.js&quot;</span>  &#125;,  <span class="hljs-attr">&quot;devDependencies&quot;</span>: &#123;    <span class="hljs-attr">&quot;babel-cli&quot;</span>: <span class="hljs-string">&quot;^6.22.2&quot;</span>,    <span class="hljs-attr">&quot;babel-preset-es2015&quot;</span>: <span class="hljs-string">&quot;^6.22.0&quot;</span>,    <span class="hljs-attr">&quot;babel-preset-react&quot;</span>: <span class="hljs-string">&quot;^6.22.0&quot;</span>  &#125;&#125;</code></pre><h2 id="三、babel-register（适合开发阶段，实时编码转换）"><a href="#三、babel-register（适合开发阶段，实时编码转换）" class="headerlink" title="三、babel-register（适合开发阶段，实时编码转换）:"></a>三、babel-register（适合开发阶段，实时编码转换）:</h2><p>第一：安装 babel-register</p><pre><code class="hljs bash">npm install --save-dev babel-register</code></pre><p>第二：添加一个傀儡文件(main.js)：</p><pre><code class="hljs js"><span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;babel-register&#x27;</span>)<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;你的核心功能代码入口文件模块&#x27;</span>)</code></pre><p>第三：使用 node 执行 <code>main.js</code>，而不是你的入口文件.</p><h2 id="四、package-json中-scripts-配置说明"><a href="#四、package-json中-scripts-配置说明" class="headerlink" title="四、package.json中 scripts 配置说明"></a>四、package.json中 scripts 配置说明</h2><pre><code class="hljs JavaScript"><span class="hljs-string">&quot;scripts&quot;</span>: &#123;   <span class="hljs-string">&quot;test&quot;</span>: <span class="hljs-string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,   <span class="hljs-string">&quot;dev&quot;</span>: <span class="hljs-string">&quot;node main.js&quot;</span>, <span class="hljs-comment">// 开发时运行这个，babel会帮我们把ES6语法转换为可以识别的ES5语法进去启动</span>   <span class="hljs-string">&quot;build&quot;</span>: <span class="hljs-string">&quot;babel src -d dist&quot;</span>, <span class="hljs-comment">//  把开发时使用的ES6语法转换到dist目录下以ES5的语法呈现</span>   <span class="hljs-string">&quot;prestart&quot;</span>: <span class="hljs-string">&quot;npm run build&quot;</span>, <span class="hljs-comment">// 会先执行 build 再执行 start</span>   <span class="hljs-string">&quot;start&quot;</span>: <span class="hljs-string">&quot;node dist/app.js&quot;</span> <span class="hljs-comment">// 启动app.js 相当于 node app.js</span> &#125;,</code></pre><h2 id="五、–save-和-–save-dev"><a href="#五、–save-和-–save-dev" class="headerlink" title="五、–save 和 –save-dev"></a>五、–save 和 –save-dev</h2><p>通过 <code>--save</code> 参数安装的包，是将依赖项保存到 package.json 文件中的 dependencies 选项中。<br>通过 <code>--save-dev</code> 参数安装的包，是将依赖项保存到 package.json 文件中的 devDependencies 选项中。</p><p>无论是 <code>--save</code> 或者 <code>--save-dev</code> 安装的包，通过执行 <code>npm install</code> 都会将对应的依赖包安装进来。</p><p>但是，在开发阶段会有一些仅仅用来辅助开发的一些第三方包或是工具，然后最终上线运行（到了生产环境），<br>这些开发依赖项就不再需要了，就可以通过 <code>npm install --production</code> 命令仅仅安装 <code>dependencies</code> 中的<br>依赖项。</p>]]></content>
    
    
    <categories>
      
      <category>babel,JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>es6</tag>
      
      <tag>babel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>github</title>
    <link href="/2020/08/23/14.Github/"/>
    <url>/2020/08/23/14.Github/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Github 就是程序员的新浪微博<br>它可以让你使用社交化的方式进行编程协作、<br>    - 点赞<br>    - 评论<br>    - 转发<br>    - etc.<br>主要作用：可以免费在线托管你的仓库<br>可以实现多人协作<br>提供了一个可视化界面（Web Page）让你能直观清晰的了解你的项目源代码</p></blockquote><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><ul><li>注册</li><li>登陆</li><li>创建远程仓库</li><li>通过 <code>git clone</code> 命令下载远程仓库到本地<ul><li>git clone 会自动帮你把远程仓库下载到本地，不需要再去 git init 了</li><li>通过 clone 下来的仓库，git 有一个远程仓库地址列表，git 默认会把你 clone 的地址起一个别名：origin</li><li>然后你执行 push 的时候实际上就是将本地的版本提交到 origin 上</li></ul></li><li>在本地进行操作，通过 <code>git commit</code> 形成历史记录</li><li>通过 <code>git push</code> 将本地仓库中的历史记录提交到远程仓库</li></ul><h3 id="本地已有仓库，需要提交到线上"><a href="#本地已有仓库，需要提交到线上" class="headerlink" title="本地已有仓库，需要提交到线上"></a>本地已有仓库，需要提交到线上</h3><p>如果是 <code>git init</code> 出来的仓库，进行 <code>push</code> 提交的时候就不知道要往哪里 push。</p><p>所以，这里通过 <code>remote</code> 相关命令进行设置：</p><pre><code class="hljs bash"><span class="hljs-comment"># 查看所有的远程仓库信息</span>git remote show<span class="hljs-comment"># 根据别名查看指定的远程仓库信息</span>git remote show 远程仓库地址别名<span class="hljs-comment"># 添加远程仓库信息</span>git remote add 别名 远程仓库地址</code></pre><p>通过上面的 <code>git remote add</code> 添加完远程仓库地址信息之后，还不能直接 <code>git push</code>，必须在每一次<br><code>push</code> 的时候加上 <code>git push 仓库地址别名 master</code> 就可以提交了。</p><p>如果想要省略 <code>git push</code> 后面需要指定的 <code>仓库地址别名 master</code> 可以通过下面的命令修改：</p><pre><code class="hljs avrasm">git <span class="hljs-keyword">push</span> --<span class="hljs-keyword">set</span>-upstream heima master</code></pre><p>这样就可以直接使用 <code>git pish</code> 进行提交而不需要指定 <code>heima master</code> 了</p><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ol><li>能概述什么是版本控制并举例</li><li>能概述 SVN 的协作交互流程（远程仓库、用户、本地仓库）</li><li>能掌握 SVN 基本的交互使用（checkout、update、commit）</li><li>能概述 Git 的协作交互流程（远程仓库、用户、本地仓库）</li><li>能掌握 Git 的基本使用（init、status、add、commit、log、clone、push、remote）</li></ol>]]></content>
    
    
    <categories>
      
      <category>github</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>github</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git</title>
    <link href="/2020/08/23/13.git/"/>
    <url>/2020/08/23/13.git/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://zh.wikipedia.org/wiki/Git">维基百科 - Git</a></p></blockquote><h2 id="学习资源介绍"><a href="#学习资源介绍" class="headerlink" title="学习资源介绍"></a>学习资源介绍</h2><ul><li><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/">Git教程 - 廖雪峰</a></li><li><a href="http://git.oschina.net/progit/">Pro Git</a></li><li><a href="http://rogerdudler.github.io/git-guide/index.zh.html">git - 简明指南</a></li><li><a href="http://backlogtool.com/git-guide/cn/">猴子都能懂的GIT入门</a></li></ul><h2 id="Git-简介"><a href="#Git-简介" class="headerlink" title="Git 简介"></a>Git 简介</h2><ul><li>是什么<ul><li>Git 也是一个版本控制管理软件</li></ul></li><li>有什么用，可以解决什么问题<ul><li>保存历史记录</li><li>多人协作</li></ul></li><li>有了 SVN，为啥要学 Git<ul><li>Git 火</li><li>Git 相对于 SVN 来说，更强大，用户也非常多</li></ul></li><li>怎么用</li><li>Git 的诞生<ul><li><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137402760310626208b4f695940a49e5348b689d095fc000">http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137402760310626208b4f695940a49e5348b689d095fc000</a></li></ul></li></ul><h2 id="Git-使用交互流程"><a href="#Git-使用交互流程" class="headerlink" title="Git 使用交互流程"></a>Git 使用交互流程</h2><p><img src="img/git%E4%BA%A4%E4%BA%92%E6%A8%A1%E5%9E%8B.png" srcset="/img/loading.gif" alt="git交互模型"></p><h2 id="安装和配置-Git-环境"><a href="#安装和配置-Git-环境" class="headerlink" title="安装和配置 Git 环境"></a>安装和配置 Git 环境</h2><ul><li>下载地址：<a href="https://git-scm.com/">https://git-scm.com/</a></li></ul><h3 id="git-bash-常用命令"><a href="#git-bash-常用命令" class="headerlink" title="git-bash 常用命令"></a>git-bash 常用命令</h3><ul><li>pwd</li><li>ls   查看文件目录<ul><li>ls -a  查看隐藏文件</li></ul></li><li>cd</li><li>mkdir    创建文件</li><li>clear    清屏</li><li>rmdir<ul><li>只能删除空目录</li></ul></li><li>rm<ul><li>rm 文件名</li><li>rm -rf 目录名<ul><li>注：很强大，可以删除非空目录，以及一些比较顽固的文件或者目录 </li></ul></li></ul></li></ul><h3 id="git-bash-文件操作常用目录"><a href="#git-bash-文件操作常用目录" class="headerlink" title="git-bash 文件操作常用目录"></a>git-bash 文件操作常用目录</h3><ul><li>touch：创建文件</li><li>cat 查看文件内容</li><li>less：查看大文本文件内容 （从头开始往下看）</li><li>vi 编辑 ： （visual interface）<ul><li>Esc  退出命令模式</li><li>i  进入插入模式</li><li>:q   退出vi</li><li>:w  保存编辑</li><li>:wq  保存并退出</li><li>:q! 强制退出不保存修改</li><li>vi 的所有操作基本都是命令，这里掌握基本使用就可以了</li><li>有时候使用 git commit 进行提交的时候希望能多写几行提交日志，这时候可以省略 -m 参数进入 vi</li></ul></li></ul><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><ul><li><code>git init</code><ul><li>初始化一个 Git 仓库</li></ul></li><li><code>git status</code><ul><li>查看当前工作区、暂存区、本地仓库的状态</li></ul></li><li><code>git add</code>   提交到暂存区</li><li><code>git commit</code> 将文件存入文档库<ul><li>示例：<code>git commit -m &quot;日志说明&quot; --author=&quot;操作者姓名 &lt;邮箱&gt;&quot;</code></li><li>执行 <code>git commit</code> 的时候，Git 会要求具有用户名和邮箱的参数选项</li><li>可以通过 <code>git config</code> 命令配置一下用户名和邮箱</li></ul></li><li><code>git log</code>  查看提交日志</li><li><code>gitk</code>     图形化的呈现出提交日志</li></ul><p><strong>总结</strong>：操作 Git 的基本工作流程就是先修改文件，然后执行 <code>git add</code> 命令。<br><code>git add</code> 命令会把文件加入到暂存区，接着就可以执行 <code>git commit</code> 命令，将文件存入文档库，<br>从而形成一次历史记录。</p><ul><li>问题1：关于 Git-bash 中文问题</li><li><a href="https://github.com/msysgit/msysgit/wiki/Git-for-Windows-Unicode-Support">Git for Windows Unicode Support</a></li><li>问题2：执行 commit 的时候一大堆的信息</li><li>问题3：配置 user.name 和 user.email 问题</li></ul><h3 id="初始化配置"><a href="#初始化配置" class="headerlink" title="初始化配置"></a>初始化配置</h3><pre><code class="hljs bash"><span class="hljs-comment"># 设置用户名</span>git config --global user.name <span class="hljs-string">&quot;你的名字&quot;</span><span class="hljs-comment"># 配置用户邮箱</span>git config --global user.email <span class="hljs-string">&quot;你的常用邮箱&quot;</span><span class="hljs-comment"># 设置 gitk 图形查看工具中文显示默认编码（防止乱码）</span>git config --global gui.encoding utf-8<span class="hljs-comment"># 查看配置列表项</span>git config --list</code></pre><h3 id="添加-删除文件"><a href="#添加-删除文件" class="headerlink" title="添加/删除文件"></a>添加/删除文件</h3><pre><code class="hljs bash"><span class="hljs-comment"># 添加指定文件到暂存区</span>git add [files1] [files2] ...<span class="hljs-comment"># 添加指定目录到暂存区，包括子目录</span>git add [dir]<span class="hljs-comment"># 添加当前目录所有文件到暂存区</span>git add --allgie add .<span class="hljs-comment"># 停止追踪指定文件，但该文件会保留在工作区 （也就是 把暂存区的文件给退回到工作区）</span>git rm  --cached [file]<span class="hljs-comment"># 改名文件，并且将这个改名的放入暂存区</span>git mv [file-original] [file-renamed]</code></pre><h3 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h3><pre><code class="hljs bash"><span class="hljs-comment"># 提交到暂存区到仓库区</span>git commit -m [message]<span class="hljs-comment"># 提交暂存区的指定文件到仓库区</span>git commit [file1] [file2] ... -m [message]<span class="hljs-comment"># 提交工作区自上次commit之后的变化， 直接到仓库去</span><span class="hljs-comment"># (也就是说。 被跟踪过的 即之前在暂存区过的文件 可以直接越过暂存区提交到仓库区)</span>git commit -a  -m [message]<span class="hljs-comment"># 使用一次新的commit， 替代上一次提交</span><span class="hljs-comment"># 如果代码没有任何新变化，则用改写上一次commit的提交信息</span>git commit --amend -m [message]</code></pre><h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><pre><code class="hljs bash"><span class="hljs-comment"># git rm --cached &lt;file&gt;</span><span class="hljs-comment"># 恢复暂存区的指定文件到工作区</span>$ git checkout [file]<span class="hljs-comment"># 恢复某个commit的指定文件到暂存区和工作区</span>$ git checkout [commit] [file]<span class="hljs-comment"># 恢复暂存区的所有文件到工作区</span>$ git checkout .<span class="hljs-comment"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span>$ git reset [file]<span class="hljs-comment"># 重置暂存区与工作区，与上一次commit保持一致</span>$ git reset --hard<span class="hljs-comment"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span>$ git reset [commit]<span class="hljs-comment"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span>$ git reset --hard [commit]<span class="hljs-comment"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span>$ git reset --keep [commit]<span class="hljs-comment"># 新建一个commit，用来撤销指定commit</span><span class="hljs-comment"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span>$ git revert [commit]<span class="hljs-comment"># 暂时将未提交的变化移除，稍后再移入</span>$ git stash$ git stash pop</code></pre><h3 id="分支基本操作"><a href="#分支基本操作" class="headerlink" title="分支基本操作"></a>分支基本操作</h3><pre><code class="hljs bash"><span class="hljs-comment"># 列出所有分支</span>git branch<span class="hljs-comment"># 基于当前分支新建一个分支，但依然停留在当前分支</span>git branch [branch-name]<span class="hljs-comment"># 基于当前分支新建一个分支 并切换到该分支</span>git checkout -b [branch-name]<span class="hljs-comment"># 切换到指定分支，并更新工作区</span>git checkout [branch-name]<span class="hljs-comment"># 切换到上一个分支， 交替和上一个分支进行切换</span>git checkout - <span class="hljs-comment"># 合并指定分支到当前分支</span>git merge [branch-name]<span class="hljs-comment"># 删除分支</span>git branch -d [branch-name]</code></pre><h3 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h3><ul><li>remote</li><li>push</li><li>pull</li></ul><h3 id="在线仓库托管服务"><a href="#在线仓库托管服务" class="headerlink" title="在线仓库托管服务"></a>在线仓库托管服务</h3><blockquote><p>一个不知道 github、stackoverflow 的程序员想想都是可悲的</p></blockquote><ul><li>github</li><li>码云</li><li>coding</li></ul><hr><h3 id="Github-Pages"><a href="#Github-Pages" class="headerlink" title="Github Pages"></a>Github Pages</h3><blockquote><p>Github Pages 提供了一个免费在线托管静态资源的服务</p></blockquote><h4 id="使用方法如下："><a href="#使用方法如下：" class="headerlink" title="使用方法如下："></a>使用方法如下：</h4><ul><li>在个人的Github账户中创建一个仓库</li><li>仓库名称必须为 <code>个人账户名称.github.io</code></li><li>往该仓库根目录提交一个 <code>index.html</code>文件</li><li>然后就可以在地址栏输入 <code>个人账户名称.github.io</code> 地址，就可以看到 <code>index.html</code> 网页内容了</li></ul><p>注意：上面的创建仓库名称必须是<code>个人账户名称.github.io</code>，否则无法访问。</p><h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><blockquote><p>Hexo  是基于Node.js开放的一个静态博客生成器，提供了本地实时预览及部署功能，基本使用方法如下：</p></blockquote><pre><code class="hljs shell">npm install  hexo-cli -ghexo init blog(这个是文件名字)cd blog<span class="hljs-meta">#</span><span class="bash"> 启动本地预览服务，默认是 127.0.0.1：4000</span>hexo server<span class="hljs-meta">#</span><span class="bash"> 新建文章</span>hexo new 文章标题</code></pre><p>也可以参考Hexo官方文档 <a href="https://hexo.io/zh-cn/%EF%BC%8C%E9%87%8C%E9%9D%A2%E6%9C%89%E5%85%B7%E4%BD%93%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F">https://hexo.io/zh-cn/，里面有具体使用方式</a></p><h3 id="自动发布-Hexo-搭建的静态博客"><a href="#自动发布-Hexo-搭建的静态博客" class="headerlink" title="自动发布 Hexo 搭建的静态博客"></a>自动发布 Hexo 搭建的静态博客</h3><ul><li><p>第一：先修改 <code>_config.yml</code>配置文件，下面是一个示例：</p><pre><code class="hljs less"><span class="hljs-attribute">deploy</span>:  <span class="hljs-attribute">type</span>: git  <span class="hljs-attribute">reop</span>: <span class="hljs-attribute">https</span>:<span class="hljs-comment">//wwwpppfffzzz:Wang1234zzz@github.com/wwwpppfffzzz/wwwpppfffzzz.github.io.git</span></code></pre><p>上面配置选项中，一定要注意repo中获取对应的格式加入Github用户名和密码。</p></li><li><p>第二：安装自动发布的插件:</p></li></ul><pre><code class="hljs shell">npm install hexo-deployer-git --save</code></pre><ul><li>第三： 使用命令一键进行发布：</li></ul><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 俩条命令都可以，发布可能有延迟，稍微等待即可</span> hexo generate --deploy hexo deploy --generate</code></pre><h1 id="注意-如果访问不了-https-xxx-github-io"><a href="#注意-如果访问不了-https-xxx-github-io" class="headerlink" title="注意 如果访问不了 https://xxx.github.io"></a>注意 如果访问不了 <a href="https://xxx.github.io/">https://xxx.github.io</a></h1><p>需要把本机电脑的 ipv4 协议中的 DNS 服务地址 修改为 114.114.114.114</p>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
      <category>github</category>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>github</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SVN</title>
    <link href="/2020/08/22/12-SVN/"/>
    <url>/2020/08/22/12-SVN/</url>
    
    <content type="html"><![CDATA[<h3 id="什么是版本控制？"><a href="#什么是版本控制？" class="headerlink" title="什么是版本控制？"></a>什么是版本控制？</h3><p>版本管理就是管理更新的历史记录，<br>它给我们提供了一些在软件开发过程中必不可少的功能，例如：</p><ul><li>记录一款软件添加或更改源代码的过程</li><li>回滚到特定阶段，恢复误删除的文件</li><li>合并多人协作的文件等</li><li>多人协同，文件传输</li></ul><h3 id="版本控制分类"><a href="#版本控制分类" class="headerlink" title="版本控制分类"></a>版本控制分类</h3><ul><li>集中式<ul><li>SVN</li></ul></li><li>分布式<ul><li>Git</li></ul></li></ul><hr><h2 id="SVN"><a href="#SVN" class="headerlink" title="SVN"></a>SVN</h2><p>SVN 全称 Apache Subversion，是一个开放源代码的集中式版本管理系统。<br>在 2000 年由 CollabNet 开发，现已发展成为 Apache 软件基金会的一个开源项目。</p><h3 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h3><h3 id="SVN-交互协作流程"><a href="#SVN-交互协作流程" class="headerlink" title="SVN 交互协作流程"></a>SVN 交互协作流程</h3><p><img src="./img/svn%E4%BA%A4%E4%BA%92%E6%B5%81%E7%A8%8B.png" srcset="/img/loading.gif" alt="集中式版本管理 - SVN"></p><h3 id="集中式"><a href="#集中式" class="headerlink" title="集中式"></a>集中式</h3><p>早期的版本管理就是以 <code>Apache Subversion</code> 为代表的集中式版本管理，<br>集中式版本管理将所有的数据集中存放在服务器中，这是有便于统一管理的优点。<br>但是一旦开发者所处的环境不能连接服务器，就无法获取最新源代码，开发也就无法进行。<br>服务器宕机时也是同样的道理，而且万一服务器故障导致数据丢失，<br>恐怕开发者就再也见不到最新的源代码了。</p><p>简而言之：</p><ul><li>中央服务器好比是一个图书馆</li><li>你要改一本书，必须先从图书馆借出来（checkout）</li><li>然后回到家自己改，改完了，再放到图书馆（commit）</li></ul><h3 id="一些术语"><a href="#一些术语" class="headerlink" title="一些术语"></a>一些术语</h3><ul><li>源代码库（repository）：源代码统一存放的地方</li><li>检出（checkout）：当你手上没有源代码的时候，就需要从 responsive checkout 一份</li><li>提交（commit）：当你已经修改了代码，就需要 commit 到 repository</li><li>更新（update）：当你已经 checkout 了一份源代码，Update 一下就可以和 repository 上的源代码同步，你手上的代码就会有最新的变更</li></ul><h3 id="使用-VisualSVN-搭建-SVN-服务器"><a href="#使用-VisualSVN-搭建-SVN-服务器" class="headerlink" title="使用 VisualSVN 搭建 SVN 服务器"></a>使用 VisualSVN 搭建 SVN 服务器</h3><p>SVN 服务器：运行 Subversion 服务的计算机。</p><p>为了方便，我们这里使用比较流行的图形化工具 <a href="https://www.visualsvn.com/">VisualSVN</a><br>来搭建我们的 SVN 服务。</p><p>安装完毕之后，基本使用流程如下：</p><ul><li>创建用户</li><li>创建版本仓库</li><li>设定用户权限</li></ul><h3 id="使用-TortoiseSVN-作为-SVN-客户端"><a href="#使用-TortoiseSVN-作为-SVN-客户端" class="headerlink" title="使用 TortoiseSVN 作为 SVN 客户端"></a>使用 TortoiseSVN 作为 SVN 客户端</h3><p>SVN 客户端：用户通过SVN客户端同SVN服务器交互</p><p>这里我们使用最流行的 <a href="https://tortoisesvn.net/">TortoiseSVN</a></p><p><a href="https://desktop-40umeji:8443/svn/jd">https://DESKTOP-40UMEJI:8443/svn/jd</a></p><p><a href="https://192.168.133.25:8443/svn/jd">https://192.168.133.25:8443/svn/jd</a></p><h3 id="TortoiseSVN-客户端基本操作流程"><a href="#TortoiseSVN-客户端基本操作流程" class="headerlink" title="TortoiseSVN 客户端基本操作流程"></a>TortoiseSVN 客户端基本操作流程</h3><ul><li>检出项目：<code>checkout</code><ul><li>在没有源代码的前提下，需要通过 tortoise-svn 客户端下载</li></ul></li><li>提交修改：<code>commit</code><ul><li>帮你记录当前开发的软件的状态</li></ul></li><li>更新文件或目录：<code>update</code>（更新）<ul><li>别的开发人员在已有源代码的前提下可以通过 update 更新服务器上最新的版本</li></ul></li><li>查看版本日志：<code>log</code>（日志）</li></ul><h3 id="关于冲突"><a href="#关于冲突" class="headerlink" title="关于冲突"></a>关于冲突</h3><p>假设 A、B 两个用户都在版本号为 100 的时候，更新了 kingtuns.txt 这个文件，<br>A 用户在修改完成之后提交 kingtuns.txt 到服务器， 这个时候提交成功，<br>这个时候 kingtuns.txt 文件的版本号已经变成 101 了。<br>同时B用户在版本号为 100 的 kingtuns.txt 文件上作修改， 修改完成之后提交到服务器时，<br>由于不是在当前最新的 101 版本上作的修改，所以导致提交失败。</p><p>良好的使用习惯就是，提交之前，先更新。</p><p>为了避免冲突，别人的文件你最好不要动，<br>万一你要修改公共的文件或者是别人的文件，<br>跟别人最好口头沟通好，就是你改动的时候，<br>别人最好不要去改动，这样才能最大程度上避免冲突的问题。</p><p>多人协作时，同个目录或同个文件需要不同成员共同开发，<br>这个时候 commit 和 update 就可能出现冲突。</p><ul><li>两个程序员只要不是修改了同一行程序，SVN 可以通过 update 自动合并修改</li><li>但是如果两个程序员修改了同一行程序， SVN 会提示文件 conflict，需要手动确定</li></ul><p>如何解决？</p><p>第一种解决方法：手动合并冲突的内容</p><p>第二种解决方法：每次修改某个文件的时候对文件上锁，这样你在修改的过程中别人就无法更新这个文件</p><p>建议：</p><ul><li>一个文件最好同一时间只被一个人修改提交</li><li>多跟团队成员沟通</li><li>不要随便去修改别人的文件</li></ul><h3 id="版本管理使用建议"><a href="#版本管理使用建议" class="headerlink" title="版本管理使用建议"></a>版本管理使用建议</h3><ul><li>不要频繁的提交版本<ul><li>一般有比较成熟的功能模块的时候，再去提交</li><li>修复了功能性 bug 的时候再去提交</li><li>提交的代码最好无 bug</li></ul></li><li>每次 commit 之前都要 update<ul><li>因为你在编辑这个文件的时候，可能比人已经编辑并提交了某个版本</li><li>所以先 update，目的是为了检查一下服务器上有没有最新版，如果有，直接更新<ul><li>更新的过程中如果遇到冲突，不要慌，去手动解决</li></ul></li></ul></li><li>每次 commit 的时候都务必要写提交日志<ul><li>这个提交日志就好比你保存副本的时候加的一个标记</li><li>目的是为了日后做版本的回退查找以及查看记录更新状态</li></ul></li></ul><h3 id="使用总结"><a href="#使用总结" class="headerlink" title="使用总结"></a>使用总结</h3><ul><li>版本控制管理系统</li><li>源代码仓库 repository</li><li>检出代码 checkout</li><li>更新最新源代码 update</li><li>提交修改 commit</li></ul><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><ul><li><a href="http://holy2010.blog.51cto.com/1086044/645944">清除svn保存的username用户名和paasword密码(windows和linux)</a></li><li><a href="http://www.runoob.com/svn/svn-tutorial.html">菜鸟教程 - SVN 教程</a></li></ul><hr>]]></content>
    
    
    <categories>
      
      <category>SVN</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SVN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Node基础总结</title>
    <link href="/2020/08/18/11.%E6%80%BBNode%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93/"/>
    <url>/2020/08/18/11.%E6%80%BBNode%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="为什么要学习Node-js"><a href="#为什么要学习Node-js" class="headerlink" title="为什么要学习Node.js"></a>为什么要学习Node.js</h2><ul><li>企业需求<ul><li>具有服务端开发经验更改</li><li>front-end</li><li>back-end</li><li>全栈开发工程师</li><li>基本的网站开发能力<ul><li>服务端</li><li>前端</li><li>运维部署</li></ul></li><li>多人社区</li></ul></li></ul><p><img src="C:\Users\A\AppData\Roaming\Typora\typora-user-images\image-20200317114503403.png" srcset="/img/loading.gif" alt="image-20200317114503403"></p><h2 id="Node-js是什么"><a href="#Node-js是什么" class="headerlink" title="Node.js是什么"></a>Node.js是什么</h2><ul><li>Node.js是JavaScript 运行时</li><li>通俗易懂的讲，Node.js是JavaScript的运行平台</li><li>Node.js既不是语言，也不是框架，它是一个平台</li><li>浏览器中的JavaScript<ul><li>EcmaScript<ul><li>基本语法</li><li>if</li><li>var</li><li>function</li><li>Object</li><li>Array</li></ul></li><li>Bom</li><li>Dom</li></ul></li><li>Node.js中的JavaScript<ul><li>没有Bom，Dom</li><li>EcmaScript</li><li>在Node中这个JavaScript执行环境为JavaScript提供了一些服务器级别的API<ul><li>例如文件的读写</li><li>网络服务的构建</li><li>网络通信</li><li>http服务器</li></ul></li></ul></li><li>构建与Chrome的V8引擎之上<ul><li>代码只是具有特定格式的字符串</li><li>引擎可以认识它，帮你解析和执行</li><li>Google Chrome的V8引擎是目前公认的解析执行JavaScript代码最快的</li><li>Node.js的作者把Google Chrome中的V8引擎移植出来，开发了一个独立的JavaScript运行时环境</li></ul></li><li>Node.js uses an envent-driven,non-blocking I/O mode that makes it lightweight and efficent.<ul><li>envent-driven    事件驱动</li><li>non-blocking I/O mode   非阻塞I/O模型（异步）</li><li>ightweight and efficent.   轻量和高效</li></ul></li><li>Node.js package ecosystem,npm,is the larget scosystem of open sourcr libraries in the world<ul><li>npm 是世界上最大的开源生态系统</li><li>绝大多数JavaScript相关的包都存放在npm上，这样做的目的是为了让开发人员更方便的去下载使用</li><li>npm install jquery</li></ul></li></ul><h2 id="Node能做什么"><a href="#Node能做什么" class="headerlink" title="Node能做什么"></a>Node能做什么</h2><ul><li>web服务器后台</li><li>命令行工具<ul><li>npm(node)</li><li>git(c语言)</li><li>hexo（node）</li><li>…</li></ul></li><li>对于前端工程师来讲，接触最多的是它的命令行工具<ul><li>自己写的很少，主要是用别人第三方的</li><li>webpack</li><li>gulp</li><li>npm</li></ul></li></ul><h1 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h1><h2 id="安装Node环境"><a href="#安装Node环境" class="headerlink" title="安装Node环境"></a>安装Node环境</h2><ul><li>查看Node环境的版本号</li><li>下载：<a href="https://nodejs.org/en/">https://nodejs.org/en/</a></li><li>安装：<ul><li>傻瓜式安装，一路<code>next</code></li><li>安装过再次安装会升级</li></ul></li><li>确认Node环境是否安装成功<ul><li>查看node的版本号：<code>node --version</code></li><li>或者<code>node -v</code></li></ul></li><li>配置环境变量</li></ul><h2 id="解析执行JavaScript"><a href="#解析执行JavaScript" class="headerlink" title="解析执行JavaScript"></a>解析执行JavaScript</h2><ol><li>创建编写JavaScript脚本文件</li><li>打开终端，定位脚本文件的所属目录</li><li>输入<code>node  文件名</code>执行对应的文件</li></ol><p>注意：文件名不要用<code>node.js</code>来命名，也就是说除了<code>node</code>这个名字随便起，最好不要使用中文。</p><h2 id="文件的读写"><a href="#文件的读写" class="headerlink" title="文件的读写"></a>文件的读写</h2><p>文件读取:</p><pre><code class="hljs javascript"><span class="hljs-comment">//浏览器中的JavaScript是没有文件操作能力的</span><span class="hljs-comment">//但是Node中的JavaScript具有文件操作能力</span><span class="hljs-comment">//fs是file-system的简写，就是文件系统的意思</span><span class="hljs-comment">//在Node中如果想要进行文件的操作就必须引用fs这个核心模块</span><span class="hljs-comment">//在fs这个核心模块中，就提供了人所有文件操作相关的API</span><span class="hljs-comment">//例如 fs.readFile就是用来读取文件的</span><span class="hljs-comment">//  1.使用fs核心模块</span><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<span class="hljs-comment">// 2.读取文件</span>fs.readFile(<span class="hljs-string">&#x27;./data/a.txt&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err,data</span>)</span>&#123;   <span class="hljs-keyword">if</span>(err)&#123;        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;文件读取失败&#x27;</span>);   &#125;    <span class="hljs-keyword">else</span>&#123;         <span class="hljs-built_in">console</span>.log(data.toString());    &#125;&#125;)</code></pre><p>文件写入：</p><pre><code class="hljs javascript"><span class="hljs-comment">//  1.使用fs核心模块</span><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<span class="hljs-comment">// 2.将数据写入文件</span>fs.writeFile(<span class="hljs-string">&#x27;./data/a.txt&#x27;</span>,<span class="hljs-string">&#x27;我是文件写入的信息&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err,data</span>)</span>&#123;   <span class="hljs-keyword">if</span>(err)&#123;        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;文件写入失败&#x27;</span>);   &#125;    <span class="hljs-keyword">else</span>&#123;         <span class="hljs-built_in">console</span>.log(data.toString());    &#125;&#125;)</code></pre><h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><p>服务器：</p><pre><code class="hljs javascript"><span class="hljs-comment">// 1.加载http核心模块</span><span class="hljs-keyword">var</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<span class="hljs-comment">// 2.使用http.createServer()创建一个web服务器</span><span class="hljs-keyword">var</span> server = http.createServer();<span class="hljs-comment">// 3.服务器要做的事儿</span><span class="hljs-comment">// 提供服务：对数据服务</span><span class="hljs-comment">// 发请求</span><span class="hljs-comment">//接收请求</span><span class="hljs-comment">//处理请求</span><span class="hljs-comment">//反馈（发送响应）</span><span class="hljs-comment">//当客户端请求过来，就会自动触发服务器的request请求事件，然后执行第二个参数：回调处理函数</span>server.on(<span class="hljs-string">&#x27;request&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;收到客户的请求了&#x27;</span>)&#125;)<span class="hljs-comment">// 4.绑定端口号，启动服务</span>server.listen(<span class="hljs-number">3000</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;runing...&#x27;</span>)&#125;)</code></pre><h1 id="Node中的模块系统"><a href="#Node中的模块系统" class="headerlink" title="Node中的模块系统"></a>Node中的模块系统</h1><p>使用Node编写应用程序主要就是在使用：</p><ul><li><p>EcmaScript语言</p><ul><li>和浏览器一样，在Node中没有Bom和Dom</li></ul></li><li><p>核心模块</p><ul><li>文件操作的fs</li><li>http服务操作的http</li><li>url路径操作模块</li><li>path路径处理模块</li><li>os操作系统信息</li></ul></li><li><p>第三方模块</p><ul><li>art-template</li><li>必须通过npm来下载才可以使用</li></ul></li><li><p>自己写的模块</p><ul><li>自己创建的文件</li></ul></li></ul><h2 id="什么是模块化"><a href="#什么是模块化" class="headerlink" title="什么是模块化"></a>什么是模块化</h2><ul><li>文件作用域(模块是独立的，在不同的文件使用必须要重新引用)【在node中没有全局作用域，它是文件模块作用域】</li><li>通信规则<ul><li>加载require</li><li>导出exports</li></ul></li></ul><h2 id="CommonJS模块规范"><a href="#CommonJS模块规范" class="headerlink" title="CommonJS模块规范"></a>CommonJS模块规范</h2><p>在Node中的JavaScript还有一个重要的概念，模块系统。</p><ul><li><p>模块作用域</p></li><li><p>使用require方法来加载模块</p></li><li><p>使用exports接口对象来导出模板中的成员</p><h3 id="加载require"><a href="#加载require" class="headerlink" title="加载require"></a>加载<code>require</code></h3><p>语法：</p><pre><code class="hljs java"><span class="hljs-keyword">var</span> 自定义变量名 = require(<span class="hljs-string">&#x27;模块&#x27;</span>)</code></pre><p>作用：</p><ul><li>执行被加载模块中的代码</li><li>得到被加载模块中的<code>exports</code>导出接口对象</li></ul><h3 id="导出exports"><a href="#导出exports" class="headerlink" title="导出exports"></a>导出<code>exports</code></h3><ul><li><p>Node中是模块作用域，默认文件中所有的成员只在当前模块有效</p></li><li><p>对于希望可以被其他模块访问到的成员，我们需要把这些公开的成员都挂载到<code>exports</code>接口对象中就可以了</p><p>导出多个成员（必须在对象中）：</p><pre><code class="hljs javascript"><span class="hljs-built_in">exports</span>.a = <span class="hljs-number">123</span>;<span class="hljs-built_in">exports</span>.b = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;bbb&#x27;</span>)&#125;;<span class="hljs-built_in">exports</span>.c = &#123;    foo:<span class="hljs-string">&quot;bar&quot;</span>&#125;;<span class="hljs-built_in">exports</span>.d = <span class="hljs-string">&#x27;hello&#x27;</span>;</code></pre></li></ul></li></ul><pre><code>导出单个成员（拿到的就是函数，字符串）：<pre><code class="hljs javascript"><span class="hljs-built_in">module</span>.exports = <span class="hljs-string">&#x27;hello&#x27;</span>;</code></pre>以下情况会覆盖：<pre><code class="hljs javascript"><span class="hljs-built_in">module</span>.exports = <span class="hljs-string">&#x27;hello&#x27;</span>;<span class="hljs-comment">//后者会覆盖前者</span><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">x,y</span>) </span>&#123;    <span class="hljs-keyword">return</span> x+y;&#125;</code></pre>也可以通过以下方法来导出多个成员：<pre><code class="hljs javascript"><span class="hljs-built_in">module</span>.exports = &#123;    foo = <span class="hljs-string">&#x27;hello&#x27;</span>,    add:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-keyword">return</span> x+y;    &#125;&#125;;</code></pre></code></pre><h2 id="模块原理"><a href="#模块原理" class="headerlink" title="模块原理"></a>模块原理</h2><p>exports和<code>module.exports</code>的一个引用：</p><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">exports</span> === <span class="hljs-built_in">module</span>.exports);<span class="hljs-comment">//true</span><span class="hljs-built_in">exports</span>.foo = <span class="hljs-string">&#x27;bar&#x27;</span>;<span class="hljs-comment">//等价于</span><span class="hljs-built_in">module</span>.exports.foo = <span class="hljs-string">&#x27;bar&#x27;</span>;</code></pre><p><code>当给exports重新赋值后，exports！= module.exports.</code></p><p><code>最终return的是module.exports,无论exports中的成员是什么都没用。</code></p><pre><code class="hljs javascript">真正去使用的时候：导出单个成员：<span class="hljs-built_in">exports</span>.xxx = xxx;导出多个成员：<span class="hljs-built_in">module</span>.exports 或者 modeule.exports = &#123;&#125;;</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><pre><code class="hljs javascript"><span class="hljs-comment">// 引用服务</span><span class="hljs-keyword">var</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<span class="hljs-comment">// 引用模板</span><span class="hljs-keyword">var</span> template = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;art-template&#x27;</span>);<span class="hljs-comment">// 创建服务</span><span class="hljs-keyword">var</span> server = http.createServer();<span class="hljs-comment">// 公共路径</span><span class="hljs-keyword">var</span> wwwDir = <span class="hljs-string">&#x27;D:/app/www&#x27;</span>;server.on(<span class="hljs-string">&#x27;request&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>&#123;    <span class="hljs-keyword">var</span> url = req.url;    <span class="hljs-comment">// 读取文件</span>    fs.readFile(<span class="hljs-string">&#x27;./template-apche.html&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, data</span>) </span>&#123;        <span class="hljs-keyword">if</span> (err) &#123;            <span class="hljs-keyword">return</span> res.end(<span class="hljs-string">&#x27;404 Not Found&#x27;</span>);        &#125;        fs.readdir(wwwDir, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, files</span>) </span>&#123;            <span class="hljs-keyword">if</span> (err) &#123;                <span class="hljs-keyword">return</span> res.end(<span class="hljs-string">&#x27;Can not find www Dir.&#x27;</span>)            &#125;            <span class="hljs-comment">// 使用模板引擎解析替换data中的模板字符串</span>            <span class="hljs-comment">// 去xmpTempleteList.html中编写模板语法</span>            <span class="hljs-keyword">var</span> htmlStr = template.render(data.toString(), &#123;                 title: <span class="hljs-string">&#x27;D:/app/www/ 的索引&#x27;</span>,                files:files             &#125;);            <span class="hljs-comment">// 发送响应数据</span>            res.end(htmlStr);        &#125;)    &#125;)&#125;);server.listen(<span class="hljs-number">3000</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;running....&#x27;</span>);&#125;)</code></pre><pre><code class="hljs javascript"><span class="hljs-number">1.</span>jQuery中的each 和 原生JavaScript方法forEach的区别：提供源头：    原生js是es5提供的（不兼容IE8）,        jQuery的each是jQuery第三方库提供的（如果要使用需要用<span class="hljs-number">2</span>以下的版本也就是<span class="hljs-number">1.</span>版本）,它的each方法主要用来遍历jQuery实例对象（伪数组）,同时也可以做低版本forEach的替代品,jQuery的实例对象不能使用forEach方法，如果想要使用必须转为数组（[].slice.call(jQuery实例对象)）才能使用<span class="hljs-number">2.</span>模块中导出多个成员和导出单个成员<span class="hljs-number">3.301</span>和<span class="hljs-number">302</span>的区别：<span class="hljs-number">301</span>永久重定向,浏览器会记住    <span class="hljs-number">302</span>临时重定向<span class="hljs-number">4.</span><span class="hljs-built_in">exports</span>和<span class="hljs-built_in">module</span>.exports的区别:每个模块中都有一个<span class="hljs-built_in">module</span>对象    <span class="hljs-built_in">module</span>对象中有一个<span class="hljs-built_in">exports</span>对象    我们可以把需要导出的成员都挂载到<span class="hljs-built_in">module</span>.exports接口对象中也就是<span class="hljs-string">`module.exports.xxx = xxx`</span>的方式    但是每次写太多了就很麻烦，所以Node为了简化代码，就在每一个模块中都提供了一个成员叫<span class="hljs-string">`exports`</span>    <span class="hljs-string">`exports === module.exports`</span>结果为<span class="hljs-literal">true</span>,所以完全可以<span class="hljs-string">`exports.xxx = xxx`</span>    当一个模块需要导出单个成员的时候必须使用<span class="hljs-string">`module.exports = xxx`</span>的方式，=,使用<span class="hljs-string">`exports = xxx`</span>不管用,因为每个模块最终<span class="hljs-keyword">return</span>的是<span class="hljs-built_in">module</span>.exports,而<span class="hljs-built_in">exports</span>只是<span class="hljs-built_in">module</span>.exports的一个引用,所以<span class="hljs-string">`exports`</span>即使重新赋值,也不会影响<span class="hljs-string">`module.exports`</span>。    有一种赋值方式比较特殊：<span class="hljs-string">`exports = module.exports`</span>这个用来新建立引用关系的。</code></pre><h1 id="require的加载规则"><a href="#require的加载规则" class="headerlink" title="require的加载规则"></a>require的加载规则</h1><ul><li><p>核心模块</p><ul><li>模块名</li></ul></li><li><p>第三方模块</p><ul><li>模块名</li></ul></li><li><p>用户自己写的</p><ul><li>路径</li></ul></li></ul><h2 id="require的加载规则："><a href="#require的加载规则：" class="headerlink" title="require的加载规则："></a>require的加载规则：</h2><ul><li><p>优先从缓存加载</p></li><li><p>判断模块标识符</p><ul><li>核心模块</li><li>自己写的模块（路径形式的模块）</li><li>第三方模块（node_modules）<ul><li>第三方模块的标识就是第三方模块的名称（不可能有第三方模块和核心模块的名字一致）</li><li>npm<ul><li>开发人员可以把写好的框架库发布到npm上</li><li>使用者通过npm命令来下载</li></ul></li><li>使用方式：<code>var 名称 = require(&#39;npm install【下载包】 的包名&#39;)</code><ul><li>node_modules/express/package.json main</li><li>如果package.json或者main不成立，则查找被选择项：index.js</li><li>如果以上条件都不满足，则继续进入上一级目录中的node_modules按照上面的规则依次查找，直到当前文件所属此盘根目录都找不到最后报错</li></ul></li></ul></li></ul></li></ul><pre><code class="hljs javascript"><span class="hljs-comment">// 如果非路径形式的标识</span><span class="hljs-comment">// 路径形式的标识：</span>    <span class="hljs-comment">// ./  当前目录 不可省略</span>    <span class="hljs-comment">// ../  上一级目录  不可省略</span>    <span class="hljs-comment">//  /xxx也就是D:/xxx</span>    <span class="hljs-comment">// 带有绝对路径几乎不用（D:/a/foo.js）</span><span class="hljs-comment">// 首位表示的是当前文件模块所属磁盘根目录</span><span class="hljs-comment">// require(&#x27;./a&#x27;); </span><span class="hljs-comment">// 核心模块</span><span class="hljs-comment">// 核心模块本质也是文件，核心模块文件已经被编译到了二进制文件中了，我们只需要按照名字来加载就可以了</span><span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>); <span class="hljs-comment">// 第三方模块</span><span class="hljs-comment">// 凡是第三方模块都必须通过npm下载（npm i node_modules），使用的时候就可以通过require(&#x27;包名&#x27;)来加载才可以使用</span><span class="hljs-comment">// 第三方包的名字不可能和核心模块的名字是一样的</span><span class="hljs-comment">// 既不是核心模块，也不是路径形式的模块</span><span class="hljs-comment">//      先找到当前文所述目录的node_modules</span><span class="hljs-comment">//      然后找node_modules/art-template目录</span><span class="hljs-comment">//      node_modules/art-template/package.json</span><span class="hljs-comment">//      node_modules/art-template/package.json中的main属性</span><span class="hljs-comment">//      main属性记录了art-template的入口模块</span><span class="hljs-comment">//      然后加载使用这个第三方包</span><span class="hljs-comment">//      实际上最终加载的还是文件</span><span class="hljs-comment">//      如果package.json不存在或者mian指定的入口模块不存在</span><span class="hljs-comment">//      则node会自动找该目录下的index.js</span><span class="hljs-comment">//      也就是说index.js是一个备选项，如果main没有指定，则加载index.js文件</span><span class="hljs-comment">//      </span>        <span class="hljs-comment">// 如果条件都不满足则会进入上一级目录进行查找</span><span class="hljs-comment">// 注意：一个项目只有一个node_modules，放在项目根目录中，子目录可以直接调用根目录的文件</span><span class="hljs-keyword">var</span> template = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;art-template&#x27;</span>);</code></pre><h2 id="模块标识符中的-和文件操作路径中的"><a href="#模块标识符中的-和文件操作路径中的" class="headerlink" title="模块标识符中的/和文件操作路径中的/"></a>模块标识符中的<code>/</code>和文件操作路径中的<code>/</code></h2><p>文件操作路径：</p><pre><code class="hljs javascript"><span class="hljs-comment">// 咱们所使用的所有文件操作的API都是异步的</span><span class="hljs-comment">// 就像ajax请求一样</span><span class="hljs-comment">// 读取文件</span><span class="hljs-comment">// 文件操作中 ./ 相当于当前模块所处磁盘根目录</span><span class="hljs-comment">// ./index.txt    相对于当前目录</span><span class="hljs-comment">// /index.txt    相对于当前目录</span><span class="hljs-comment">// /index.txt   绝对路径,当前文件模块所处根目录</span><span class="hljs-comment">// d:express/index.txt   绝对路径</span>fs.readFile(<span class="hljs-string">&#x27;./index.txt&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err,data</span>)</span>&#123;    <span class="hljs-keyword">if</span>(err)&#123;       <span class="hljs-keyword">return</span>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;读取失败&#x27;</span>);    &#125;    <span class="hljs-built_in">console</span>.log(data.toString());&#125;)</code></pre><p>模块操作路径：</p><pre><code class="hljs javascript"><span class="hljs-comment">// 在模块加载中，相对路径中的./不能省略</span><span class="hljs-comment">// 这里省略了.也是磁盘根目录</span><span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./index&#x27;</span>)(<span class="hljs-string">&#x27;hello&#x27;</span>)</code></pre><h1 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h1><ul><li>node package manage(node包管理器)</li><li>通过npm命令安装jQuery包（npm install –save jquery），在安装时加上–save会主动生成说明书文件信息（将安装文件的信息添加到package.json里面）</li></ul><h3 id="npm网站"><a href="#npm网站" class="headerlink" title="npm网站"></a>npm网站</h3><blockquote><p>​    npmjs.com    网站   是用来搜索npm包的</p></blockquote><h3 id="npm命令行工具"><a href="#npm命令行工具" class="headerlink" title="npm命令行工具"></a>npm命令行工具</h3><p>npm是一个命令行工具，只要安装了node就已经安装了npm。</p><p>npm也有版本概念，可以通过<code>npm --version</code>来查看npm的版本</p><p>升级npm(自己升级自己)：</p><pre><code class="hljs javascript">npm install --<span class="hljs-built_in">global</span> npm</code></pre><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul><li>npm init(生成package.json说明书文件)<ul><li>npm init -y(可以跳过向导，快速生成)</li></ul></li><li>npm install<ul><li>一次性把dependencies选项中的依赖项全部安装</li><li>简写（npm i）</li></ul></li><li>npm install 包名<ul><li>只下载</li><li>简写（npm i 包名）</li></ul></li><li>npm install –save 包名<ul><li>下载并且保存依赖项（package.json文件中的dependencies选项）</li><li>简写（npm i  包名）</li></ul></li><li>npm uninstall 包名<ul><li>只删除，如果有依赖项会依然保存</li><li>简写（npm un 包名）</li></ul></li><li>npm uninstall –save 包名<ul><li>删除的同时也会把依赖信息全部删除</li><li>简写（npm un 包名）</li></ul></li><li>npm help<ul><li>查看使用帮助</li></ul></li><li>npm 命令 –help<ul><li>查看具体命令的使用帮助（npm uninstall –help）</li></ul></li></ul><h3 id="解决npm被墙问题"><a href="#解决npm被墙问题" class="headerlink" title="解决npm被墙问题"></a>解决npm被墙问题</h3><p>npm存储包文件的服务器在国外，有时候会被墙，速度很慢，所以需要解决这个问题。</p><blockquote><p><a href="https://developer.aliyun.com/mirror/NPM?from=tnpm%E6%B7%98%E5%AE%9D%E7%9A%84%E5%BC%80%E5%8F%91%E5%9B%A2%E9%98%9F%E6%8A%8Anpm%E5%9C%A8%E5%9B%BD%E5%86%85%E5%81%9A%E4%BA%86%E4%B8%80%E4%B8%AA%E9%95%9C%E5%83%8F%EF%BC%88%E4%B9%9F%E5%B0%B1%E6%98%AF%E4%B8%80%E4%B8%AA%E5%A4%87%E4%BB%BD%EF%BC%89%E3%80%82">https://developer.aliyun.com/mirror/NPM?from=tnpm淘宝的开发团队把npm在国内做了一个镜像（也就是一个备份）。</a></p></blockquote><p>安装淘宝的cnpm：</p><pre><code class="hljs javascript">npm install -g cnpm --registry=https:<span class="hljs-comment">//registry.npm.taobao.org;</span></code></pre><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">在任意目录执行都可以</span><span class="hljs-meta">#</span><span class="bash">--global表示安装到全局，而非当前目录</span><span class="hljs-meta">#</span><span class="bash">--global不能省略，否则不管用</span>npm install --global cnpm</code></pre><p>安装包的时候把以前的<code>npm</code>替换成<code>cnpm</code>。</p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">走国外的npm服务器下载jQuery包，速度比较慢</span>npm install jQuery;<span class="hljs-meta">#</span><span class="bash">使用cnpm就会通过淘宝的服务器来下载jQuery</span>cnpm install jQuery;</code></pre><p>如果不想安装<code>cnpm</code>又想使用淘宝的服务器来下载：</p><pre><code class="hljs shell">npm install jquery --registry=https://npm.taobao.org;</code></pre><p>但是每次手动加参数就很麻烦，所以我们可以把这个选项加入到配置文件中：</p><pre><code class="hljs shell">npm config set registry https://npm.taobao.org;<span class="hljs-meta">#</span><span class="bash">查看npm配置信息</span>npm config list;</code></pre><p>只要经过上面的配置命令，则以后所有的<code>npm install</code>都会通过淘宝的服务器来下载</p><h1 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h1><p>每一个项目都要有一个<code>package.json</code>文件（包描述文件，就像产品的说明书一样）</p><p>这个文件可以通过<code>npm init</code>自动初始化出来</p><pre><code class="hljs javascript">D:\code\node中的模块系统&gt;npm initThis utility will walk you through creating a package.json file.It only covers the most common items, and tries to guess sensible defaults.See <span class="hljs-string">`npm help json`</span> <span class="hljs-keyword">for</span> definitive documentation on these fieldsand exactly what they <span class="hljs-keyword">do</span>.Use <span class="hljs-string">`npm install &lt;pkg&gt;`</span> afterwards to install a package andsave it <span class="hljs-keyword">as</span> a dependency <span class="hljs-keyword">in</span> the package.json file.Press ^C at any time to quit.package name: (node中的模块系统)Sorry, name can only contain URL-friendly characters.package name: (node中的模块系统) clsversion: (<span class="hljs-number">1.0</span><span class="hljs-number">.0</span>)description: 这是一个测试项目entry point: (main.js)test command:git repository:keywords:author: xiaochenlicense: (ISC)About to write to D:\code\node中的模块系统\package.json:&#123;  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;cls&quot;</span>,  <span class="hljs-string">&quot;version&quot;</span>: <span class="hljs-string">&quot;1.0.0&quot;</span>,  <span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;这是一个测试项目&quot;</span>,  <span class="hljs-string">&quot;main&quot;</span>: <span class="hljs-string">&quot;main.js&quot;</span>,  <span class="hljs-string">&quot;scripts&quot;</span>: &#123;    <span class="hljs-string">&quot;test&quot;</span>: <span class="hljs-string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>  &#125;,  <span class="hljs-string">&quot;author&quot;</span>: <span class="hljs-string">&quot;xiaochen&quot;</span>,  <span class="hljs-string">&quot;license&quot;</span>: <span class="hljs-string">&quot;ISC&quot;</span>&#125;Is <span class="hljs-built_in">this</span> OK? (yes) yes</code></pre><p>对于目前来讲，最有用的是<code>dependencies</code>选项，可以用来帮助我们保存第三方包的依赖信息。</p><p>如果<code>node_modules</code>删除了也不用担心，只需要在控制面板中<code>npm install</code>就会自动把<code>package.json</code>中的<code>dependencies</code>中所有的依赖项全部都下载回来。</p><ul><li>建议每个项目的根目录下都有一个<code>package.json</code>文件</li><li>建议执行<code>npm install 包名</code>的时候都加上<code>--save</code>选项，目的是用来保存依赖信息</li></ul><h2 id="package-json和package-lock-json"><a href="#package-json和package-lock-json" class="headerlink" title="package.json和package-lock.json"></a>package.json和package-lock.json</h2><p>npm 5以前是不会有<code>package-lock.json</code>这个文件</p><p>npm5以后才加入这个文件</p><p>当你安装包的时候，npm都会生成或者更新<code>package-lock.json</code>这个文件</p><ul><li>npm5以后的版本安装都不要加<code>--save</code>参数，它会自动保存依赖信息</li><li>当你安装包的时候，会自动创建或者更新<code>package-lock.json</code>文件</li><li><code>package-lock.json</code>这个文件会包含<code>node_modules</code>中所有包的信息（版本，下载地址。。。）<ul><li>这样的话重新<code>npm install</code>的时候速度就可以提升</li></ul></li><li>从文件来看，有一个<code>lock</code>称之为锁<ul><li>这个<code>lock</code>使用来锁版本的</li><li>如果项目依赖了<code>1.1.1</code>版本</li><li>如果你重新install其实会下载最细版本，而不是<code>1.1.1</code></li><li><code>package-lock.json</code>的另外一个作用就是锁定版本号，防止自动升级</li></ul></li></ul><h2 id="path路径操作模块"><a href="#path路径操作模块" class="headerlink" title="path路径操作模块"></a>path路径操作模块</h2><blockquote><p>参考文档：<a href="https://nodejs.org/docs/latest-v13.x/api/path.html">https://nodejs.org/docs/latest-v13.x/api/path.html</a></p></blockquote><ul><li>path.basename：获取路径的文件名，默认包含扩展名</li><li>path.dirname：获取路径中的目录部分</li><li>path.extname：获取一个路径中的扩展名部分</li><li>path.parse：把路径转换为对象<ul><li>root：根路径</li><li>dir：目录</li><li>base：包含后缀名的文件名</li><li>ext：后缀名</li><li>name：不包含后缀名的文件名</li></ul></li><li>path.join：拼接路径</li><li>path.isAbsolute：判断一个路径是否为绝对路径<img src="C:\Users\A\AppData\Roaming\Typora\typora-user-images\image-20200315150610001.png" srcset="/img/loading.gif" alt="image-20200315150610001"></li></ul><h1 id="Node中的其它成员-dirname-filename"><a href="#Node中的其它成员-dirname-filename" class="headerlink" title="Node中的其它成员(__dirname,__filename)"></a>Node中的其它成员(__dirname,__filename)</h1><p>在每个模块中，除了<code>require</code>,<code>exports</code>等模块相关的API之外，还有两个特殊的成员：</p><ul><li><p><code>__dirname</code>，是一个成员，可以用来<strong>动态</strong>获取当前文件模块所属目录的绝对路径</p></li><li><p><code>__filename</code>，可以用来<strong>动态</strong>获取当前文件的绝对路径（包含文件名）</p></li><li><p><code>__dirname</code>和<code>filename</code>是不受执行node命令所属路径影响的</p><p><img src="C:\Users\A\AppData\Roaming\Typora\typora-user-images\image-20200315151551873.png" srcset="/img/loading.gif" alt="image-20200315151551873"></p></li></ul><p>在文件操作中，使用相对路径是不可靠的，因为node中文件操作的路径被设计为相对于执行node命令所处的路径。</p><p>所以为了解决这个问题，只需要把相对路径变为绝对路径（绝对路径不受任何影响）就可以了。</p><p>就可以使用<code>__dirname</code>或者<code>__filename</code>来帮助我们解决这个问题</p><p>在拼接路径的过程中，为了避免手动拼接带来的一些低级错误，推荐使用<code>path.join()</code>来辅助拼接</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<span class="hljs-keyword">var</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<span class="hljs-comment">// console.log(__dirname + &#x27;a.txt&#x27;);</span><span class="hljs-comment">// path.join方法会将文件操作中的相对路径都统一的转为动态的绝对路径</span>fs.readFile(path.join(__dirname + <span class="hljs-string">&#x27;/a.txt&#x27;</span>),<span class="hljs-string">&#x27;utf8&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err,data</span>)</span>&#123;<span class="hljs-keyword">if</span>(err)&#123;<span class="hljs-keyword">throw</span> err&#125;<span class="hljs-built_in">console</span>.log(data);&#125;);</code></pre><blockquote><p>补充：模块中的路径标识和这里的路径没关系，不受影响（就是相对于文件模块）</p></blockquote><blockquote><p><strong>注意：</strong></p><p><strong>模块中的路径标识和文件操作中的相对路径标识不一致</strong></p><p><strong>模块中的路径标识就是相对于当前文件模块，不受node命令所处路径影响</strong></p></blockquote><h1 id="Express（快速的）"><a href="#Express（快速的）" class="headerlink" title="Express（快速的）"></a>Express（快速的）</h1><p>作者：Tj</p><p>原生的http在某些方面表现不足以应对我们的开发需求，所以就需要使用框架来加快我们的开发效率，框架的目的就是提高效率，让我们的代码高度统一。</p><p>在node中有很多web开发框架。主要学习express</p><ul><li><p><code>http://expressjs.com/</code>,其中主要封装的是http。</p></li><li><pre><code class="javascript">// 1 安装// 2 引包var express = require(&#39;express&#39;);// 3 创建服务器应用程序//      也就是原来的http.createServer();var app = express();// 公开指定目录// 只要通过这样做了，就可以通过/public/xx的方式来访问public目录中的所有资源// 在Express中开放资源就是一个API的事app.use(&#39;/public/&#39;,express.static(&#39;/public/&#39;));//模板引擎在Express中开放模板也是一个API的事// 当服务器收到get请求 / 的时候，执行回调处理函数app.get(&#39;/&#39;,function(req,res)&#123;    res.send(&#39;hello express&#39;);&#125;)// 相当于server.listenapp.listen(3000,function()&#123;    console.log(&#39;app is runing at port 3000&#39;);&#125;)<pre><code class="hljs">### 学习Express#### 起步##### 安装：![image-20200310123723079](C:\Users\A\AppData\Roaming\Typora\typora-user-images\image-20200310123723079.png)```javascriptcnpm install express</code></pre></code></pre></li></ul><h5 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world:"></a>hello world:<img src="C:\Users\A\AppData\Roaming\Typora\typora-user-images\image-20200310124850557.png" srcset="/img/loading.gif" alt="image-20200310124850557"></h5><pre><code class="hljs javascript"><span class="hljs-comment">// 引入express</span><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<span class="hljs-comment">// 1. 创建app</span><span class="hljs-keyword">var</span> app = express();<span class="hljs-comment">//  2. </span>app.get(<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>&#123;    <span class="hljs-comment">// 1</span>    <span class="hljs-comment">// res.write(&#x27;Hello&#x27;);</span>    <span class="hljs-comment">// res.write(&#x27;World&#x27;);</span>    <span class="hljs-comment">// res.end()</span>    <span class="hljs-comment">// 2</span>    <span class="hljs-comment">// res.end(&#x27;hello world&#x27;);</span>    <span class="hljs-comment">// 3</span>    res.send(<span class="hljs-string">&#x27;hello world&#x27;</span>);&#125;)app.listen(<span class="hljs-number">3000</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;express app is runing...&#x27;</span>);&#125;)</code></pre><h5 id="基本路由"><a href="#基本路由" class="headerlink" title="基本路由"></a>基本路由</h5><p>路由：</p><ul><li><p>请求方法</p></li><li><p>请求路径</p></li><li><p>请求处理函数</p></li></ul><p>get:</p><pre><code class="hljs javascript"><span class="hljs-comment">//当你以get方法请求/的时候，执行对应的处理函数</span>app.get(<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>&#123;    res.send(<span class="hljs-string">&#x27;hello world&#x27;</span>);&#125;)</code></pre><p>post:</p><pre><code class="hljs javascript"><span class="hljs-comment">//当你以post方法请求/的时候，执行对应的处理函数</span>app.post(<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>&#123;    res.send(<span class="hljs-string">&#x27;hello world&#x27;</span>);&#125;)</code></pre><h5 id="Express静态服务API"><a href="#Express静态服务API" class="headerlink" title="Express静态服务API"></a>Express静态服务API</h5><pre><code class="hljs javascript"><span class="hljs-comment">// app.use不仅仅是用来处理静态资源的，还可以做很多工作(body-parser的配置)</span>app.use(express.static(<span class="hljs-string">&#x27;public&#x27;</span>));app.use(express.static(<span class="hljs-string">&#x27;files&#x27;</span>));app.use(<span class="hljs-string">&#x27;/stataic&#x27;</span>,express.static(<span class="hljs-string">&#x27;public&#x27;</span>));</code></pre><pre><code class="hljs javascript"><span class="hljs-comment">// 引入express</span><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<span class="hljs-comment">// 创建app</span><span class="hljs-keyword">var</span> app = express();<span class="hljs-comment">// 开放静态资源</span><span class="hljs-comment">// 1.当以/public/开头的时候，去./public/目录中找对应资源</span><span class="hljs-comment">// 访问：http://127.0.0.1:3000/public/login.html</span>app.use(<span class="hljs-string">&#x27;/public/&#x27;</span>,express.static(<span class="hljs-string">&#x27;./public/&#x27;</span>)); <span class="hljs-comment">// 2.当省略第一个参数的时候，可以通过省略/public的方式来访问</span><span class="hljs-comment">// 访问：http://127.0.0.1:3000/login.html</span><span class="hljs-comment">// app.use(express.static(&#x27;./public/&#x27;));   </span><span class="hljs-comment">// 3.访问：http://127.0.0.1:3000/a/login.html</span><span class="hljs-comment">// a相当于public的别名</span><span class="hljs-comment">// app.use(&#x27;/a/&#x27;,express.static(&#x27;./public/&#x27;)); </span><span class="hljs-comment">//  </span>app.get(<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>&#123;    res.end(<span class="hljs-string">&#x27;hello world&#x27;</span>);&#125;);app.listen(<span class="hljs-number">3000</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;express app is runing...&#x27;</span>);&#125;);</code></pre><h5 id="在Express中配置使用art-templete模板引擎"><a href="#在Express中配置使用art-templete模板引擎" class="headerlink" title="在Express中配置使用art-templete模板引擎"></a>在Express中配置使用<code>art-templete</code>模板引擎</h5><ul><li><a href="https://aui.github.io/art-template/">art-template官方文档</a></li><li>在node中，有很多第三方模板引擎都可以使用，不是只有<code>art-template</code><ul><li>还有ejs，jade（pug），handlebars，nunjucks</li></ul></li></ul><p>安装：</p><pre><code class="hljs shell">npm install --save art-templatenpm install --save express-art-template//两个一起安装npm i --save art-template express-art-template</code></pre><p>配置：</p><pre><code class="hljs javascript">app.engine(<span class="hljs-string">&#x27;html&#x27;</span>, <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express-art-template&#x27;</span>));</code></pre><p>使用：</p><pre><code class="hljs javascript">app.get(<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>&#123;    <span class="hljs-comment">// express默认会去views目录找index.html</span>    res.render(<span class="hljs-string">&#x27;index.html&#x27;</span>,&#123;           title:<span class="hljs-string">&#x27;hello world&#x27;</span>         &#125;);&#125;)</code></pre><p>如果希望修改默认的<code>views</code>视图渲染存储目录，可以：</p><pre><code class="hljs javascript"><span class="hljs-comment">// 第一个参数views千万不要写错</span>app.set(<span class="hljs-string">&#x27;views&#x27;</span>,目录路径);</code></pre><h5 id="在Express中获取表单请求数据"><a href="#在Express中获取表单请求数据" class="headerlink" title="在Express中获取表单请求数据"></a>在Express中获取表单请求数据</h5><h6 id="获取get请求数据："><a href="#获取get请求数据：" class="headerlink" title="获取get请求数据："></a>获取get请求数据：</h6><p>Express内置了一个api，可以直接通过<code>req.query</code>来获取数据</p><pre><code class="hljs javascript"><span class="hljs-comment">// 通过requery方法获取用户输入的数据</span><span class="hljs-comment">// req.query只能拿到get请求的数据</span> <span class="hljs-keyword">var</span> comment = req.query;</code></pre><h6 id="获取post请求数据："><a href="#获取post请求数据：" class="headerlink" title="获取post请求数据："></a>获取post请求数据：</h6><p>在Express中没有内置获取表单post请求体的api，这里我们需要使用一个第三方包<code>body-parser</code>来获取数据。</p><p>安装：</p><pre><code class="hljs javascript">npm install --save body-parser;</code></pre><p>配置：</p><p>// 配置解析表单 POST 请求体插件（注意：一定要在 app.use(router) 之前 ）</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<span class="hljs-comment">// 引包</span><span class="hljs-keyword">var</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;body-parser&#x27;</span>)<span class="hljs-keyword">var</span> app = express()<span class="hljs-comment">// 配置body-parser</span><span class="hljs-comment">// 只要加入这个配置，则在req请求对象上会多出来一个属性：body</span><span class="hljs-comment">// 也就是说可以直接通过req.body来获取表单post请求数据</span><span class="hljs-comment">// parse application/x-www-form-urlencoded</span>app.use(bodyParser.urlencoded(&#123; <span class="hljs-attr">extended</span>: <span class="hljs-literal">false</span> &#125;))<span class="hljs-comment">// parse application/json</span>app.use(bodyParser.json())</code></pre><p>使用：</p><pre><code class="hljs javascript">app.use(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>&#123;  res.setHeader(<span class="hljs-string">&#x27;Content-Type&#x27;</span>, <span class="hljs-string">&#x27;text/plain&#x27;</span>)  res.write(<span class="hljs-string">&#x27;you posted:\n&#x27;</span>)  <span class="hljs-comment">// 可以通过req.body来获取表单请求数据</span>  res.end(<span class="hljs-built_in">JSON</span>.stringify(req.body, <span class="hljs-literal">null</span>, <span class="hljs-number">2</span>))&#125;)</code></pre><h3 id="在Express中配置使用express-session插件操作"><a href="#在Express中配置使用express-session插件操作" class="headerlink" title="在Express中配置使用express-session插件操作"></a>在Express中配置使用<code>express-session</code>插件操作</h3><blockquote><p>参考文档：<a href="https://github.com/expressjs/session">https://github.com/expressjs/session</a></p></blockquote><p>安装：</p><pre><code class="hljs javascript">npm install express-session</code></pre><p>配置：</p><pre><code class="hljs javascript"><span class="hljs-comment">//该插件会为req请求对象添加一个成员:req.session默认是一个对象</span><span class="hljs-comment">//这是最简单的配置方式</span><span class="hljs-comment">//Session是基于Cookie实现的</span>app.use(session(&#123;  <span class="hljs-comment">//配置加密字符串，他会在原有的基础上和字符串拼接起来去加密</span>  <span class="hljs-comment">//目的是为了增加安全性，防止客户端恶意伪造</span>  secret: <span class="hljs-string">&#x27;keyboard cat&#x27;</span>,  resave: <span class="hljs-literal">false</span>,  saveUninitialized: <span class="hljs-literal">true</span>,<span class="hljs-comment">//无论是否适用Session，都默认直接分配一把钥匙</span>  cookie: &#123; <span class="hljs-attr">secure</span>: <span class="hljs-literal">true</span> &#125;&#125;))</code></pre><p>使用：</p><pre><code class="hljs javascript"><span class="hljs-comment">// 读</span><span class="hljs-comment">//添加Session数据</span><span class="hljs-comment">//session就是一个对象</span>req.session.foo = <span class="hljs-string">&#x27;bar&#x27;</span>;<span class="hljs-comment">//写</span><span class="hljs-comment">//获取session数据</span>req.session.foo<span class="hljs-comment">//删</span>req.session.foo = <span class="hljs-literal">null</span>;<span class="hljs-keyword">delete</span> req.session.foo</code></pre><p>提示：</p><p>默认Session数据时内存储数据，服务器一旦重启，真正的生产环境会把Session进行持久化存储。</p><h3 id="利用Express实现ADUS项目"><a href="#利用Express实现ADUS项目" class="headerlink" title="利用Express实现ADUS项目"></a>利用Express实现ADUS项目</h3><h4 id="模块化思想"><a href="#模块化思想" class="headerlink" title="模块化思想"></a>模块化思想</h4><p>模块如何划分:</p><ul><li>模块职责要单一</li></ul><p>javascript模块化：</p><ul><li>Node 中的 CommonJS</li><li>浏览器中的：<ul><li>AMD    require.js</li><li>CMD     sea.js</li></ul></li><li>es6中增加了官方支持</li></ul><h4 id="起步-1"><a href="#起步-1" class="headerlink" title="起步"></a>起步</h4><ul><li>初始化</li><li>模板处理</li></ul><h4 id="路由设计"><a href="#路由设计" class="headerlink" title="路由设计"></a>路由设计</h4><table><thead><tr><th>请求方法</th><th align="left">请求路径</th><th align="left">get参数</th><th>post参数</th><th align="left">备注</th></tr></thead><tbody><tr><td>GET</td><td align="left">/students</td><td align="left"></td><td></td><td align="left">渲染首页</td></tr><tr><td>GET</td><td align="left">/students/new</td><td align="left"></td><td></td><td align="left">渲染添加学生页面</td></tr><tr><td>POST</td><td align="left">/students/new</td><td align="left"></td><td>name,age,gender,hobbies</td><td align="left">处理添加学生请求</td></tr><tr><td>GET</td><td align="left">/students/edit</td><td align="left">id</td><td></td><td align="left">渲染编辑页面</td></tr><tr><td>POST</td><td align="left">/students/edit</td><td align="left"></td><td>id,name,age,gender,hobbies</td><td align="left">处理编辑请求</td></tr><tr><td>GET</td><td align="left">/students/delete</td><td align="left">id</td><td></td><td align="left">处理删除请求</td></tr></tbody></table><h4 id="提取路由模块"><a href="#提取路由模块" class="headerlink" title="提取路由模块"></a>提取路由模块</h4><p>router.js:</p><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><span class="hljs-comment"> * router.js路由模块</span><span class="hljs-comment"> * 职责：</span><span class="hljs-comment"> *      处理路由</span><span class="hljs-comment"> *      根据不同的请求方法+请求路径设置具体的请求函数</span><span class="hljs-comment"> * 模块职责要单一，我们划分模块的目的就是增强代码的可维护性，提升开发效率</span><span class="hljs-comment"> */</span><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<span class="hljs-comment">// Express专门提供了一种更好的方式</span><span class="hljs-comment">// 专门用来提供路由的</span><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<span class="hljs-comment">// 1 创建一个路由容器</span><span class="hljs-keyword">var</span> router = express.Router();<span class="hljs-comment">// 2 把路由都挂载到路由容器中</span>router.get(<span class="hljs-string">&#x27;/students&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) </span>&#123;    <span class="hljs-comment">// res.send(&#x27;hello world&#x27;);</span>    <span class="hljs-comment">// readFile的第二个参数是可选的，传入utf8就是告诉他把读取到的文件直接按照utf8编码，直接转成我们认识的字符</span>    <span class="hljs-comment">// 除了这样来转换，也可以通过data.toString（）来转换</span>    fs.readFile(<span class="hljs-string">&#x27;./db.json&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, data</span>) </span>&#123;        <span class="hljs-keyword">if</span> (err) &#123;            <span class="hljs-keyword">return</span> res.status(<span class="hljs-number">500</span>).send(<span class="hljs-string">&#x27;Server error.&#x27;</span>)        &#125;        <span class="hljs-comment">// 读取到的文件数据是string类型的数据</span>        <span class="hljs-comment">// console.log(data);</span>        <span class="hljs-comment">// 从文件中读取到的数据一定是字符串，所以一定要手动转换成对象</span>        <span class="hljs-keyword">var</span> students = <span class="hljs-built_in">JSON</span>.parse(data).students;        res.render(<span class="hljs-string">&#x27;index.html&#x27;</span>, &#123;            <span class="hljs-comment">// 读取文件数据</span>            students:students        &#125;)    &#125;)&#125;);router.get(<span class="hljs-string">&#x27;/students/new&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>&#123;    res.render(<span class="hljs-string">&#x27;new.html&#x27;</span>)&#125;);router.get(<span class="hljs-string">&#x27;/students/edit&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>&#123;    &#125;);router.post(<span class="hljs-string">&#x27;/students/edit&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>&#123;    &#125;);router.get(<span class="hljs-string">&#x27;/students/delete&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>&#123;    &#125;);<span class="hljs-comment">// 3 把router导出</span><span class="hljs-built_in">module</span>.exports = router;</code></pre><p>app.js:</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> router = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./router&#x27;</span>);<span class="hljs-comment">// router(app);</span><span class="hljs-comment">// 把路由容器挂载到app服务中</span><span class="hljs-comment">// 挂载路由</span>app.use(router);</code></pre><h4 id="设计操作数据的API文件模块"><a href="#设计操作数据的API文件模块" class="headerlink" title="设计操作数据的API文件模块"></a>设计操作数据的API文件模块</h4><p>es6中的find和findIndex：</p><p>find接受一个方法作为参数，方法内部返回一个条件</p><p>find会便利所有的元素，执行你给定的带有条件返回值的函数</p><p>符合该条件的元素会作为find方法的返回值</p><p>如果遍历结束还没有符合该条件的元素，则返回undefined<img src="C:\Users\A\AppData\Roaming\Typora\typora-user-images\image-20200313103810731.png" srcset="/img/loading.gif" alt="image-20200313103810731"></p><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><span class="hljs-comment"> * student.js</span><span class="hljs-comment"> * 数据操作文件模块</span><span class="hljs-comment"> * 职责：操作文件中的数据，只处理数据，不关心业务</span><span class="hljs-comment"> */</span><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>); <span class="hljs-comment">/**</span><span class="hljs-comment">  * 获取所有学生列表</span><span class="hljs-comment">  * return []</span><span class="hljs-comment">  */</span><span class="hljs-built_in">exports</span>.find = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;    &#125; <span class="hljs-comment">/**</span><span class="hljs-comment">  * 获取添加保存学生</span><span class="hljs-comment">  */</span><span class="hljs-built_in">exports</span>.save = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;        &#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 更新学生</span><span class="hljs-comment"> */</span><span class="hljs-built_in">exports</span>.update = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;        &#125; <span class="hljs-comment">/**</span><span class="hljs-comment"> * 删除学生</span><span class="hljs-comment"> */</span><span class="hljs-built_in">exports</span>.delete = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;        &#125;</code></pre><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ul><li><p>处理模板</p></li><li><p>配置静态开放资源</p></li><li><p>配置模板引擎</p></li><li><p>简单的路由，/studens渲染静态页出来</p></li><li><p>路由设计</p></li><li><p>提取路由模块</p></li><li><p>由于接下来的一系列业务操作都需要处理文件数据，所以我们需要封装Student.js’</p></li><li><p>先写好student.js文件结构</p><ul><li>查询所有学生列别哦的API</li><li>findById</li><li>save</li><li>updateById</li><li>deleteById</li></ul></li><li><p>实现具体功能</p><ul><li>通过路由收到请求</li><li>接受请求中的参数（get，post）<ul><li>req.query</li><li>req.body</li></ul></li><li>调用数据操作API处理数据</li><li>根据操作结果给客户端发送请求</li></ul></li><li><p>业务功能顺序</p><ul><li>列表</li><li>添加</li><li>编辑</li><li>删除</li></ul></li></ul><h4 id="子模板和模板的继承（模板引擎高级语法）【include，extend，block】"><a href="#子模板和模板的继承（模板引擎高级语法）【include，extend，block】" class="headerlink" title="子模板和模板的继承（模板引擎高级语法）【include，extend，block】"></a>子模板和模板的继承（模板引擎高级语法）【include，extend，block】</h4><p>注意:</p><p>模板页：</p><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;&lt;html lang=<span class="hljs-string">&quot;zh&quot;</span>&gt;&lt;head&gt;&lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;&lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;&lt;meta http-equiv=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> content=<span class="hljs-string">&quot;ie=edge&quot;</span>&gt;&lt;title&gt;模板页&lt;/title&gt;&lt;link rel=<span class="hljs-string">&quot;stylesheet&quot;</span> href=<span class="hljs-string">&quot;/node_modules/bootstrap/dist/css/bootstrap.css&quot;</span>/&gt;&#123;&#123; block <span class="hljs-string">&#x27;head&#x27;</span> &#125;&#125;&#123;&#123; /block &#125;&#125;&lt;/head&gt;&lt;body&gt;&lt;!-- 通过include导入公共部分 --&gt;&#123;&#123;include <span class="hljs-string">&#x27;./header.html&#x27;</span>&#125;&#125;&lt;!-- 留一个位置 让别的内容去填充 --&gt;&#123;&#123; block  <span class="hljs-string">&#x27;content&#x27;</span> &#125;&#125;&lt;h1&gt;默认内容&lt;/h1&gt;&#123;&#123; /block &#125;&#125;&lt;!-- 通过include导入公共部分 --&gt;&#123;&#123;include <span class="hljs-string">&#x27;./footer.html&#x27;</span>&#125;&#125;&lt;!-- 公共样式 --&gt;&lt;script src=<span class="hljs-string">&quot;/node_modules/jquery/dist/jquery.js&quot;</span> &gt;&lt;/script&gt;&lt;script src=<span class="hljs-string">&quot;/node_modules/bootstrap/dist/js/bootstrap.js&quot;</span> &gt;&lt;/script&gt;&#123;&#123; block <span class="hljs-string">&#x27;script&#x27;</span> &#125;&#125;&#123;&#123; /block &#125;&#125;&lt;/body&gt;&lt;/html&gt;</code></pre><p>模板的继承：</p><p>​    header页面：</p><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">&quot;&quot;</span>&gt;&lt;h1&gt;公共的头部&lt;/h1&gt;&lt;/div&gt;</code></pre><p>​    footer页面：</p><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">&quot;&quot;</span>&gt;&lt;h1&gt;公共的底部&lt;/h1&gt;&lt;/div&gt;</code></pre><p>模板页的使用：</p><pre><code class="hljs javascript">&lt;!-- 继承(extend:延伸，扩展)模板也layout.html --&gt;&lt;!-- 把layout.html页面的内容都拿进来作为index.html页面的内容 --&gt;&#123;&#123;extend <span class="hljs-string">&#x27;./layout.html&#x27;</span>&#125;&#125;&lt;!-- 向模板页面填充新的数据 --&gt;&lt;!-- 填充后就会替换掉layout页面content中的数据 --&gt;&lt;!-- style样式方面的内容 --&gt;&#123;&#123; block <span class="hljs-string">&#x27;head&#x27;</span> &#125;&#125;&lt;style type=<span class="hljs-string">&quot;text/css&quot;</span>&gt;body&#123;background-color: skyblue;&#125;&lt;/style&gt;&#123;&#123; /block &#125;&#125;&#123;&#123; block <span class="hljs-string">&#x27;content&#x27;</span> &#125;&#125;&lt;div id=<span class="hljs-string">&quot;&quot;</span>&gt;&lt;h1&gt;Index页面的内容&lt;/h1&gt;&lt;/div&gt;&#123;&#123; /block &#125;&#125;&lt;!-- js部分的内容 --&gt;&#123;&#123; block <span class="hljs-string">&#x27;script&#x27;</span> &#125;&#125;&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;&lt;/script&gt;&#123;&#123; /block &#125;&#125;</code></pre><p>最终的显示效果：</p><p><img src="C:\Users\A\AppData\Roaming\Typora\typora-user-images\image-20200316134759517.png" srcset="/img/loading.gif" alt="image-20200316134759517"></p><h1 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h1><h2 id="关系型和非关系型数据库"><a href="#关系型和非关系型数据库" class="headerlink" title="关系型和非关系型数据库"></a>关系型和非关系型数据库</h2><h3 id="关系型数据库（表就是关系，或者说表与表之间存在关系）。"><a href="#关系型数据库（表就是关系，或者说表与表之间存在关系）。" class="headerlink" title="关系型数据库（表就是关系，或者说表与表之间存在关系）。"></a>关系型数据库（表就是关系，或者说表与表之间存在关系）。</h3><ul><li>所有的关系型数据库都需要通过<code>sql</code>语言来操作</li><li>所有的关系型数据库在操作之前都需要设计表结构</li><li>而且数据表还支持约束<ul><li>唯一的</li><li>主键</li><li>默认值</li><li>非空</li></ul></li></ul><h3 id="非关系型数据库"><a href="#非关系型数据库" class="headerlink" title="非关系型数据库"></a>非关系型数据库</h3><ul><li>非关系型数据库非常的灵活</li><li>有的关系型数据库就是key-value对儿</li><li>但MongDB是长得最像关系型数据库的非关系型数据库<ul><li>数据库 -》 数据库</li><li>数据表 -》 集合（数组）</li><li>表记录 -》文档对象</li></ul></li></ul><p>一个数据库中可以有多个数据库，一个数据库中可以有多个集合（数组），一个集合中可以有多个文档（表记录）</p><pre><code class="hljs javascript">&#123;    qq:&#123;       user:[           &#123;&#125;,&#123;&#125;,&#123;&#125;...       ]    &#125;&#125;</code></pre><ul><li>也就是说你可以任意的往里面存数据，没有结构性这么一说</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li><p>下载</p><ul><li>下载地址：<a href="https://www.mongodb.com/download-center/community">https://www.mongodb.com/download-center/community</a></li></ul></li><li><p>安装</p><pre><code class="hljs javascript">npm i mongoose</code></pre></li><li><p>配置环境变量</p></li><li><p>最后输入<code>mongod --version</code>测试是否安装成功</p></li></ul><h2 id="启动和关闭数据库"><a href="#启动和关闭数据库" class="headerlink" title="启动和关闭数据库"></a>启动和关闭数据库</h2><p>启动：</p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> mongodb 默认使用执行mongod 命令所处盼复根目录下的/data/db作为自己的数据存储目录</span><span class="hljs-meta">#</span><span class="bash"> 所以在第一次执行该命令之前先自己手动新建一个 /data/db</span>mongod</code></pre><p>如果想要修改默认的数据存储目录，可以：</p><pre><code class="hljs javascript">mongod --dbpath = 数据存储目录路径</code></pre><p>停止：</p><pre><code class="hljs javascript">在开启服务的控制台，直接Ctrl+C;或者直接关闭开启服务的控制台。</code></pre><p><img src="C:\Users\A\AppData\Roaming\Typora\typora-user-images\image-20200314101047100.png" srcset="/img/loading.gif" alt="image-20200314101047100"></p><h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><p>连接：</p><pre><code class="hljs javascript"># 该命令默认连接本机的 MongoDB 服务mongo</code></pre><p>退出：</p><pre><code class="hljs javascript"># 在连接状态输入 exit 退出连接exit</code></pre><p><img src="C:\Users\A\AppData\Roaming\Typora\typora-user-images\image-20200314100821112.png" srcset="/img/loading.gif" alt="image-20200314100821112"></p><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><ul><li><code>show dbs</code><ul><li>查看数据库列表(数据库中的所有数据库)</li></ul></li><li><code>db</code><ul><li>查看当前连接的数据库</li></ul></li><li><code>use 数据库名称</code><ul><li>切换到指定的数据库，（如果没有会新建）</li></ul></li><li><code>show collections</code><ul><li>查看当前目录下的所有数据表</li></ul></li><li><code>db.表名.find()</code><ul><li>查看表中的详细信息</li></ul></li></ul><h2 id="在Node中如何操作MongoDB数据库"><a href="#在Node中如何操作MongoDB数据库" class="headerlink" title="在Node中如何操作MongoDB数据库"></a>在Node中如何操作MongoDB数据库</h2><h3 id="使用官方的MongoDB包来操作"><a href="#使用官方的MongoDB包来操作" class="headerlink" title="使用官方的MongoDB包来操作"></a>使用官方的<code>MongoDB</code>包来操作</h3><blockquote><p>​    <a href="http://mongodb.github.io/node-mongodb-native/">http://mongodb.github.io/node-mongodb-native/</a></p></blockquote><h3 id="使用第三方包mongoose来操作MongoDB数据库"><a href="#使用第三方包mongoose来操作MongoDB数据库" class="headerlink" title="使用第三方包mongoose来操作MongoDB数据库"></a>使用第三方包<code>mongoose</code>来操作MongoDB数据库</h3><p>​    第三方包：<code>mongoose</code>基于MongoDB官方的<code>mongodb</code>包再一次做了封装，名字叫<code>mongoose</code>，是WordPress项目团队开发的。</p><blockquote><p>​    <a href="https://mongoosejs.com/">https://mongoosejs.com/</a></p></blockquote><p><img src="C:\Users\A\AppData\Roaming\Typora\typora-user-images\image-20200314105632745.png" srcset="/img/loading.gif" alt="image-20200314105632745"></p><p><img src="C:\Users\A\AppData\Roaming\Typora\typora-user-images\image-20200314105717993.png" srcset="/img/loading.gif" alt="image-20200314105717993"></p><h2 id="学习指南（步骤）"><a href="#学习指南（步骤）" class="headerlink" title="学习指南（步骤）"></a>学习指南（步骤）</h2><p>官方学习文档：<a href="https://mongoosejs.com/docs/index.html">https://mongoosejs.com/docs/index.html</a></p><h3 id="设计Scheme-发布Model-创建表"><a href="#设计Scheme-发布Model-创建表" class="headerlink" title="设计Scheme 发布Model (创建表)"></a>设计Scheme 发布Model (创建表)</h3><pre><code class="hljs javascript"><span class="hljs-comment">// 1.引包</span><span class="hljs-comment">// 注意：按照后才能require使用</span><span class="hljs-keyword">var</span> mongoose = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mongoose&#x27;</span>);<span class="hljs-comment">// 拿到schema图表</span><span class="hljs-keyword">var</span> Schema = mongoose.Schema;<span class="hljs-comment">// 2.连接数据库</span><span class="hljs-comment">// 指定连接数据库后不需要存在，当你插入第一条数据库后会自动创建数据库</span>mongoose.connect(<span class="hljs-string">&#x27;mongodb://localhost/test&#x27;</span>);<span class="hljs-comment">// 3.设计集合结构（表结构）</span><span class="hljs-comment">// 用户表</span><span class="hljs-keyword">var</span> userSchema = <span class="hljs-keyword">new</span> Schema(&#123;username: &#123; <span class="hljs-comment">//姓名</span>type: <span class="hljs-built_in">String</span>,<span class="hljs-built_in">require</span>: <span class="hljs-literal">true</span> <span class="hljs-comment">//添加约束，保证数据的完整性，让数据按规矩统一</span>&#125;,password: &#123;type: <span class="hljs-built_in">String</span>,<span class="hljs-built_in">require</span>: <span class="hljs-literal">true</span>&#125;,email: &#123;type: <span class="hljs-built_in">String</span>&#125;&#125;);<span class="hljs-comment">// 4.将文档结构发布为模型</span><span class="hljs-comment">// mongoose.model方法就是用来将一个架构发布为 model</span><span class="hljs-comment">// 第一个参数：传入一个大写名词单数字符串用来表示你的数据库的名称</span><span class="hljs-comment">// mongoose 会自动将大写名词的字符串生成 小写复数 的集合名称</span><span class="hljs-comment">// 例如 这里会变成users集合名称</span><span class="hljs-comment">// 第二个参数：架构</span><span class="hljs-comment">// 返回值：模型构造函数</span><span class="hljs-keyword">var</span> User = mongoose.model(<span class="hljs-string">&#x27;User&#x27;</span>, userSchema);</code></pre><h3 id="添加数据（增）"><a href="#添加数据（增）" class="headerlink" title="添加数据（增）"></a>添加数据（增）</h3><pre><code class="hljs javascript"><span class="hljs-comment">// 5.通过模型构造函数对User中的数据进行操作</span><span class="hljs-keyword">var</span> user = <span class="hljs-keyword">new</span> User(&#123;username: <span class="hljs-string">&#x27;admin&#x27;</span>,password: <span class="hljs-string">&#x27;123456&#x27;</span>,email: <span class="hljs-string">&#x27;xiaochen@qq.com&#x27;</span>&#125;);user.save(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, ret</span>) </span>&#123;<span class="hljs-keyword">if</span> (err) &#123;<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;保存失败&#x27;</span>);&#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;保存成功&#x27;</span>);<span class="hljs-built_in">console</span>.log(ret);&#125;&#125;);</code></pre><h3 id="删除（删）"><a href="#删除（删）" class="headerlink" title="删除（删）"></a>删除（删）</h3><p>根据条件删除所有：</p><pre><code class="hljs javascript">User.remove(&#123;username: <span class="hljs-string">&#x27;xiaoxiao&#x27;</span>&#125;, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, ret</span>) </span>&#123;<span class="hljs-keyword">if</span> (err) &#123;<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;删除失败&#x27;</span>);&#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;删除成功&#x27;</span>);<span class="hljs-built_in">console</span>.log(ret);&#125;&#125;);</code></pre><p>根据条件删除一个：</p><pre><code class="hljs javascript">Model.findOneAndRemove(conditions,[options],[callback]);</code></pre><p>根据id删除一个：</p><pre><code class="hljs javascript">User.findByIdAndRemove(id,[options],[callback]);</code></pre><h3 id="更新（改）"><a href="#更新（改）" class="headerlink" title="更新（改）"></a>更新（改）</h3><p>更新所有：</p><pre><code class="hljs javascript">User.remove(conditions,doc,[options],[callback]);</code></pre><p>根据指定条件更新一个：</p><pre><code class="hljs javascript">User.FindOneAndUpdate([conditions],[update],[options],[callback]);</code></pre><p>根据id更新一个：</p><pre><code class="hljs javascript"><span class="hljs-comment">// 更新根据id来修改表数据</span>User.findByIdAndUpdate(<span class="hljs-string">&#x27;5e6c5264fada77438c45dfcd&#x27;</span>, &#123;username: <span class="hljs-string">&#x27;junjun&#x27;</span>&#125;, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, ret</span>) </span>&#123;<span class="hljs-keyword">if</span> (err) &#123;<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;更新失败&#x27;</span>);&#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;更新成功&#x27;</span>);&#125;&#125;);</code></pre><h3 id="查询（查）"><a href="#查询（查）" class="headerlink" title="查询（查）"></a>查询（查）</h3><p>查询所有：</p><pre><code class="hljs javascript"><span class="hljs-comment">// 查询所有</span>User.find(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err,ret</span>)</span>&#123;<span class="hljs-keyword">if</span>(err)&#123;<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;查询失败&#x27;</span>);&#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-built_in">console</span>.log(ret);&#125;&#125;);</code></pre><p>条件查询所有：</p><pre><code class="hljs javascript"><span class="hljs-comment">// 根据条件查询</span>User.find(&#123; <span class="hljs-attr">username</span>:<span class="hljs-string">&#x27;xiaoxiao&#x27;</span> &#125;,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err,ret</span>)</span>&#123;<span class="hljs-keyword">if</span>(err)&#123;<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;查询失败&#x27;</span>);&#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-built_in">console</span>.log(ret);&#125;&#125;);</code></pre><p>条件查询单个：</p><pre><code class="hljs javascript"><span class="hljs-comment">// 按照条件查询单个，查询出来的数据是一个对象（&#123;&#125;）</span><span class="hljs-comment">// 没有条件查询使用findOne方法，查询的是表中的第一条数据</span>User.findOne(&#123;username: <span class="hljs-string">&#x27;xiaoxiao&#x27;</span>&#125;, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, ret</span>) </span>&#123;<span class="hljs-keyword">if</span> (err) &#123;<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;查询失败&#x27;</span>);&#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-built_in">console</span>.log(ret);&#125;&#125;);</code></pre><h1 id="使用Node操作MySQL数据库"><a href="#使用Node操作MySQL数据库" class="headerlink" title="使用Node操作MySQL数据库"></a>使用Node操作MySQL数据库</h1><p>文档：<a href="https://www.npmjs.com/package/mysql">https://www.npmjs.com/package/mysql</a></p><p>安装：</p><pre><code class="hljs shell">npm install --save  mysql</code></pre><pre><code class="hljs javascript"><span class="hljs-comment">// 引入mysql包</span><span class="hljs-keyword">var</span> mysql      = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mysql&#x27;</span>);<span class="hljs-comment">// 创建连接</span><span class="hljs-keyword">var</span> connection = mysql.createConnection(&#123;  host     : <span class="hljs-string">&#x27;localhost&#x27;</span>,<span class="hljs-comment">//本机</span>  user     : <span class="hljs-string">&#x27;me&#x27;</span>,<span class="hljs-comment">//账号root</span>  password : <span class="hljs-string">&#x27;secret&#x27;</span>,<span class="hljs-comment">//密码12345</span>  database : <span class="hljs-string">&#x27;my_db&#x27;</span><span class="hljs-comment">//数据库名</span>&#125;); <span class="hljs-comment">// 连接数据库（打开冰箱门）</span>connection.connect(); <span class="hljs-comment">//执行数据操作（把大象放到冰箱）</span>connection.query(<span class="hljs-string">&#x27;SELECT * FROM `users` &#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error, results, fields</span>) </span>&#123;  <span class="hljs-keyword">if</span> (error) <span class="hljs-keyword">throw</span> error;<span class="hljs-comment">//抛出异常阻止代码往下执行</span>  <span class="hljs-comment">// 没有异常打印输出结果</span>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;The solution is: &#x27;</span>,results);&#125;);<span class="hljs-comment">//关闭连接（关闭冰箱门）</span>connection.end();</code></pre><h1 id="异步编程"><a href="#异步编程" class="headerlink" title="异步编程"></a>异步编程</h1><h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><p>不成立的情况下：</p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">x,y</span>)</span>&#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);        <span class="hljs-keyword">var</span> ret = x + y;        <span class="hljs-keyword">return</span> ret;    &#125;,<span class="hljs-number">1000</span>);    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>);    <span class="hljs-comment">//到这里执行就结束了，不会i等到前面的定时器，所以直接返回了默认值 undefined</span>&#125;<span class="hljs-built_in">console</span>.log(add(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>));<span class="hljs-comment">// 结果是 1 3 undefined 4</span></code></pre><p><img src="C:\Users\A\AppData\Roaming\Typora\typora-user-images\image-20200313085008929.png" srcset="/img/loading.gif" alt="image-20200313085008929"></p><p>使用回调函数解决：</p><p>回调函数：通过一个函数，获取函数内部的操作。（根据输入得到输出结果）</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> ret;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">x,y,callback</span>)</span>&#123;    <span class="hljs-comment">// callback就是回调函数</span>    <span class="hljs-comment">// var x = 10;</span>    <span class="hljs-comment">// var y = 20;</span>    <span class="hljs-comment">// var callback = function(ret)&#123;console.log(ret);&#125;</span>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-keyword">var</span> ret = x + y;        callback(ret);    &#125;,<span class="hljs-number">1000</span>);    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>);&#125;add(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">ret</span>)</span>&#123;    <span class="hljs-built_in">console</span>.log(ret);&#125;);</code></pre><img src="C:\Users\A\AppData\Roaming\Typora\typora-user-images\image-20200313084746701.png" srcset="/img/loading.gif" alt="image-20200313084746701" style="zoom:100%;" /><p>注意：</p><p>​    凡是需要得到一个函数内部异步操作的结果（setTimeout,readFile,writeFile,ajax,readdir）</p><p>​    这种情况必须通过   回调函数 (异步API都会伴随着一个回调函数)</p><p>ajax:</p><p>基于原生XMLHttpRequest封装get方法：</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> oReq = <span class="hljs-keyword">new</span> XMLHttpRequest();<span class="hljs-comment">// 当请求加载成功要调用指定的函数</span>oReq.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;    <span class="hljs-built_in">console</span>.log(oReq.responseText);&#125;oReq.open(<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;请求路径&quot;</span>,<span class="hljs-literal">true</span>);oReq.send();</code></pre><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span>(<span class="hljs-params">url,callback</span>)</span>&#123;    <span class="hljs-keyword">var</span> oReq = <span class="hljs-keyword">new</span> XMLHttpRequest();    <span class="hljs-comment">// 当请求加载成功要调用指定的函数</span>    oReq.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-comment">//console.log(oReq.responseText);</span>        callback(oReq.responseText);    &#125;    oReq.open(<span class="hljs-string">&quot;GET&quot;</span>, url,<span class="hljs-literal">true</span>);    oReq.send();&#125;get(<span class="hljs-string">&#x27;data.json&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;    <span class="hljs-built_in">console</span>.log(data);&#125;);</code></pre><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><p>callback  hell（回调地狱）:</p><p><img src="C:\Users\A\AppData\Roaming\Typora\typora-user-images\image-20200314143410972.png" srcset="/img/loading.gif" alt="image-20200314143410972"></p><p>文件的读取无法判断执行顺序（文件的执行顺序是依据文件的大小来决定的）(异步api无法保证文件的执行顺序)</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);fs.readFile(<span class="hljs-string">&#x27;./data/a.text&#x27;</span>,<span class="hljs-string">&#x27;utf8&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err,data</span>)</span>&#123;<span class="hljs-keyword">if</span>(err)&#123;<span class="hljs-comment">// 1 读取失败直接打印输出读取失败</span><span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;读取失败&#x27;</span>);<span class="hljs-comment">// 2 抛出异常</span><span class="hljs-comment">// 阻止程序的执行</span><span class="hljs-comment">// 把错误信息打印到控制台</span><span class="hljs-keyword">throw</span> err;&#125;<span class="hljs-built_in">console</span>.log(data);&#125;);fs.readFile(<span class="hljs-string">&#x27;./data/b.text&#x27;</span>,<span class="hljs-string">&#x27;utf8&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err,data</span>)</span>&#123;<span class="hljs-keyword">if</span>(err)&#123;<span class="hljs-comment">// 1 读取失败直接打印输出读取失败</span><span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;读取失败&#x27;</span>);<span class="hljs-comment">// 2 抛出异常</span><span class="hljs-comment">// 阻止程序的执行</span><span class="hljs-comment">// 把错误信息打印到控制台</span><span class="hljs-keyword">throw</span> err;&#125;<span class="hljs-built_in">console</span>.log(data);&#125;);</code></pre><p>通过回调嵌套的方式来保证顺序：</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);fs.readFile(<span class="hljs-string">&#x27;./data/a.text&#x27;</span>,<span class="hljs-string">&#x27;utf8&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err,data</span>)</span>&#123;<span class="hljs-keyword">if</span>(err)&#123;<span class="hljs-comment">// 1 读取失败直接打印输出读取失败</span><span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;读取失败&#x27;</span>);<span class="hljs-comment">// 2 抛出异常</span><span class="hljs-comment">// 阻止程序的执行</span><span class="hljs-comment">// 把错误信息打印到控制台</span><span class="hljs-keyword">throw</span> err;&#125;<span class="hljs-built_in">console</span>.log(data);fs.readFile(<span class="hljs-string">&#x27;./data/b.text&#x27;</span>,<span class="hljs-string">&#x27;utf8&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err,data</span>)</span>&#123;<span class="hljs-keyword">if</span>(err)&#123;<span class="hljs-comment">// 1 读取失败直接打印输出读取失败</span><span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;读取失败&#x27;</span>);<span class="hljs-comment">// 2 抛出异常</span><span class="hljs-comment">// 阻止程序的执行</span><span class="hljs-comment">// 把错误信息打印到控制台</span><span class="hljs-keyword">throw</span> err;&#125;<span class="hljs-built_in">console</span>.log(data);fs.readFile(<span class="hljs-string">&#x27;./data/a.text&#x27;</span>,<span class="hljs-string">&#x27;utf8&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err,data</span>)</span>&#123;<span class="hljs-keyword">if</span>(err)&#123;<span class="hljs-comment">// 1 读取失败直接打印输出读取失败</span><span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;读取失败&#x27;</span>);<span class="hljs-comment">// 2 抛出异常</span><span class="hljs-comment">// 阻止程序的执行</span><span class="hljs-comment">// 把错误信息打印到控制台</span><span class="hljs-keyword">throw</span> err;&#125;<span class="hljs-built_in">console</span>.log(data);&#125;);&#125;);&#125;);</code></pre><p><img src="C:\Users\A\AppData\Roaming\Typora\typora-user-images\image-20200314144807008.png" srcset="/img/loading.gif" alt="image-20200314144807008">为了解决以上编码方式带来的问题（回调地狱嵌套），所以在EcmaScript6新增了一个API:<code>Promise</code>。<img src="C:\Users\A\AppData\Roaming\Typora\typora-user-images\image-20200314150050839.png" srcset="/img/loading.gif" alt="image-20200314150050839"></p><ul><li>Promise：承诺，保证</li><li>Promise本身不是异步的，但往往都是内部封装一个异步任务</li></ul><p>基本语法：</p><pre><code class="hljs javascript"><span class="hljs-comment">// 在EcmaScript 6中新增了一个API Promise</span><span class="hljs-comment">// Promise 是一个构造函数</span><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<span class="hljs-comment">// 1 创建Promise容器resolve:解决   reject：失败</span><span class="hljs-keyword">var</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>) </span>&#123;fs.readFile(<span class="hljs-string">&#x27;./a.text&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, data</span>) </span>&#123;<span class="hljs-keyword">if</span> (err) &#123;<span class="hljs-comment">// console.log(err);</span><span class="hljs-comment">// 把容器的Pending状态变为rejected</span>reject(err);&#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">// console.log(data);</span><span class="hljs-comment">// 把容器的Pending状态变为resolve</span>resolve(<span class="hljs-number">1234</span>);&#125;&#125;);&#125;);<span class="hljs-comment">// 当p1成功了，然后就（then）做指定的操作</span><span class="hljs-comment">// then方法接收的function就是容器中的resolve函数</span>p1.then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) </span>&#123;<span class="hljs-built_in">console</span>.log(data);&#125;, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>) </span>&#123;<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;读取文件失败了&#x27;</span>, err);&#125;);</code></pre><p><img src="C:\Users\A\AppData\Roaming\Typora\typora-user-images\image-20200315100611620.png" srcset="/img/loading.gif" alt="image-20200315100611620"></p><p>链式循环：<img src="C:\Users\A\AppData\Roaming\Typora\typora-user-images\image-20200315125559136.png" srcset="/img/loading.gif" alt="image-20200315125559136"></p><p>封装Promise的<code>readFile</code>：</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">pReadFile</span>(<span class="hljs-params">filePath</span>) </span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>) </span>&#123;fs.readFile(filePath, <span class="hljs-string">&#x27;utf8&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, data</span>) </span>&#123;<span class="hljs-keyword">if</span> (err) &#123;reject(err);&#125; <span class="hljs-keyword">else</span> &#123;resolve(data);&#125;&#125;);&#125;);&#125;pReadFile(<span class="hljs-string">&#x27;./a.txt&#x27;</span>).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) </span>&#123;<span class="hljs-built_in">console</span>.log(data);<span class="hljs-keyword">return</span> pReadFile(<span class="hljs-string">&#x27;./b.txt&#x27;</span>);&#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) </span>&#123;<span class="hljs-built_in">console</span>.log(data);<span class="hljs-keyword">return</span> pReadFile(<span class="hljs-string">&#x27;./a.txt&#x27;</span>);&#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) </span>&#123;<span class="hljs-built_in">console</span>.log(data);&#125;)</code></pre><p>mongoose所有的API都支持Promise：</p><pre><code class="hljs javascript"><span class="hljs-comment">// 查询所有</span>User.find().then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;        <span class="hljs-built_in">console</span>.log(data)    &#125;)</code></pre><p>注册：</p><pre><code class="hljs javascript">User.findOne(&#123;<span class="hljs-attr">username</span>:<span class="hljs-string">&#x27;admin&#x27;</span>&#125;,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">user</span>)</span>&#123;    <span class="hljs-keyword">if</span>(user)&#123;        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;用户已存在&#x27;</span>)    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-keyword">new</span> User(&#123;             username:<span class="hljs-string">&#x27;aaa&#x27;</span>,             password:<span class="hljs-string">&#x27;123&#x27;</span>,             email:<span class="hljs-string">&#x27;fffff&#x27;</span>        &#125;).save(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;注册成功&#x27;</span>);        &#125;)    &#125;&#125;)</code></pre><pre><code class="hljs javascript">User.findOne(&#123;    username:<span class="hljs-string">&#x27;admin&#x27;</span>&#125;)    .then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">user</span>)</span>&#123;        <span class="hljs-keyword">if</span>(user)&#123;            <span class="hljs-comment">// 用户已经存在不能注册</span>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;用户已存在&#x27;</span>);        &#125;        <span class="hljs-keyword">else</span>&#123;            <span class="hljs-comment">// 用户不存在可以注册</span>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> User(&#123;                username:<span class="hljs-string">&#x27;aaa&#x27;</span>,                password:<span class="hljs-string">&#x27;123&#x27;</span>,                email:<span class="hljs-string">&#x27;fffff&#x27;</span>            &#125;).save();        &#125;    &#125;)    .then(funciton(ret)&#123;<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;注册成功&#x27;</span>);    &#125;)</code></pre><h2 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h2><p>async函数</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="修改完代码自动重启"><a href="#修改完代码自动重启" class="headerlink" title="修改完代码自动重启"></a>修改完代码自动重启</h2><p>我们在这里可以使用一个第三方命名行工具：<code>nodemon</code>来帮助我们解决频繁修改代码重启服务器的问题。</p><p><code>nodemon</code>是一个基于Node.js开发的一个第三方命令行工具，我们使用的时候需要独立安装：</p><pre><code class="hljs javascript">#在任意目录执行该命令都可以#也就是说，所有需要 --global安装的包都可以在任意目录执行npm install --<span class="hljs-built_in">global</span> nodemonnpm install -g nodemon#如果安装不成功的话，可以使用cnpm安装cnpm install -g nodemon</code></pre><p>安装完毕之后使用：</p><pre><code class="hljs javascript">node app.js#使用nodemonnodemon app.js</code></pre><p>只要是通过<code>nodemon</code>启动的服务，则他会监视你的文件变化，当文件发生变化的时候，会自动帮你重启服务器。</p><h2 id="封装异步API"><a href="#封装异步API" class="headerlink" title="封装异步API"></a>封装异步API</h2><p>回调函数：获取异步操作的结果</p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">callback</span>)</span>&#123;    <span class="hljs-comment">// var callback = funtion(data)&#123; console.log(data); &#125;</span><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-keyword">var</span> data = <span class="hljs-string">&#x27;hello&#x27;</span>;        callback(data);    &#125;,<span class="hljs-number">1000</span>);&#125;<span class="hljs-comment">// 如果需要获取一个函数中异步操作的结果，则必须通过回调函数的方式来获取</span>fn(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;    <span class="hljs-built_in">console</span>.log(data);&#125;)</code></pre><h2 id="数组的遍历方法，都是对函数作为一种参数"><a href="#数组的遍历方法，都是对函数作为一种参数" class="headerlink" title="数组的遍历方法，都是对函数作为一种参数"></a>数组的遍历方法，都是对函数作为一种参数</h2><p><img src="C:\Users\A\AppData\Roaming\Typora\typora-user-images\image-20200314094620191.png" srcset="/img/loading.gif" alt="image-20200314094620191"></p><h2 id="EcmaScript-6"><a href="#EcmaScript-6" class="headerlink" title="EcmaScript 6"></a>EcmaScript 6</h2><blockquote><p>参考文档：<a href="https://es6.ruanyifeng.com/">https://es6.ruanyifeng.com/</a></p></blockquote><h1 id="项目案例"><a href="#项目案例" class="headerlink" title="项目案例"></a>项目案例</h1><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><pre><code class="hljs javascript">.app.js项目的入口文件controllersmodels存储使用mongoose设计的数据模型node_modules第三方包package.json包描述文件package-lock.json第三方包版本锁定文件（npm5之后才有）public公共静态资源routesviews存储视图目录</code></pre><h2 id="模板页"><a href="#模板页" class="headerlink" title="模板页"></a>模板页</h2><ul><li>子模板</li><li>模板继承</li></ul><h2 id="路由设计-1"><a href="#路由设计-1" class="headerlink" title="路由设计"></a>路由设计</h2><table><thead><tr><th>路由</th><th>方法</th><th>get参数</th><th>post参数</th><th>是否需要登录</th><th>备注</th></tr></thead><tbody><tr><td>/</td><td>get</td><td></td><td></td><td></td><td>渲染首页</td></tr><tr><td>/register(登录)</td><td>get</td><td></td><td></td><td></td><td>渲染注册页面</td></tr><tr><td>/register</td><td>post</td><td></td><td>email,nickname,password</td><td></td><td>处理注册请求</td></tr><tr><td>/login</td><td>get</td><td></td><td></td><td></td><td>渲染登陆界面</td></tr><tr><td>/login</td><td>post</td><td></td><td>email,password</td><td></td><td>处理登录请求</td></tr><tr><td>/loginout</td><td>get</td><td></td><td></td><td></td><td>处理退出请求</td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h2 id="模型设计"><a href="#模型设计" class="headerlink" title="模型设计"></a>模型设计</h2><h2 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h2><h2 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h2><ul><li>创建目录结构</li><li>整合静态也-模板页<ul><li>include</li><li>block</li><li>extend</li></ul></li><li>设计用户登陆，退出，注册的路由</li><li>用户注册<ul><li>先处理客户端页面的内容（表单控件的name，收集表单数据，发起请求）</li><li>服务端<ul><li>获取从客户端收到的数据</li><li>操作数据库<ul><li>如果有错，发送500告诉客户端服务器错了‘</li><li>其他的根据业务发送不同的响应数据</li></ul></li></ul></li></ul></li><li>登录</li><li>退出</li></ul><h1 id="Express中间件"><a href="#Express中间件" class="headerlink" title="Express中间件"></a>Express中间件</h1><h2 id="中间件的概念"><a href="#中间件的概念" class="headerlink" title="中间件的概念"></a>中间件的概念</h2><blockquote><p>参考文档：<a href="http://expressjs.com/en/guide/using-middleware.html">http://expressjs.com/en/guide/using-middleware.html</a></p></blockquote><p><img src="C:\Users\A\AppData\Roaming\Typora\typora-user-images\image-20200316202757617.png" srcset="/img/loading.gif" alt="image-20200316202757617"></p><p>中间件：把很复杂的事情分割成单个，然后依次有条理的执行。就是一个中间处理环节，有输入，有输出。</p><p>说的通俗易懂点儿，中间件就是一个（从请求到响应调用的方法）方法。</p><p>把数据从请求到响应分步骤来处理，每一个步骤都是一个中间处理环节。</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<span class="hljs-keyword">var</span> url = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;url&#x27;</span>);<span class="hljs-keyword">var</span> cookie = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./expressPtoject/cookie&#x27;</span>);<span class="hljs-keyword">var</span> query = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./expressPtoject/query&#x27;</span>);<span class="hljs-keyword">var</span> postBody = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./expressPtoject/post-body&#x27;</span>);<span class="hljs-keyword">var</span> server = http.createServer(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-comment">// 解析请求地址中的get参数</span><span class="hljs-comment">// var obj = url.parse(req.url,true);</span><span class="hljs-comment">// req.query = obj.query;</span>query(req,res);<span class="hljs-comment">//中间件</span><span class="hljs-comment">// 解析请求地址中的post参数</span>req.body = &#123;foo:<span class="hljs-string">&#x27;bar&#x27;</span>&#125;&#125;);<span class="hljs-keyword">if</span>(req.url === <span class="hljs-string">&#x27;xxx&#x27;</span>)&#123;<span class="hljs-comment">// 处理请求</span>...&#125;server.listen(<span class="hljs-number">3000</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;3000 runing...&#x27;</span>);&#125;);</code></pre><p>同一个请求对象所经过的中间件都是同一个请求对象和响应对象。</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<span class="hljs-keyword">var</span> app = express();app.get(<span class="hljs-string">&#x27;/abc&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res,next</span>)</span>&#123;<span class="hljs-comment">// 同一个请求的req和res是一样的，</span><span class="hljs-comment">// 可以前面存储下面调用</span><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;/abc&#x27;</span>);<span class="hljs-comment">// req.foo = &#x27;bar&#x27;;</span>req.body = &#123;name:<span class="hljs-string">&#x27;xiaoxiao&#x27;</span>,age:<span class="hljs-number">18</span>&#125;next();&#125;);app.get(<span class="hljs-string">&#x27;/abc&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res,next</span>)</span>&#123;<span class="hljs-comment">// console.log(req.foo);</span><span class="hljs-built_in">console</span>.log(req.body);<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;/abc&#x27;</span>);&#125;);app.listen(<span class="hljs-number">3000</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;app is running at port 3000.&#x27;</span>);&#125;);</code></pre><p><img src="C:\Users\A\AppData\Roaming\Typora\typora-user-images\image-20200317110520098.png" srcset="/img/loading.gif" alt="image-20200317110520098"></p><h2 id="中间件的分类"><a href="#中间件的分类" class="headerlink" title="中间件的分类:"></a>中间件的分类:</h2><h3 id="应用程序级别的中间件"><a href="#应用程序级别的中间件" class="headerlink" title="应用程序级别的中间件"></a>应用程序级别的中间件</h3><p>万能匹配（不关心任何请求路径和请求方法的中间件）：</p><pre><code class="hljs javascript">app.use(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res,next</span>)</span>&#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Time&#x27;</span>,<span class="hljs-built_in">Date</span>.now());    next();&#125;);</code></pre><p>关心请求路径和请求方法的中间件：</p><pre><code class="hljs javascript">app.use(<span class="hljs-string">&#x27;/a&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res,next</span>)</span>&#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Time&#x27;</span>,<span class="hljs-built_in">Date</span>.now());    next();&#125;);</code></pre><h3 id="路由级别的中间件"><a href="#路由级别的中间件" class="headerlink" title="路由级别的中间件"></a>路由级别的中间件</h3><p>严格匹配请求路径和请求方法的中间件</p><p>get:</p><pre><code class="hljs javascript">app.get(<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>&#123;res.send(<span class="hljs-string">&#x27;get&#x27;</span>);&#125;);</code></pre><p>post：</p><pre><code class="hljs javascript">app.post(<span class="hljs-string">&#x27;/a&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>&#123;res.send(<span class="hljs-string">&#x27;post&#x27;</span>);&#125;);</code></pre><p>put:</p><pre><code class="hljs javascript">app.put(<span class="hljs-string">&#x27;/user&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>&#123;res.send(<span class="hljs-string">&#x27;put&#x27;</span>);&#125;);</code></pre><p>delete:</p><pre><code class="hljs javascript">app.delete(<span class="hljs-string">&#x27;/delete&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>&#123;res.send(<span class="hljs-string">&#x27;delete&#x27;</span>);&#125;);</code></pre><h3 id="总"><a href="#总" class="headerlink" title="总"></a>总</h3><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<span class="hljs-keyword">var</span> app = express();<span class="hljs-comment">// 中间件：处理请求，本质就是个函数</span><span class="hljs-comment">// 在express中，对中间件有几种分类</span><span class="hljs-comment">// 1 不关心任何请求路径和请求方法的中间件</span><span class="hljs-comment">// 也就是说任何请求都会进入这个中间件</span><span class="hljs-comment">// 中间件本身是一个方法，该方法接收三个参数</span><span class="hljs-comment">// Request 请求对象</span><span class="hljs-comment">// Response 响应对象</span><span class="hljs-comment">// next 下一个中间件</span><span class="hljs-comment">// // 全局匹配中间件</span><span class="hljs-comment">// app.use(function(req, res, next) &#123;</span><span class="hljs-comment">// console.log(&#x27;1&#x27;);</span><span class="hljs-comment">// // 当一个请求进入中间件后</span><span class="hljs-comment">// // 如果需要请求另外一个方法则需要使用next（）方法</span><span class="hljs-comment">// next();</span><span class="hljs-comment">// // next是一个方法，用来调用下一个中间件</span><span class="hljs-comment">//  // 注意：next（）方法调用下一个方法的时候，也会匹配（不是调用紧挨着的哪一个）</span><span class="hljs-comment">// &#125;);</span><span class="hljs-comment">// app.use(function(req, res, next) &#123;</span><span class="hljs-comment">// console.log(&#x27;2&#x27;);</span><span class="hljs-comment">// &#125;);</span><span class="hljs-comment">// // 2 关心请求路径的中间件</span><span class="hljs-comment">// // 以/xxx开头的中间件</span><span class="hljs-comment">// app.use(&#x27;/a&#x27;,function(req, res, next) &#123;</span><span class="hljs-comment">// console.log(req.url);</span><span class="hljs-comment">// &#125;);</span><span class="hljs-comment">// 3 严格匹配请求方法和请求路径的中间件</span>app.get(<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;/&#x27;</span>);&#125;);app.post(<span class="hljs-string">&#x27;/a&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;/a&#x27;</span>);&#125;);app.listen(<span class="hljs-number">3000</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;app is running at port 3000.&#x27;</span>);&#125;);</code></pre><h2 id="错误处理中间件"><a href="#错误处理中间件" class="headerlink" title="错误处理中间件"></a>错误处理中间件</h2><pre><code class="hljs javascript">app.use(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err,req,res,next</span>)</span>&#123;    <span class="hljs-built_in">console</span>.error(err,stack);    res.status(<span class="hljs-number">500</span>).send(<span class="hljs-string">&#x27;Something broke&#x27;</span>);&#125;);</code></pre><p>配置使用404中间件：</p><pre><code class="hljs javascript">app.use(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>&#123;    res.render(<span class="hljs-string">&#x27;404.html&#x27;</span>);&#125;);</code></pre><p>配置全局错误处理中间件:</p><pre><code class="hljs javascript">app.get(<span class="hljs-string">&#x27;/a&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res, next</span>) </span>&#123;fs.readFile(<span class="hljs-string">&#x27;.a/bc&#x27;</span>, funtion() &#123;<span class="hljs-keyword">if</span> (err) &#123;        <span class="hljs-comment">// 当调用next()传参后，则直接进入到全局错误处理中间件方法中</span>        <span class="hljs-comment">// 当发生全局错误的时候，我们可以调用next传递错误对象</span>        <span class="hljs-comment">// 然后被全局错误处理中间件匹配到并进行处理</span>next(err);&#125;&#125;)&#125;);<span class="hljs-comment">//全局错误处理中间件</span>app.use(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err,req,res,next</span>)</span>&#123;    res.status(<span class="hljs-number">500</span>).json(&#123;        err_code:<span class="hljs-number">500</span>,        message:err.message    &#125;);&#125;);</code></pre><h2 id="内置中间件"><a href="#内置中间件" class="headerlink" title="内置中间件"></a>内置中间件</h2><ul><li>express.static(提供静态文件)<ul><li><a href="http://expressjs.com/en/starter/static-files.html#serving-static-files-in-express">http://expressjs.com/en/starter/static-files.html#serving-static-files-in-express</a></li></ul></li></ul><h2 id="第三方中间件"><a href="#第三方中间件" class="headerlink" title="第三方中间件"></a>第三方中间件</h2><blockquote><p>参考文档：<a href="http://expressjs.com/en/resources/middleware.html">http://expressjs.com/en/resources/middleware.html</a></p></blockquote><ul><li>body-parser</li><li>compression</li><li>cookie-parser</li><li>mogran</li><li>response-time</li><li>server-static</li><li>session</li></ul>]]></content>
    
    
    <categories>
      
      <category>Nodejs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mongoose</tag>
      
      <tag>promise</tag>
      
      <tag>es6</tag>
      
      <tag>node</tag>
      
      <tag>express</tag>
      
      <tag>body-parse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>回调地狱（callback hell） 和 promise</title>
    <link href="/2020/08/12/10.promise/"/>
    <url>/2020/08/12/10.promise/</url>
    
    <content type="html"><![CDATA[<h2 id="1-callback-hell-回调地狱"><a href="#1-callback-hell-回调地狱" class="headerlink" title="1. callback hell  回调地狱"></a>1. callback hell  回调地狱</h2><h3 id="1-1-没有顺序的读取-a-b-c-三个文件"><a href="#1-1-没有顺序的读取-a-b-c-三个文件" class="headerlink" title="1.1 没有顺序的读取 a  b  c 三个文件"></a>1.1 没有顺序的读取 a  b  c 三个文件</h3><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)fs.readFile(<span class="hljs-string">&#x27;./a.txt&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, data</span>) </span>&#123;    <span class="hljs-keyword">if</span> (err) &#123;        <span class="hljs-comment">// return console.log(&#x27;读取错误&#x27;);</span>        <span class="hljs-comment">// 抛出异常</span>        <span class="hljs-comment">// 1.阻止程序的执行  2. 把错误消息打印到控制台  </span>        <span class="hljs-keyword">throw</span> err    &#125;    <span class="hljs-built_in">console</span>.log(data);&#125;)fs.readFile(<span class="hljs-string">&#x27;./b.txt&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, data</span>) </span>&#123;    <span class="hljs-keyword">if</span> (err) &#123;        <span class="hljs-comment">// return console.log(&#x27;读取错误&#x27;);</span>        <span class="hljs-comment">// 抛出异常</span>        <span class="hljs-comment">// 1.阻止程序的执行  2. 把错误消息打印到控制台  </span>        <span class="hljs-keyword">throw</span> err    &#125;    <span class="hljs-built_in">console</span>.log(data);&#125;)fs.readFile(<span class="hljs-string">&#x27;./c.txt&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, data</span>) </span>&#123;    <span class="hljs-keyword">if</span> (err) &#123;        <span class="hljs-comment">// return console.log(&#x27;读取错误&#x27;);</span>        <span class="hljs-comment">// 抛出异常</span>        <span class="hljs-comment">// 1.阻止程序的执行  2. 把错误消息打印到控制台  </span>        <span class="hljs-keyword">throw</span> err    &#125;    <span class="hljs-built_in">console</span>.log(data);&#125;)</code></pre><pre><code class="hljs shell">PS F:\nodejs\Node_test&gt; node .\13.回调地狱.jshello aaaahello bbbbhello ccccPS F:\nodejs\Node_test&gt; node .\13.回调地狱.jshello aaaahello cccchello bbbbPS F:\nodejs\Node_test&gt; node .\13.回调地狱.jshello aaaahello cccchello bbbb</code></pre><h3 id="1-2-想要有顺序的分别-读取-a-b-c-三个文件"><a href="#1-2-想要有顺序的分别-读取-a-b-c-三个文件" class="headerlink" title="1.2 想要有顺序的分别 读取 a b c 三个文件"></a>1.2 想要有顺序的分别 读取 a b c 三个文件</h3><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)fs.readFile(<span class="hljs-string">&#x27;./a.txt&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, data</span>) </span>&#123;    <span class="hljs-keyword">if</span> (err) &#123;        <span class="hljs-comment">// return console.log(&#x27;读取错误&#x27;);</span>        <span class="hljs-comment">// 抛出异常</span>        <span class="hljs-comment">// 1.阻止程序的执行  2. 把错误消息打印到控制台  </span>        <span class="hljs-keyword">throw</span> err    &#125;    <span class="hljs-built_in">console</span>.log(data);    fs.readFile(<span class="hljs-string">&#x27;./b.txt&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, data</span>) </span>&#123;        <span class="hljs-keyword">if</span> (err) &#123;            <span class="hljs-comment">// return console.log(&#x27;读取错误&#x27;);</span>            <span class="hljs-comment">// 抛出异常</span>            <span class="hljs-comment">// 1.阻止程序的执行  2. 把错误消息打印到控制台  </span>            <span class="hljs-keyword">throw</span> err        &#125;        <span class="hljs-built_in">console</span>.log(data);        fs.readFile(<span class="hljs-string">&#x27;./c.txt&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, data</span>) </span>&#123;            <span class="hljs-keyword">if</span> (err) &#123;                <span class="hljs-comment">// return console.log(&#x27;读取错误&#x27;);</span>                <span class="hljs-comment">// 抛出异常</span>                <span class="hljs-comment">// 1.阻止程序的执行  2. 把错误消息打印到控制台  </span>                <span class="hljs-keyword">throw</span> err            &#125;            <span class="hljs-built_in">console</span>.log(data);        &#125;)    &#125;)&#125;)</code></pre><pre><code class="hljs shell">PS F:\nodejs\Node_test&gt; node .\13.回调地狱.jshello aaaahello bbbbhello ccccPS F:\nodejs\Node_test&gt; node .\13.回调地狱.jshello aaaahello bbbbhello ccccPS F:\nodejs\Node_test&gt; node .\13.回调地狱.jshello aaaahello bbbbhello cccc</code></pre><blockquote><p> 想要有顺序的读取异步操作中的文件 就需要回调函数嵌套，但这样的代码 看起来很乱且维护性低 </p></blockquote><blockquote><p>为了解决这样的问题，（回调地狱嵌套） 这时我们就需要用ES6中的API  <code>promise </code></p></blockquote><h2 id="2-promise-API"><a href="#2-promise-API" class="headerlink" title="2. promise  API"></a>2. promise  API</h2><blockquote><p>参考文档 <a href="https://es6.ruanyifeng.com/#docs/promise">promise</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>promise</tag>
      
      <tag>es6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mongodb数据库的基本使用</title>
    <link href="/2020/08/12/09.Mongodb%20%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <url>/2020/08/12/09.Mongodb%20%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h2 id="Mongodb数据库的基本概念"><a href="#Mongodb数据库的基本概念" class="headerlink" title="Mongodb数据库的基本概念"></a>Mongodb数据库的基本概念</h2><ul><li>可以有多个数据库</li><li>一个数据库中可以有多个集合（表）</li><li>一个集合中可以有多个文档（表记录）</li><li>文档结构灵活，没有任何限制</li><li>Mongodb非常灵活，不需要像  MySQL 一样先创建数据库、表、设计表结构<ul><li>这里只需要：当你需要插入数据的时候，只需要指定往哪个数据库的哪个集合操作就可以了</li><li>一切都有Mongodb 来帮你自动完成建库建表这些事儿<pre><code class="hljs JavaScript">&#123;    qq:&#123;  <span class="hljs-comment">// 集合  </span>        user:[         &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;张三&#x27;</span>&#125;,  <span class="hljs-comment">// 文档</span>        &#123;&#125;,        &#123;&#125;,        &#123;&#125;,        &#123;&#125;        ]          products:[        &#123;&#125;,        &#123;&#125;        ]    &#125;,    taobao:&#123;            &#125;,    ....&#125;</code></pre><h2 id="1-启动和关闭数据库"><a href="#1-启动和关闭数据库" class="headerlink" title="1.启动和关闭数据库"></a>1.启动和关闭数据库</h2><h3 id="1-1启动"><a href="#1-1启动" class="headerlink" title="1.1启动"></a>1.1启动</h3><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">  mongodb 默认使用执行 mongod 命令 所处盘符根目录下的 /data/db 作为自己的数据存储目录</span><span class="hljs-meta">#</span><span class="bash"> 所以在第一次执行该命令之前先自己手动创建一个 /data/db</span>mongod</code></pre></li></ul></li></ul><h3 id="如果想要修改默认的数据存储目录，可以："><a href="#如果想要修改默认的数据存储目录，可以：" class="headerlink" title="如果想要修改默认的数据存储目录，可以："></a>如果想要修改默认的数据存储目录，可以：</h3><pre><code class="hljs shell">mongod --dbpath = 数据存储目录路径</code></pre><h3 id="1-2-关闭"><a href="#1-2-关闭" class="headerlink" title="1.2 关闭"></a>1.2 关闭</h3><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 在开始服务的控制台（cmd） 直接 Ctrl+c 即可停止退出，</span><span class="hljs-meta">#</span><span class="bash"> 或者直接关闭 开启服务的控制台</span></code></pre><h2 id="2-连接和退出数据库"><a href="#2-连接和退出数据库" class="headerlink" title="2.连接和退出数据库"></a>2.连接和退出数据库</h2><h3 id="2-1-连接"><a href="#2-1-连接" class="headerlink" title="2.1 连接"></a>2.1 连接</h3><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 在 数据库 bin 的目录下 开启cmd</span><span class="hljs-meta">#</span><span class="bash"> 该命令默认连接本机的 mongodb 服务</span>mongo</code></pre><h3 id="2-2-退出"><a href="#2-2-退出" class="headerlink" title="2.2 退出"></a>2.2 退出</h3><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 在连接状态输入 <span class="hljs-built_in">exit</span> 退出连接</span>exit</code></pre><h3 id="2-3基本命令"><a href="#2-3基本命令" class="headerlink" title="2.3基本命令"></a>2.3基本命令</h3><ul><li><code>show dbs</code><ul><li>查看显示所有数据库</li></ul></li><li><code>show collections</code><ul><li>显示当前所有集合</li></ul></li><li><code>db</code><ul><li>查看当前操作的数据库</li></ul></li><li><code>use 数据库名称</code><ul><li>切换到指定的数据库（如果没有会新建）</li></ul></li><li>插入数据</li></ul><h2 id="3-在Nodejs中如何操作使用Mongodb数据"><a href="#3-在Nodejs中如何操作使用Mongodb数据" class="headerlink" title="3.在Nodejs中如何操作使用Mongodb数据"></a>3.在Nodejs中如何操作使用Mongodb数据</h2><h3 id="3-1-使用官方的-mongodb-包来操作"><a href="#3-1-使用官方的-mongodb-包来操作" class="headerlink" title="3.1 使用官方的 mongodb 包来操作"></a>3.1 使用官方的 <code>mongodb</code> 包来操作</h3><ul><li>不推荐使用， 太原生了</li><li><a href="https://www.npmjs.com/package/mongodb">npm mongodb包 下载及指导地址</a><h3 id="3-2-使用第三方包-mongoose-来操作-Mongodb-数据库"><a href="#3-2-使用第三方包-mongoose-来操作-Mongodb-数据库" class="headerlink" title="3.2 使用第三方包 mongoose 来操作  Mongodb 数据库"></a>3.2 使用第三方包 <code>mongoose</code> 来操作  Mongodb 数据库</h3><pre><code class="hljs sell">npm i mongoose</code></pre></li><li>第三方包 : <code>mongoose</code> 基于 MongoDB 官方的 <code>mongodb</code> 包再一次做了封装</li><li><a href="https://mongoosejs.com/"><code>mongoose 网址</code></a><h3 id="3-3-简单体验-hello-world"><a href="#3-3-简单体验-hello-world" class="headerlink" title="3.3 简单体验  hello world"></a>3.3 简单体验  hello world</h3><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> mongoose = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mongoose&#x27;</span>);<span class="hljs-comment">// 连接 MongoDB数据库     </span><span class="hljs-comment">//  mongodb://localhost:27017/test  以下创建的数据库数据都在 这个 test里</span>mongoose.connect(<span class="hljs-string">&#x27;mongodb://localhost:27017/test&#x27;</span>, &#123;    useNewUrlParser: <span class="hljs-literal">true</span>,    useUnifiedTopology: <span class="hljs-literal">true</span>&#125;);<span class="hljs-comment">// 创建了一个模型  就是在设计数据库</span><span class="hljs-comment">// MongoDB 是动态的，非常灵活。只需要在代码中设计你的数据库就可以了</span><span class="hljs-comment">// mongoose 这个包就可以让你的设计编写过程变得非常简单</span><span class="hljs-keyword">const</span> Cat = mongoose.model(<span class="hljs-string">&#x27;Cat&#x27;</span>, &#123;    name: <span class="hljs-built_in">String</span>&#125;);<span class="hljs-comment">// 实例化了一个 Cat</span><span class="hljs-keyword">const</span> kitty = <span class="hljs-keyword">new</span> Cat(&#123;    name: <span class="hljs-string">&#x27;Zildjian&#x27;</span>&#125;);<span class="hljs-comment">// 持久化保存了  kitty 实例</span>kitty.save().then(<span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;meow&#x27;</span>));</code></pre><h3 id="3-4-创建数据库-并创建架构"><a href="#3-4-创建数据库-并创建架构" class="headerlink" title="3.4 创建数据库 并创建架构"></a>3.4 创建数据库 并创建架构</h3><pre><code class="hljs JavaScript"> <span class="hljs-keyword">var</span> mongoose = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mongoose&#x27;</span>);<span class="hljs-comment">// 1.连接数据库</span>mongoose.connect(<span class="hljs-string">&#x27;mongodb://localhost:27017/test&#x27;</span>, &#123;    useNewUrlParser: <span class="hljs-literal">true</span>,    useUnifiedTopology: <span class="hljs-literal">true</span>&#125;);<span class="hljs-comment">//  架构</span><span class="hljs-keyword">var</span> Schema = mongoose.Schema;<span class="hljs-comment">//  2.设计文档结构/架构（表结构）</span><span class="hljs-comment">// 字段名称就是表结构中的属性名称</span><span class="hljs-comment">// 约束的目的是为了保证数据的完整性， 不要有脏数据</span><span class="hljs-keyword">var</span> userSchema = <span class="hljs-keyword">new</span> Schema(&#123;    userName: &#123;        type: <span class="hljs-built_in">String</span>,        required: <span class="hljs-literal">true</span> <span class="hljs-comment">// 这个意思是  该属性不能为空 必须有</span>    &#125;,    password: &#123;        type: <span class="hljs-built_in">String</span>,        required: <span class="hljs-literal">true</span>    &#125;,    email: &#123;        type: <span class="hljs-built_in">String</span>    &#125;&#125;);<span class="hljs-comment">// 3.将文档结构发布为 模型 model</span><span class="hljs-comment">//  mongoose.model 方法就是用来将一个 架构Schema 发布为一个 model</span><span class="hljs-comment">//  第一参数： 传入一个大写的名词单数 字符串  用来表示你的数据库名称</span><span class="hljs-comment">//              mongoose 会自动将大写名字的字符串生成 小写复数 的集合名称</span><span class="hljs-comment">//             例如 这里的 User  会生成一个 users 集合名称</span><span class="hljs-comment">// 返回值: 模型架构函数</span><span class="hljs-keyword">const</span> User = mongoose.model(<span class="hljs-string">&#x27;User&#x27;</span>, userSchema)<span class="hljs-comment">// 4. 当我们有了模型构造函数之后 ， 就可以用这个构造函数 对 users 集合中的数据进行 增删改查（CURD）</span></code></pre><h4 id="新增数据"><a href="#新增数据" class="headerlink" title="新增数据"></a>新增数据</h4><pre><code class="hljs JavaScript"> <span class="hljs-comment">//  新增数据</span><span class="hljs-keyword">let</span> admin = <span class="hljs-keyword">new</span> User(&#123;    userName: <span class="hljs-string">&#x27;admin&#x27;</span>,    password: <span class="hljs-string">&#x27;123456&#x27;</span>,    email: <span class="hljs-string">&#x27;admin@qq.com&#x27;</span>&#125;)admin.save(<span class="hljs-function">(<span class="hljs-params">err, ret</span>) =&gt;</span> &#123;    <span class="hljs-keyword">if</span> (err) &#123;        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;存储失败&#x27;</span>);    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;存储成功&#x27;</span>);        <span class="hljs-built_in">console</span>.log(ret);   <span class="hljs-comment">// ret 就是 存储的数据</span>    &#125;&#125;)<span class="hljs-comment">// 下面的就是 ret</span><span class="hljs-comment">// &#123;</span><span class="hljs-comment">//     _id: 5f32a2c76be62230a099314b,</span><span class="hljs-comment">//     userName: &#x27;admin&#x27;,</span><span class="hljs-comment">//     password: &#x27;123456&#x27;,</span><span class="hljs-comment">//     email: &#x27;admin@qq.com&#x27;,</span><span class="hljs-comment">//     __v: 0</span><span class="hljs-comment">//   &#125;</span></code></pre><h4 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h4><h5 id="查询所有数据-find"><a href="#查询所有数据-find" class="headerlink" title="查询所有数据  find"></a>查询所有数据  find</h5><pre><code class="hljs JavaScript"> User.find(<span class="hljs-function">(<span class="hljs-params">err, ret</span>) =&gt;</span> &#123;    <span class="hljs-keyword">if</span> (err) &#123;        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;查询失败&#x27;</span>);    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-built_in">console</span>.log(ret);    &#125;&#125;)</code></pre><h5 id="按条件查询所有符合的数据-find"><a href="#按条件查询所有符合的数据-find" class="headerlink" title="按条件查询所有符合的数据  find"></a>按条件查询所有符合的数据  find</h5><pre><code class="hljs JavaScript">User.find(&#123;    userName: <span class="hljs-string">&#x27;朱元璋&#x27;</span>&#125;, <span class="hljs-function">(<span class="hljs-params">err, ret</span>) =&gt;</span> &#123;    <span class="hljs-keyword">if</span> (err) &#123;        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;查询失败&#x27;</span>);    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-built_in">console</span>.log(ret);    &#125;&#125;)</code></pre><h5 id="按条件查询单个的数据-（如果有相同的返回第一个）-findOne"><a href="#按条件查询单个的数据-（如果有相同的返回第一个）-findOne" class="headerlink" title="按条件查询单个的数据 （如果有相同的返回第一个） findOne"></a>按条件查询单个的数据 （如果有相同的返回第一个） findOne</h5><pre><code class="hljs JavaScript"> User.findOne(&#123;    userName: <span class="hljs-string">&#x27;朱元璋&#x27;</span>&#125;, <span class="hljs-function">(<span class="hljs-params">err, ret</span>) =&gt;</span> &#123;    <span class="hljs-keyword">if</span> (err) &#123;        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;查询失败&#x27;</span>);    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-built_in">console</span>.log(ret);    &#125;&#125;)</code></pre><h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><pre><code class="hljs JavaScript"> <span class="hljs-comment">// 3.删除数据</span>User.remove(&#123;    userName: <span class="hljs-string">&#x27;朱元璋&#x27;</span>&#125;, <span class="hljs-function">(<span class="hljs-params">err, ret</span>) =&gt;</span> &#123;    <span class="hljs-keyword">if</span> (err) &#123;        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;删除失败&#x27;</span>);    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-built_in">console</span>.log(ret);    &#125;&#125;)</code></pre></li></ul><h4 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h4><pre><code class="hljs JavaScript"><span class="hljs-comment">// 4.更新数据</span><span class="hljs-comment">// 第一个参数  需要更新的  第二个参数 更新什么</span>User.update(&#123;    userName: <span class="hljs-string">&#x27;朱元璋&#x27;</span>&#125;, &#123;    password: <span class="hljs-string">&#x27;123456&#x27;</span>&#125;, <span class="hljs-function">(<span class="hljs-params">err, ret</span>) =&gt;</span> &#123;    <span class="hljs-keyword">if</span> (err) &#123;        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;更新失败&#x27;</span>);    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-built_in">console</span>.log(ret);    &#125;&#125;)</code></pre>]]></content>
    
    
    <categories>
      
      <category>Mongodb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Node</tag>
      
      <tag>Mongodb</tag>
      
      <tag>mongoose</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Express的使用⭐⭐⭐</title>
    <link href="/2020/08/08/07.Express%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2020/08/08/07.Express%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="07-Express-的使用"><a href="#07-Express-的使用" class="headerlink" title="07.Express 的使用"></a>07.Express 的使用</h1><h2 id="1-安装express"><a href="#1-安装express" class="headerlink" title="1.安装express"></a>1.安装express</h2><pre><code class="hljs shell">npm install express --save</code></pre><h2 id="2-简单使用express"><a href="#2-简单使用express" class="headerlink" title="2.简单使用express"></a>2.简单使用express</h2><pre><code class="hljs JavaScript"><span class="hljs-comment">//0.安装</span><span class="hljs-comment">//1. 引入包</span><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<span class="hljs-comment">// 2. 创建服务器应用程序  也就是原来的 http.createServer</span><span class="hljs-keyword">const</span> app = express();<span class="hljs-comment">// 以get的请求方式来 请求 /   </span>app.get(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;    res.send(<span class="hljs-string">&#x27;hello express!!!&#x27;</span>);&#125;)<span class="hljs-comment">// 相当于 之前的 server.linten</span>app.listen(<span class="hljs-number">3000</span>, <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Example app listening on port 3000!`</span>))</code></pre><h2 id="3-基本路由"><a href="#3-基本路由" class="headerlink" title="3.基本路由"></a>3.基本路由</h2><h3 id="get"><a href="#get" class="headerlink" title="get:"></a>get:</h3><pre><code class="hljs JavaScript">app.get(<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;    res.send(<span class="hljs-string">&#x27;Hello World!&#x27;</span>)&#125;)</code></pre><h3 id="post"><a href="#post" class="headerlink" title="post:"></a>post:</h3><pre><code class="hljs JavaScript">app.post(<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;    res.send(<span class="hljs-string">&#x27;Hello World!&#x27;</span>)&#125;)</code></pre><h2 id="4-获取静态资源"><a href="#4-获取静态资源" class="headerlink" title="4.获取静态资源"></a>4.获取静态资源</h2><pre><code class="hljs JavaScript"><span class="hljs-comment">//  直接可以获取 /public 中的资源</span>app.use(express.static(<span class="hljs-string">&#x27;public&#x27;</span>))<span class="hljs-comment">//  直接可以获取 /files 中的资源</span>app.use(express.static(<span class="hljs-string">&#x27;files&#x27;</span>))<span class="hljs-comment">//  需要通过 /public/xxx 来获取 public 文件中的资源 推荐使用这种</span>app.use(<span class="hljs-string">&#x27;/public&#x27;</span>,express.static(<span class="hljs-string">&#x27;public&#x27;</span>))<span class="hljs-comment">//  需要通过 /static/xxx 来获取 public 文件中的资源 </span>app.use(<span class="hljs-string">&#x27;/static&#x27;</span>,express.static(<span class="hljs-string">&#x27;public&#x27;</span>))</code></pre><h2 id="5-在Express-中配置-art-template-模板引擎"><a href="#5-在Express-中配置-art-template-模板引擎" class="headerlink" title="5.在Express 中配置 art-template 模板引擎"></a>5.在Express 中配置 <code>art-template</code> 模板引擎</h2><ul><li><a href="https://github.com/aui/art-template">art-template Github仓库</a></li><li><a href="https://aui.github.io/art-template/">art-template 官网文档</a></li><li>安装：<pre><code class="hljs shell">npm install --save art-templatenpm install --save express-art-template</code></pre></li><li>配置：<pre><code class="hljs JavaScript">app.engine(<span class="hljs-string">&#x27;art&#x27;</span>,<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express-art-template&#x27;</span>))<span class="hljs-comment">// 这里的html 要和 views 的文件 匹配</span>app.engine(<span class="hljs-string">&#x27;html&#x27;</span>,<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express-art-template&#x27;</span>))</code></pre></li><li>使用：<pre><code class="hljs JavaScript">app.get(<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<span class="hljs-comment">// express 默认会去项目views 目录中 查找 idenx.html</span>    res.render(<span class="hljs-string">&#x27;index.html&#x27;</span>,&#123;        title: <span class="hljs-string">&#x27;heelo world&#x27;</span>    &#125;)&#125;)</code></pre></li><li>如果希望修改默认的 views 视图渲染存储目录， 可以：<pre><code class="hljs JavaScript"><span class="hljs-comment">// 注意  第一个参数 views 不能写错</span>app.set(<span class="hljs-string">&#x27;views&#x27;</span>,目录路径)</code></pre></li></ul><h2 id="6-在Express-配置使用-express-session-插件"><a href="#6-在Express-配置使用-express-session-插件" class="headerlink" title="6.在Express 配置使用 express-session 插件"></a>6.在Express 配置使用 <code>express-session</code> 插件</h2><h4 id="在-Express-框架中，默认不支持-Session-和-Cookie"><a href="#在-Express-框架中，默认不支持-Session-和-Cookie" class="headerlink" title="在 Express 框架中，默认不支持 Session 和 Cookie"></a>在 Express 框架中，默认不支持 Session 和 Cookie</h4><h4 id="但是我们可以使用第三方中间件-：-express-session-来解决"><a href="#但是我们可以使用第三方中间件-：-express-session-来解决" class="headerlink" title="但是我们可以使用第三方中间件 ： express-session 来解决"></a>但是我们可以使用第三方中间件 ： express-session 来解决</h4><blockquote><p>参考文档：<a href="https://www.npmjs.com/package/express-session">https://www.npmjs.com/package/express-session</a><br>安装：</p></blockquote><pre><code class="hljs shell">npm install express-session</code></pre><p>配置：</p><pre><code class="hljs JavaScript"><span class="hljs-comment">// 该插件会为 req 请求对象添加一个成员：req.session 默认是一个对象</span><span class="hljs-comment">// 这是最简单的配置方式， 暂且不用关心里面的参数含义</span>app.use(session(&#123;    <span class="hljs-comment">// 配置加密字符串， 它会在原有的加密基础之上 和 这个字符串&#x27;node&#x27; 拼起来加密</span>    <span class="hljs-comment">// 目的是为了增加安全性， 防止客户端恶意伪造</span>    secret: <span class="hljs-string">&#x27;node&#x27;</span>,    resave: <span class="hljs-literal">false</span>,    saveUninitialized: <span class="hljs-literal">true</span> <span class="hljs-comment">// 默认为true  意思是无论你是否使用了 Session， 都默认的直接给你分配一把钥匙</span>&#125;))</code></pre><p>使用：</p><pre><code class="hljs JavaScript"><span class="hljs-comment">// 添加 Session 数据： </span>req.session.foo = <span class="hljs-string">&#x27;bar&#x27;</span><span class="hljs-comment">//  访问 Session 数据： </span>req.session.foo</code></pre><h5 id="提示：默认的-Session-数据是内存存储的，服务器一旦重启就会丢失，真正的生产环境会把Session进行持久化存储。"><a href="#提示：默认的-Session-数据是内存存储的，服务器一旦重启就会丢失，真正的生产环境会把Session进行持久化存储。" class="headerlink" title="提示：默认的 Session 数据是内存存储的，服务器一旦重启就会丢失，真正的生产环境会把Session进行持久化存储。"></a>提示：默认的 Session 数据是内存存储的，服务器一旦重启就会丢失，真正的生产环境会把Session进行持久化存储。</h5><h2 id="7-在Express-中获取表单GET请求参数"><a href="#7-在Express-中获取表单GET请求参数" class="headerlink" title="7.在Express 中获取表单GET请求参数"></a>7.在Express 中获取表单GET请求参数</h2><p>Express 内置了一个 API ， 可以直接通过 <code>req.query</code>来获取</p><h2 id="8-在Express-中获取表单-POST-请求体数据"><a href="#8-在Express-中获取表单-POST-请求体数据" class="headerlink" title="8.在Express 中获取表单 POST 请求体数据"></a>8.在Express 中获取表单 POST 请求体数据</h2><p>在Express 中没有内置获取表单 POST 请求体的 API， 所以我们要使用一个第三方包 ： <code>bdoy-parser</code></p><ul><li>安装<pre><code class="hljs shell">npm install --save body-parser</code></pre></li><li>配置<pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<span class="hljs-comment">// 0.引包</span><span class="hljs-keyword">var</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;body-parser&#x27;</span>)<span class="hljs-keyword">var</span> app = express()<span class="hljs-comment">// 配置 body-parser</span><span class="hljs-comment">// 只要加入下面俩行代码，则在req 请求对象上会多出来一个属性: body</span><span class="hljs-comment">// 也就是说你就可以直接通过 req.body 来获取表单 POST 请求体数据了</span><span class="hljs-comment">// create application/json parser</span>app.use(bodyParser.json())<span class="hljs-comment">// create application/x-www-form-urlencoded parser</span>app.use(bodyParser.urlencoded(&#123; <span class="hljs-attr">extended</span>: <span class="hljs-literal">false</span> &#125;))</code></pre></li><li>使用：<pre><code class="hljs JavaScript">app.use(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>&#123;    res.setHeader(<span class="hljs-string">&#x27;Content-Type&#x27;</span>,<span class="hljs-string">&#x27;text/plain&#x27;</span>)    res.write(<span class="hljs-string">&#x27;you posted: \n&#x27;</span>)    <span class="hljs-comment">// 可以通过 req.body 来获取表单 post 请求体数据</span>    res.end(<span class="hljs-built_in">JSON</span>.stringify(req.body,<span class="hljs-literal">null</span>,<span class="hljs-number">2</span>))&#125;)</code></pre><h2 id="9-Express-中间件"><a href="#9-Express-中间件" class="headerlink" title="9.Express 中间件"></a>9.Express 中间件</h2><blockquote><p>参考文档： <a href="http://expressjs.com/en/guide/using-middleware.html#using-middleware">http://expressjs.com/en/guide/using-middleware.html#using-middleware</a></p></blockquote></li></ul><p><img src="https://image.baidu.com/search/detail?ct=503316480&z=0&ipn=d&word=%E8%87%AA%E6%9D%A5%E6%B0%B4%E5%8E%82&step_word=&hs=0&pn=17&spn=0&di=3960&pi=0&rn=1&tn=baiduimagedetail&is=0,0&istype=0&ie=utf-8&oe=utf-8&in=&cl=2&lm=-1&st=undefined&cs=3663111018,2872047785&os=2674119153,3091905494&simid=4252039746,522837713&adpicid=0&lpn=0&ln=1748&fr=&fmq=1597577857986_R&fm=&ic=undefined&s=undefined&hd=undefined&latest=undefined&copyright=undefined&se=&sme=&tab=0&width=undefined&height=undefined&face=undefined&ist=&jit=&cg=&bdtype=0&oriquery=&objurl=http://thumb.1010pic.com/pic3/quiz/images/201504/222/673f4ce9.png&fromurl=ippr_z2C$qAzdH3FAzdH3Fooo_z&e3B8a8a3tw3tw5_z&e3Bv54AzdH3FvzixAzdH3Ffitpt_t1_1d1mc1lwl00majd0kujdjvducl1u1vmm&gsm=13&rpstart=0&rpnum=0&islist=&querylist=&force=undefined" srcset="/img/loading.gif" alt="中间件 类似于自来水厂的流程"></p><p>中间件的本质就是一个请求处理方法，我们把用户从请求到响应的整个过程分发到多个中间件中去处理，这样做的目的是提高代码的灵活性，动态可扩展的</p><h3 id="9-1-应用程序级别的中间件"><a href="#9-1-应用程序级别的中间件" class="headerlink" title="9.1 应用程序级别的中间件"></a>9.1 应用程序级别的中间件</h3><p>万能匹配（不关心任何请求路径和请求方法）</p><pre><code class="hljs JavaScript">app.use(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res,next</span>)</span>&#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Time&#x27;</span>,<span class="hljs-built_in">Date</span>.now())    next()&#125;)</code></pre><p>以 ‘/xxx/‘ 开头的 条件的 才能匹配</p><pre><code class="hljs JavaScript">app.use(<span class="hljs-string">&#x27;/xxx/&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res,next</span>)</span>&#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Time&#x27;</span>,<span class="hljs-built_in">Date</span>.now())    next()&#125;)</code></pre><h3 id="9-2-路由级别的中间件"><a href="#9-2-路由级别的中间件" class="headerlink" title="9.2 路由级别的中间件"></a>9.2 路由级别的中间件</h3><p>get：</p><pre><code class="hljs JavaScript">app.get(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>&#123;    res.send(<span class="hljs-string">&#x27; Got a POST request&#x27;</span>)&#125;)</code></pre><p>post:</p><pre><code class="hljs JavaScript">app.post(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>&#123;    res.send(<span class="hljs-string">&#x27;Hello world&#x27;</span>)&#125;)</code></pre><p>put :</p><pre><code class="hljs JavaScript">app.put(<span class="hljs-string">&#x27;/user&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>&#123;    res.send(<span class="hljs-string">&#x27; Got a PUT request at /user&#x27;</span>)&#125;)</code></pre><p>delete :</p><pre><code class="hljs JavaScript">app.delete(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>&#123;    res.send(<span class="hljs-string">&#x27; Got a DELETE request at /user&#x27;</span>) &#125;)</code></pre><h3 id="9-3错误处理中间件"><a href="#9-3错误处理中间件" class="headerlink" title="9.3错误处理中间件"></a>9.3错误处理中间件</h3><pre><code class="hljs JavaScript">app.use(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err,req,res,next</span>)</span>&#123;    <span class="hljs-built_in">console</span>.error(err,stack);    res.status(<span class="hljs-number">500</span>).send(<span class="hljs-string">&#x27;Something broke&#x27;</span>);&#125;);</code></pre><p>配置使用404中间件：</p><pre><code class="hljs JavaScript">app.use(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>&#123;    res.render(<span class="hljs-string">&#x27;404.html&#x27;</span>);&#125;);</code></pre><p>配置全局错误处理中间件:</p><pre><code class="hljs JavaScript">app.get(<span class="hljs-string">&#x27;/a&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res, next</span>) </span>&#123;fs.readFile(<span class="hljs-string">&#x27;.a/bc&#x27;</span>, funtion() &#123;<span class="hljs-keyword">if</span> (err) &#123;        <span class="hljs-comment">// 当调用next()传参后，则直接进入到全局错误处理中间件方法中</span>        <span class="hljs-comment">// 当发生全局错误的时候，我们可以调用next传递错误对象</span>        <span class="hljs-comment">// 然后被全局错误处理中间件匹配到并进行处理</span>next(err);&#125;&#125;)&#125;);<span class="hljs-comment">//全局错误处理中间件</span>app.use(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err,req,res,next</span>)</span>&#123;    res.status(<span class="hljs-number">500</span>).json(&#123;        err_code:<span class="hljs-number">500</span>,        message:err.message    &#125;);&#125;);</code></pre><h3 id="9-4-内置中间件"><a href="#9-4-内置中间件" class="headerlink" title="9.4 内置中间件"></a>9.4 内置中间件</h3><ul><li>express.static(提供静态文件)<ul><li><a href="http://expressjs.com/en/starter/static-files.html#serving-static-files-in-express">http://expressjs.com/en/starter/static-files.html#serving-static-files-in-express</a><h3 id="9-5-第三方中间件"><a href="#9-5-第三方中间件" class="headerlink" title="9.5 第三方中间件"></a>9.5 第三方中间件</h3><blockquote><p>参考文档：<a href="http://expressjs.com/en/resources/middleware.html">http://expressjs.com/en/resources/middleware.html</a></p></blockquote></li></ul></li><li>body-parser</li><li>compression</li><li>cookie-parser</li><li>mogran</li><li>response-time</li><li>server-static</li><li>session</li></ul>]]></content>
    
    
    <categories>
      
      <category>Nodejs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Node</tag>
      
      <tag>Express</tag>
      
      <tag>art-template</tag>
      
      <tag>express-session</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Node的模板系统</title>
    <link href="/2020/08/08/06.%E6%A8%A1%E5%9D%97%E7%B3%BB%E7%BB%9F/"/>
    <url>/2020/08/08/06.%E6%A8%A1%E5%9D%97%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="06-模块系统"><a href="#06-模块系统" class="headerlink" title="06.模块系统"></a>06.模块系统</h1><p>在node中JavaScript还有一个很重要的概念：模块系统</p><ul><li>模块作用域</li><li>使用require方法用来加载模块</li><li>使用exports 接口对象用来到处模块中的成员<h2 id="1-加载require"><a href="#1-加载require" class="headerlink" title="1.加载require"></a>1.加载<code>require</code></h2>语法：<pre><code class="hljs javaScript"><span class="hljs-keyword">const</span> 自定义变量名称 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;模块&#x27;</span>)</code></pre>俩个作用：<ul><li>执行被加载模块中的代码</li><li>得到被加载模块中的 <code>exports</code>导出接口对象<h2 id="2-导出-exports"><a href="#2-导出-exports" class="headerlink" title="2.导出 exports"></a>2.导出 <code>exports</code></h2></li></ul></li><li>node中的模块作用域，默认文件中所有成员只在当前文件模块有效</li><li>对于希望可以被其他模块访问的信息，我们就需要把这些公共的成员都挂载到 <code>exports</code> 接口对象中就可以导出多个成员（必须在对象中）</li></ul><p>导出多个成员（必须在对象中:此时exports是个对象）：</p><pre><code class="hljs javaScript"><span class="hljs-built_in">exports</span>.a=<span class="hljs-number">123</span><span class="hljs-built_in">exports</span>.b=<span class="hljs-string">&#x27;hello&#x27;</span><span class="hljs-built_in">exports</span>.c=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;ccc&#x27;</span>)&#125;</code></pre><p>导出单个成员（就是拿到：函数，字符串等）</p><pre><code class="hljs JavaScript"><span class="hljs-built_in">module</span>.exports = <span class="hljs-string">&#x27;hello&#x27;</span></code></pre><p>以下情况会覆盖：最下边会覆盖上边的</p><pre><code class="hljs JavaScript"><span class="hljs-built_in">module</span>.exports = <span class="hljs-string">&#x27;hello&#x27;</span><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;ccc&#x27;</span>)&#125;</code></pre><p>也可以导出多个成员：就是把它变为对象了</p><pre><code class="hljs JavaScript"><span class="hljs-built_in">module</span>.exports = &#123;    add:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;            &#125;    str : <span class="hljs-string">&#x27;heelo&#x27;</span>&#125;</code></pre><h2 id="3-导出-module-exports-原理解析"><a href="#3-导出-module-exports-原理解析" class="headerlink" title="3.导出 module.exports 原理解析"></a>3.导出 <code>module.exports</code> 原理解析</h2><p><code>exports</code> 和 <code>module.exports</code> 的一个引用<br>内部隐藏代码实际是这样子的：</p><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> <span class="hljs-built_in">module</span> = &#123;    <span class="hljs-built_in">exports</span>  = &#123;            &#125;&#125;<span class="hljs-keyword">let</span> <span class="hljs-built_in">exports</span> = <span class="hljs-built_in">module</span>.exports<span class="hljs-comment">// console.log(exports === module.exports)  // true</span><span class="hljs-keyword">return</span> <span class="hljs-built_in">module</span>.exports</code></pre><h2 id="4-exports-和-module-exports-的-区别"><a href="#4-exports-和-module-exports-的-区别" class="headerlink" title="4.exports 和 module.exports 的 区别"></a>4.exports 和 module.exports 的 区别</h2><ul><li><p>每个模块中都有一个<code>module</code>对象</p></li><li><p><code>module</code>对象中都有一个<code>exports</code>对象</p></li><li><p>我们可以把需要导出的成员都挂载到<code>module.exports</code>接口对象中</p></li><li><p>也就是， <code>module.exports.xxx= xxx</code> 的方式</p></li><li><p>但是每次都 <code>module.exports.xxx = xxx</code> 很麻烦</p></li><li><p>所以 node 为了使用方便， 同时在每一个模块中都提供了一个成员叫 <code>exports</code></p></li><li><p><code>exports = module.exports</code>   结果为 true 就证明了此点</p></li><li><p>所以对于： <code>module.exports.xxx= xxx</code> 的方式完全可以 <code>exports.xxx= xxx</code></p></li><li><p>当每一个模块需要导出单个成员的时候，这个时候必须使用： <code>module.exports= xxx</code> 的方式， </p></li><li><p>不要使用 <code>exports = xxx</code> 不管用</p></li><li><p>因为每个模块最终向外 <code>return</code> 的是 <code>module.exports</code> </p></li><li><p>而<code>exports</code> 只是 <code>module.exports</code> 的一个引用</p></li><li><p>所以即便你为 <code>exports =xxx</code> 重新赋值，也不会影响到<code>module.exports</code> </p></li><li><p>但是有一种赋值比较特殊 : <code>exports = module.exports</code>这个可以重新建立引用关系</p></li><li><h2 id="5-模块查找机制"><a href="#5-模块查找机制" class="headerlink" title="5.模块查找机制"></a>5.模块查找机制</h2></li><li><p>自己的定义的模块 （路径形式的模块）</p><ul><li>自定义模块形式的书写：</li><li>./  代表 当前目录，不可省略</li><li>../ 代表 上一级目录， 不可省略</li><li>/xxx  和 d:/a/foo.js  这种形式的 不用</li><li>首位的 / 在这里表示的是当前文件模块所属磁盘根路径</li><li>.js 后缀名可以省略</li><li>require(‘./foo.js’)</li></ul></li><li><p>优先从缓存加载</p></li><li><p>核心模块</p><ul><li>核心模块已经被编译到了二进制二文件中，我们只需要按照名字来加载模块就可以了</li><li>require(‘fs’)</li><li>require(‘http’)</li></ul></li><li><p>第三方模块</p><ul><li>查找步骤：以为 第三方<code> express</code> 模块为例</li><li>node_modules/express/</li><li>node_modules/express/package.json</li><li>node_modules/express/package.json/文件中找main属性</li><li>如果找不到main属性 就 默认 index.js 为备选项</li><li>以上找不到 就 进入上一级目录 node_modules 再次查找</li><li>按照这个规则依次往上找，类似于 <code>js中的原型链</code>， 直到磁盘根目录还找不到，就会报错 :cannot find module xxxx</li></ul></li></ul><h2 id="6-npm"><a href="#6-npm" class="headerlink" title="6.npm"></a>6.npm</h2><ul><li>node package manager   意思就是 node 包管理者，帮助我们去安装一些第三方包的<h3 id="6-1npm-网站"><a href="#6-1npm-网站" class="headerlink" title="6.1npm 网站"></a>6.1npm 网站</h3></li><li>[npmjs.com]   用来搜索第三方包， 所有的第三方包都在这里<h3 id="6-2-npm命令行工具"><a href="#6-2-npm命令行工具" class="headerlink" title="6.2 npm命令行工具"></a>6.2 npm命令行工具</h3></li><li>npm 的第二次含义就是一个命令行工具，只要你安装了 node 就已经安装了npm</li><li>npm也有版本这个概念  可以通过在命令行中输入 查看版本号<pre><code class="hljs shell">npm --version   //查看版本号npm install --global npm   // 升级npm</code></pre><h3 id="6-3解决npm被墙的问题"><a href="#6-3解决npm被墙的问题" class="headerlink" title="6.3解决npm被墙的问题"></a>6.3解决npm被墙的问题</h3>npm存储包文件的服务器在国外，有时候会被强，速度会很慢。</li><li>[<a href="http://npm.taobao.org/]">http://npm.taobao.org/]</a> 淘宝的开发团队把npm在国内做了一个备份</li><li>安装淘宝的npm<pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 在任意目录执行都可以</span><span class="hljs-meta">#</span><span class="bash"> -- global 表示安装到全局， 而非当前目录  注意不能省略 --global</span>npm install --global cnpm</code></pre>接下来你安装包的时候把之前的<code>npm</code>替换成<code>cnpm</code>就行了<pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 这里 还是走国外的服务器，速度慢</span>npm install jquert<span class="hljs-meta">#</span><span class="bash"> 使用cnpm 就会通过淘宝的服务器来下载jquery</span>cnpm install jquert</code></pre>如果不想安装 <code>cnpm</code> 又想使用淘宝的服务器下载：<pre><code class="hljs shell">npm install jquery --registry=https://registry.npm.taobao.org</code></pre>但是每一次手都这样会很麻烦，所有可以把这个选项加入配置文件中<pre><code class="hljs shell">npm config set registry https://registry.npm.taobao.org<span class="hljs-meta">#</span><span class="bash"> 查看npm配置信息</span>npm config list</code></pre>只要经过上面的命令配置，则以后你所有的 <code>npm install</code> 都会默认通过淘宝的服务器来下载</li></ul><h2 id="7-package-json"><a href="#7-package-json" class="headerlink" title="7.package.json"></a>7.package.json</h2><ul><li>我们建议每一个项目都需要有一个 <code>package.json</code>文件（包描述文件，就像产品的说明书一样）</li><li>这个文件可以通过<code>npm init</code> 的方式来自动化出来， 但现在的版本都可以自动生成了。</li><li>对于我们新手来说，最有用的是 <code>dependencies</code> 选项，可以用来帮我们保存第三方包的依赖信息</li><li>如果你的 <code>node_module</code> 删除了也不用担心，我们只需要： <code>npm install</code> 就会自动把 <code>package.json</code> 中的 <code>dependencies</code>中所有依赖项都会下载回来</li><li>要求每个项目的根目录下都有一个 <code>package,json</code>文件</li><li>建议执行 <code>npm install 包名</code> 时候 都加上<code>--save</code>（新版本也就不用啦） 来保存依赖项信息 </li></ul><h3 id="7-1-package-lock-json-和-package-json"><a href="#7-1-package-lock-json-和-package-json" class="headerlink" title="7.1 package-lock.json 和 package.json"></a>7.1 package-lock.json 和 package.json</h3><p>npm 5 版本 以前是不会有 <code>package-lock.json </code>这个文件</p><p>npm 5 版本之后才加入这个文件<br>当你安装包的时候，npm都会生成或者更新 <code>package-lock.json </code>这个文件</p><ul><li>npm 5版本以后的 安装包不需要加 <code>--save</code>参数就会自动保存依赖信息</li><li>当你安装包的时候，会自动创建或者是更新 <code>package-lock.json </code>这个文件</li><li><code>package-lock.json </code>这个文件会保存 <code>node_modules</code>中所有包的信息（版本，下载地址等）<ul><li>这样的话，重新 <code>npm install</code> 的时候 速度会提升</li></ul></li><li>从文件名来看 <code>lock</code> 称 为 锁<ul><li>这个 <code>lock</code>用来锁定版本的</li><li>如果项目 依赖这个包 <code>1.1.1</code>这个版本， 重新 <code>npm install</code>时候就会下载最新版本 ，而不是 1.1.1 版本</li><li>所以我们希望 锁 住 这个 版本</li><li>所以<code>package-lock.json </code>这个文件的其中作用就是 锁定版本号，防止自动升级版本<h2 id="8-文件操作路径和模块路径"><a href="#8-文件操作路径和模块路径" class="headerlink" title="8.文件操作路径和模块路径"></a>8.文件操作路径和模块路径</h2></li></ul></li><li>文件操作路径</li><li><pre><code class="hljs JavaScript"><span class="hljs-comment">// 在文件操作的相对路径中</span><span class="hljs-comment">// ./data/a.txt  相当于当前目录</span><span class="hljs-comment">// data/a.txt  相当于当前目录</span><span class="hljs-comment">// 以下俩种几乎不用 （不要用）</span><span class="hljs-comment">//  /data/a.txt   绝对路径，当前文件模块所处磁盘根目录</span><span class="hljs-comment">//  c;/xx/xx  绝对路径</span>fs.readFile(<span class="hljs-string">&#x27;./data/a.txt&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err</span>)=&gt;</span>&#123;data&#125;)&#123;    &#125;</code></pre></li></ul><ul><li>模块操作路径<pre><code class="hljs JavaScript"><span class="hljs-comment">// 如果这里忽略了 .   则也是磁盘根目录</span><span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;/data/foo.js&#x27;</span>)<span class="hljs-comment">// 相当路径  在模块路径中 一定不能省略 ./  </span><span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./data/foo.js&#x27;</span>)</code></pre><h2 id="9-nodemon-修改代码自动重启服务器"><a href="#9-nodemon-修改代码自动重启服务器" class="headerlink" title="9.nodemon 修改代码自动重启服务器"></a>9.nodemon 修改代码自动重启服务器</h2></li><li>我们这里可以使用一个nodemon 第三方命令行工具 来解决我们频繁修改代码重启服务器的问题</li><li><code>nodemon</code> 是一个基于Node.js开发的一个第三方命令行工具，需要独立安装<pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">在任意目录中执行该命令都行</span>npm  install --global nodemon</code></pre></li><li>安装完毕后，使用:<pre><code class="hljs shell"><span class="hljs-meta"> #</span><span class="bash"> 使用nodemon</span>nodemon app.js</code></pre><h2 id="10-path-路径操作模块"><a href="#10-path-路径操作模块" class="headerlink" title="10.path 路径操作模块"></a>10.path 路径操作模块</h2></li><li>path.basename <ul><li>获取一个路径的文件名  （默认包含扩展名）<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> path.basename(<span class="hljs-string">&#x27;c:/a/b/c/index.js&#x27;</span>)</span>&#x27;index.js&#x27;<span class="hljs-meta">&gt;</span><span class="bash"> path.basename(<span class="hljs-string">&#x27;c:/a/b/c/index.js&#x27;</span>,<span class="hljs-string">&#x27;.js&#x27;</span>)</span>&#x27;index&#x27;</code></pre></li></ul></li><li>path.dirname<ul><li>获取一个路径中的目录部分<pre><code class="hljs shell"><span class="hljs-meta"> &gt;</span><span class="bash"> path.dirname(<span class="hljs-string">&#x27;c:/a/b/c/index.js&#x27;</span>)</span>&#x27;c:/a/b/c&#x27;</code></pre></li></ul></li><li>path.extname<ul><li>获取一个路径中的扩展名部分<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> path.extname(<span class="hljs-string">&#x27;c:/a/b/c/index.js&#x27;</span>)</span>&#x27;.js&#x27;</code></pre></li></ul></li><li>path.pars<ul><li>把一个路径转为对象<ul><li>root 根路径</li><li>dir 目录</li><li>base  包含后缀名的文件名</li><li>ext 后缀名</li><li>name 不包含后缀名的文件名<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> path.parse(<span class="hljs-string">&#x27;c:/a/b/c/index.js&#x27;</span>)</span>&#123;  root: &#x27;c:/&#x27;,  dir: &#x27;c:/a/b/c&#x27;,  base: &#x27;index.js&#x27;,  ext: &#x27;.js&#x27;,  name: &#x27;index&#x27;&#125;</code></pre></li></ul></li></ul></li><li>path.join<ul><li>当你需要进行路径拼接的时候， 推荐使用<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> path.join(<span class="hljs-string">&#x27;c:/a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>)</span>&#x27;c:\\a\\b&#x27;</code></pre></li></ul></li><li>path.isAbsolute<ul><li>判断一个路径是否为绝对路径<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> path.isAbsolute(<span class="hljs-string">&#x27;c:/a/b/c/index.js&#x27;</span>)</span>true<span class="hljs-meta">&gt;</span><span class="bash"> path.isAbsolute(<span class="hljs-string">&#x27;/a/b/c/index.js&#x27;</span>)</span>true<span class="hljs-meta">&gt;</span><span class="bash"> path.isAbsolute(<span class="hljs-string">&#x27;./a/b/c/index.js&#x27;</span>)</span>false</code></pre><h2 id="11-Node中的其他成员-（-dirname-和-filename）"><a href="#11-Node中的其他成员-（-dirname-和-filename）" class="headerlink" title="11.Node中的其他成员 （__dirname 和 __filename）"></a>11.Node中的其他成员 （__dirname 和 __filename）</h2>在每个模块中， 除了 <code>require</code> 和 <code>exports</code> 等模块相关AIP之外，还有俩个特殊成员：</li></ul></li><li><code>__dirname</code> <strong>动态获取</strong> 可以用来获取当前文件的所属目录的绝对路径 （这个没有加文件 只是文件的绝对目录）</li><li><code>__filename</code> <strong>动态获取</strong> 可以用来获取当前文件的绝对路径 （这个加上了文件）</li><li><code>__dirname</code> 和<code>__filename</code>是不受执行node命令所属路径影响的</li></ul><p>在文件操作中，使用相对路径是不可靠的，因为<strong>在Node 中 文件操作 的路径被设计为相对于执行node命令所处的路径</strong>（不是bug，人家这样设计是有使用场景）<br>所以为了解决这个问题，只需要把 <strong>相对路径变为绝对路径</strong> 就可以了<br>所以我们可以使用<code>__dirname</code>和<code>__filename</code>来帮我们解决这个问题</p><p>在拼接路径过程中，为了 避免手动凭借带来的一些低级错误， 我们推荐使用： <code>path.join()</code> 来辅助拼接。</p><p>所以为了尽量避免刚才所描述的问题，以后必须在文件操作中使用相对路径都统一转换为 <strong>动态的绝对路径</strong></p><blockquote><p>注意： 模块中的路径标识 和 文件操作 中的 相对路径标识 不一致</p></blockquote><blockquote><p>模块中的路径表示就是相当于当前文件模块，不受执行node 命令所处路径影响</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Nodejs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Node</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Node来简单结合fs模块来访问不同资源实例</title>
    <link href="/2020/08/06/03.%E7%AE%80%E5%8D%95%E7%BB%93%E5%90%88fs%E6%A8%A1%E5%9D%97%E6%9D%A5%E8%AE%BF%E9%97%AE%E4%B8%8D%E5%90%8C%E8%B5%84%E6%BA%90%E5%AE%9E%E4%BE%8B/"/>
    <url>/2020/08/06/03.%E7%AE%80%E5%8D%95%E7%BB%93%E5%90%88fs%E6%A8%A1%E5%9D%97%E6%9D%A5%E8%AE%BF%E9%97%AE%E4%B8%8D%E5%90%8C%E8%B5%84%E6%BA%90%E5%AE%9E%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="简单结合fs模块来访问不同资源实例"><a href="#简单结合fs模块来访问不同资源实例" class="headerlink" title="简单结合fs模块来访问不同资源实例"></a>简单结合fs模块来访问不同资源实例</h1><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<span class="hljs-keyword">const</span> server = http.createServer();server.on(<span class="hljs-string">&#x27;request&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;    <span class="hljs-keyword">const</span> url = req.url;    <span class="hljs-keyword">if</span> (url === <span class="hljs-string">&#x27;/&#x27;</span>) &#123;        fs.readFile(<span class="hljs-string">&#x27;./resource/index.html&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">error, data</span>) =&gt;</span> &#123;            <span class="hljs-keyword">if</span> (error) &#123;                res.setHeader(<span class="hljs-string">&#x27;Content-Type&#x27;</span>, <span class="hljs-string">&#x27;text/plain,charset=utf-8&#x27;</span>);                res.end(<span class="hljs-string">&#x27;文件读取失败，请稍后再试&#x27;</span>);            &#125; <span class="hljs-keyword">else</span> &#123;                <span class="hljs-comment">// data 默认是 二进制数据， 可以通过   toString 转换为咱们能识别的字符串</span>                <span class="hljs-comment">// res.end()  支持俩种数据格式    一种是 二进制，  一种是 字符串</span>                res.setHeader(<span class="hljs-string">&#x27;Content-Type&#x27;</span>, <span class="hljs-string">&#x27;text/html,charset=utf-8&#x27;</span>);                res.end(data);            &#125;;        &#125;);    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (url === <span class="hljs-string">&#x27;/images&#x27;</span>) &#123;        fs.readFile(<span class="hljs-string">&#x27;./resource/images/3.jpg&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">error, data</span>) =&gt;</span> &#123;            <span class="hljs-keyword">if</span> (error) &#123;                res.setHeader(<span class="hljs-string">&#x27;Content-Type&#x27;</span>, <span class="hljs-string">&#x27;text/plain,charset=utf-8&#x27;</span>);                res.end(<span class="hljs-string">&#x27;图片读取失败，请稍后再试&#x27;</span>);            &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-comment">// 注意：尽量图片尽量不要跟编码格式，它有自己独有的编码格式</span>                res.setHeader(<span class="hljs-string">&#x27;Content-Type&#x27;</span>, <span class="hljs-string">&#x27;image/jpeg&#x27;</span>);                res.end(data);            &#125;;        &#125;);    &#125;&#125;);server.listen(<span class="hljs-number">3000</span>, <span class="hljs-function">() =&gt;</span> &#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;服务器启动成功，可以通过 http://127.0.0.1:3000/ 来访问&#x27;</span>);&#125;)</code></pre><h5 id="简化了以上的代码"><a href="#简化了以上的代码" class="headerlink" title="简化了以上的代码"></a>简化了以上的代码</h5><blockquote><p>运用了逆向思维，这样可以不用一一对应的把每个文件读出来</p></blockquote><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<span class="hljs-keyword">const</span> server = http.createServer();server.on(<span class="hljs-string">&#x27;request&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;    <span class="hljs-keyword">let</span> url = req.url;    <span class="hljs-keyword">let</span> wwwDir = <span class="hljs-string">&#x27;F:/nodejs/Node_test/resource&#x27;</span>;    <span class="hljs-keyword">let</span> filePath = <span class="hljs-string">&#x27;/index.html&#x27;</span>;    <span class="hljs-comment">//  默认的 是 /   所以 客户端中出现的就是 /index.html 这个文件内容</span>    <span class="hljs-keyword">if</span> (url !== <span class="hljs-string">&#x27;/&#x27;</span>) &#123;        filePath = url;    &#125;;    fs.readFile(wwwDir + filePath, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;        <span class="hljs-keyword">if</span> (err) &#123;            <span class="hljs-keyword">return</span> res.end(<span class="hljs-string">&#x27;404 Not Found.&#x27;</span>);        &#125;        res.end(data);    &#125;);&#125;);server.listen(<span class="hljs-number">3000</span>, <span class="hljs-function">() =&gt;</span> &#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;服务器启动成功，可以通过 http://127.0.0.1:3000/ 来访问&#x27;</span>);&#125;);</code></pre>]]></content>
    
    
    <categories>
      
      <category>Nodejs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Node</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Node来模仿Apache功能来完成目录列表渲染</title>
    <link href="/2020/08/05/04.%E6%A8%A1%E4%BB%BFApache%E5%8A%9F%E8%83%BD%E6%9D%A5%E5%AE%8C%E6%88%90%E7%9B%AE%E5%BD%95%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93/"/>
    <url>/2020/08/05/04.%E6%A8%A1%E4%BB%BFApache%E5%8A%9F%E8%83%BD%E6%9D%A5%E5%AE%8C%E6%88%90%E7%9B%AE%E5%BD%95%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93/</url>
    
    <content type="html"><![CDATA[<h1 id="模仿Apache功能来完成目录列表渲染"><a href="#模仿Apache功能来完成目录列表渲染" class="headerlink" title="模仿Apache功能来完成目录列表渲染"></a>模仿Apache功能来完成目录列表渲染</h1><hr><h4 id="fs-readdir-这个API用来读取文件目录"><a href="#fs-readdir-这个API用来读取文件目录" class="headerlink" title="fs.readdir   这个API用来读取文件目录"></a>fs.readdir   这个API用来读取文件目录</h4><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);fs.readdir(<span class="hljs-string">&#x27;F:/nodejs/Node_test&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, files</span>) =&gt;</span> &#123;    <span class="hljs-keyword">if</span> (err) &#123;        <span class="hljs-keyword">return</span> res.end(<span class="hljs-string">&#x27;文件目录不存在.&#x27;</span>)    &#125;    <span class="hljs-built_in">console</span>.log(files);&#125;);</code></pre><h4 id="返回的值是-一个数组"><a href="#返回的值是-一个数组" class="headerlink" title="返回的值是 一个数组"></a>返回的值是 一个数组</h4><ul><li>[<br>‘02.module-a.js’,<br>‘02.module-b.js’,<br>‘03.module-exports.js’,<br>‘03.require.js’,<br>‘04.写文件.js’,<br>‘04.读取文件.js’,<br>‘05.简单的http请求.js’,<br>‘06.响应类型内容Content-Type.js’,<br>‘07.简单结合fs模块来访问不同资源.js’,<br>‘08.简化07代码，模仿Apache功能.js’,<br>‘09.Apache目录列表.js’,<br>‘09.读取目录（fs.readdir  API）.js’,<br>‘1.heeloword.js’,<br>‘data.txt’,<br>‘nodejs资料（7天）’,<br>‘resource’,<br>‘你好.txt’<br>]</li></ul><hr><h2 id="简单的来实现了-目录列表"><a href="#简单的来实现了-目录列表" class="headerlink" title="简单的来实现了 目录列表"></a>简单的来实现了 目录列表</h2><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>)<span class="hljs-keyword">const</span> server = http.createServer()<span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)server.on(<span class="hljs-string">&#x27;request&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;    <span class="hljs-keyword">let</span> url = req.url    <span class="hljs-keyword">let</span> wwwDir = <span class="hljs-string">&#x27;F:/nodejs/Node_test/resource&#x27;</span>    fs.readFile(<span class="hljs-string">&#x27;./resource/index.html&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;    <span class="hljs-comment">// data 是 index.html 的二进制数据</span>        <span class="hljs-keyword">if</span> (err) &#123;            <span class="hljs-keyword">return</span> res.end(<span class="hljs-string">&#x27;404 Not Foun.&#x27;</span>)        &#125;        <span class="hljs-comment">// 1. 如何得到 wwwDir 目录列表中的文件名和目录名</span>        <span class="hljs-comment">//    fs.readdir  这个API可以读取目录列表中的文件名和目录名</span>        <span class="hljs-comment">// 2. 如何将得到的文件名和目录名替换到 template.html 中</span>        <span class="hljs-comment">//    2.1 在 template.html 中需要替换的位置预留一个特殊的标记（就像以前使用模板引擎的标记一样）</span>        <span class="hljs-comment">//    2.2 根据 files 生成需要的 HTML 内容</span>        <span class="hljs-comment">// 只要你做了这两件事儿，那这个问题就解决了</span>        fs.readdir(wwwDir, <span class="hljs-function">(<span class="hljs-params">err, files</span>) =&gt;</span> &#123;            <span class="hljs-keyword">if</span> (err) &#123;                <span class="hljs-keyword">return</span> res.end(<span class="hljs-string">&#x27;文件不存在.&#x27;</span>)            &#125;            <span class="hljs-comment">// 2.1 生成需要替换的内容</span>            <span class="hljs-keyword">let</span> content = <span class="hljs-string">&#x27;&#x27;</span>;            files.forEach(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;                <span class="hljs-comment">// 在 EcmaScript 6 的 ` 字符串中，可以使用 $&#123;&#125; 来引用变量</span>                content += <span class="hljs-string">` &lt;tr&gt;</span><span class="hljs-string">                &lt;td data-value=&quot;nodejs资料（7天）/&quot;&gt;&lt;a class=&quot;icon dir&quot;</span><span class="hljs-string">                        href=&quot;/F:/nodejs/Node_test/nodejs%E8%B5%84%E6%96%99%EF%BC%887%E5%A4%A9%EF%BC%89/&quot;&gt;<span class="hljs-subst">$&#123;item&#125;</span>&lt;/a&gt;</span><span class="hljs-string">                &lt;/td&gt;</span><span class="hljs-string">                &lt;td class=&quot;detailsColumn&quot; data-value=&quot;0&quot;&gt;&lt;/td&gt;</span><span class="hljs-string">                &lt;td class=&quot;detailsColumn&quot; data-value=&quot;1596634470&quot;&gt;2020/8/5 下午9:34:30&lt;/td&gt;</span><span class="hljs-string">            &lt;/tr&gt;`</span>            &#125;);            <span class="hljs-comment">// 2.3 替换</span>            <span class="hljs-comment">// data 是 index.html 的二进制数据，要想渲染到页面先转换为字符串格式</span>            data = data.toString();                        <span class="hljs-comment">// 将 index.html 中的内容的 *** 替换成 我们想要的目录列表内容</span>            data = data.replace(<span class="hljs-string">&#x27;***&#x27;</span>, content);            <span class="hljs-comment">// 3. 发送解析替换过后的响应数据</span>            res.end(data);        &#125;)    &#125;)&#125;);server.listen(<span class="hljs-number">3000</span>, <span class="hljs-function">() =&gt;</span> &#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;服务器启动成功，可以通过 http://127.0.0.1:3000/ 来访问&#x27;</span>);&#125;)</code></pre>]]></content>
    
    
    <categories>
      
      <category>Nodejs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Node</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Node来留言板功能的简单实现</title>
    <link href="/2020/08/05/05.%E7%95%99%E8%A8%80%E6%9D%BF%E5%8A%9F%E8%83%BD%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/"/>
    <url>/2020/08/05/05.%E7%95%99%E8%A8%80%E6%9D%BF%E5%8A%9F%E8%83%BD%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="留言板功能的简单实现"><a href="#留言板功能的简单实现" class="headerlink" title="留言板功能的简单实现"></a>留言板功能的简单实现</h1><ul><li>先来说一下url模块</li><li><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> url = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;url&#x27;</span>)<span class="hljs-keyword">let</span> obj = url.parse(<span class="hljs-string">&#x27;http://localhost:3000/pinglun?name=%E7%8E%8B%E9%B9%8F%E9%A3%9E&amp;message=%E7%8E%8B%E9%B9%8F%E9%A3%9E%E7%8E%8B%E9%B9%8F%E9%A3%9E%E7%8E%8B%E9%B9%8F%E9%A3%9E&#x27;</span>, <span class="hljs-literal">true</span>)  <span class="hljs-comment">//加个true， 可以把 query对象 解析为 对象  这样就可以拿到提交表单的 名字 和 评论 了</span><span class="hljs-built_in">console</span>.log(obj);  <span class="hljs-comment">// 返回的是 url模块中 的相关信息</span><span class="hljs-built_in">console</span>.log(obj.query); <span class="hljs-comment">// 返回的是 url路径 ? 之后的信息</span><span class="hljs-built_in">console</span>.log(obj.query.name); </code></pre></li></ul><h2 id="留言板-服务器端代码实现"><a href="#留言板-服务器端代码实现" class="headerlink" title="留言板 服务器端代码实现"></a>留言板 服务器端代码实现</h2><h4 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h4><pre><code class="hljs JavaScript"><span class="hljs-comment">// 1. / index.html</span><span class="hljs-comment">// 2. 开放 public 目录中的静态资源</span><span class="hljs-comment">//    当请求 /public/xxx 的时候，读取响应 public 目录中的具体资源</span><span class="hljs-comment">// 3. /post post.html</span><span class="hljs-comment">// 4. /pinglun</span><span class="hljs-comment">//    4.1 接收表单提交数据</span><span class="hljs-comment">//    4.2 存储表单提交的数据</span><span class="hljs-comment">//    4.3 让表单重定向到 /</span><span class="hljs-comment">//        statusCode</span><span class="hljs-comment">//        setHeader</span></code></pre><pre><code class="hljs JavaScript"><span class="hljs-comment">// 把当前模块所有的依赖项都声明再文件模块最上面</span><span class="hljs-keyword">var</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>)<span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<span class="hljs-keyword">var</span> url = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;url&#x27;</span>)   <span class="hljs-comment">// 利用url 模块 中的方法 来 解析 req.url </span><span class="hljs-keyword">var</span> template = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;art-template&#x27;</span>)<span class="hljs-keyword">var</span> comments = [  &#123;    name: <span class="hljs-string">&#x27;张三&#x27;</span>,    message: <span class="hljs-string">&#x27;今天天气不错！&#x27;</span>,    dateTime: <span class="hljs-string">&#x27;2015-10-16&#x27;</span>  &#125;,  &#123;    name: <span class="hljs-string">&#x27;张三2&#x27;</span>,    message: <span class="hljs-string">&#x27;今天天气不错！&#x27;</span>,    dateTime: <span class="hljs-string">&#x27;2015-10-16&#x27;</span>  &#125;,  &#123;    name: <span class="hljs-string">&#x27;张三3&#x27;</span>,    message: <span class="hljs-string">&#x27;今天天气不错！&#x27;</span>,    dateTime: <span class="hljs-string">&#x27;2015-10-16&#x27;</span>  &#125;,  &#123;    name: <span class="hljs-string">&#x27;张三4&#x27;</span>,    message: <span class="hljs-string">&#x27;今天天气不错！&#x27;</span>,    dateTime: <span class="hljs-string">&#x27;2015-10-16&#x27;</span>  &#125;,  &#123;    name: <span class="hljs-string">&#x27;张三5&#x27;</span>,    message: <span class="hljs-string">&#x27;今天天气不错！&#x27;</span>,    dateTime: <span class="hljs-string">&#x27;2015-10-16&#x27;</span>  &#125;]<span class="hljs-comment">// /pinglun?name=的撒的撒&amp;message=的撒的撒的撒</span><span class="hljs-comment">// 对于这种表单提交的请求路径，由于其中具有用户动态填写的内容</span><span class="hljs-comment">// 所以你不可能通过去判断完整的 url 路径来处理这个请求</span><span class="hljs-comment">// </span><span class="hljs-comment">// 结论：对于我们来讲，其实只需要判定，如果你的请求路径是 /pinglun 的时候，那我就认为你提交表单的请求过来了</span>http  .createServer(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>&#123; <span class="hljs-comment">// 简写方式，该函数会直接被注册为 server 的 request 请求事件处理函数</span>    <span class="hljs-comment">// 使用 url.parse 方法将路径解析为一个方便操作的对象，第二个参数为 true 表示直接将查询字符串转为一个对象（通过 query 属性来访问）</span>    <span class="hljs-keyword">var</span> parseObj = url.parse(req.url, <span class="hljs-literal">true</span>)    <span class="hljs-comment">// 单独获取不包含查询字符串的路径部分（该路径不包含 ? 之后的内容）</span>    <span class="hljs-keyword">var</span> pathname = parseObj.pathname  <span class="hljs-comment">// 其实这个就相当于了 req.url</span>    <span class="hljs-keyword">if</span> (pathname === <span class="hljs-string">&#x27;/&#x27;</span>) &#123;      fs.readFile(<span class="hljs-string">&#x27;./views/index.html&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, data</span>) </span>&#123;        <span class="hljs-keyword">if</span> (err) &#123;          <span class="hljs-keyword">return</span> res.end(<span class="hljs-string">&#x27;404 Not Found.&#x27;</span>)        &#125;        <span class="hljs-keyword">var</span> htmlStr = template.render(data.toString(), &#123;          comments: comments        &#125;)        res.end(htmlStr)      &#125;)    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pathname === <span class="hljs-string">&#x27;/post&#x27;</span>) &#123;      <span class="hljs-comment">// 其它的都处理成 404 找不到</span>      fs.readFile(<span class="hljs-string">&#x27;./views/post.html&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, data</span>) </span>&#123;        <span class="hljs-keyword">if</span> (err) &#123;          <span class="hljs-keyword">return</span> res.end(<span class="hljs-string">&#x27;404 Not Found.&#x27;</span>)        &#125;        res.end(data)      &#125;)    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pathname.indexOf(<span class="hljs-string">&#x27;/public/&#x27;</span>) === <span class="hljs-number">0</span>) &#123;      <span class="hljs-comment">//    如果请求路径是以 /public/ 开头的，则我认为你要获取 public 中的某个资源</span>      <span class="hljs-comment">//    所以我们就直接可以把请求路径当作文件路径来直接进行读取</span>            <span class="hljs-comment">// 注意 读取 文件 一定要 加 . 这样才能找到该路径</span>      fs.readFile(<span class="hljs-string">&#x27;.&#x27;</span> + pathname, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, data</span>) </span>&#123;        <span class="hljs-keyword">if</span> (err) &#123;          <span class="hljs-keyword">return</span> res.end(<span class="hljs-string">&#x27;404 Not Found.&#x27;</span>)        &#125;        res.end(data)      &#125;)    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pathname === <span class="hljs-string">&#x27;/pinglun&#x27;</span>) &#123;      <span class="hljs-comment">// 注意：这个时候无论 /pinglun?xxx 之后是什么，我都不用担心了，因为我的 pathname 是不包含 ? 之后的那个路径</span>      <span class="hljs-comment">// 一次请求对应一次响应，响应结束这次请求也就结束了</span>      <span class="hljs-comment">// res.end(JSON.stringify(parseObj.query))</span>      <span class="hljs-comment">// 我们已经使用 url 模块的 parse 方法把请求路径中的查询字符串给解析成一个对象了</span>      <span class="hljs-comment">// 所以接下来要做的就是：</span>      <span class="hljs-comment">//    1. 获取表单提交的数据 parseObj.query</span>      <span class="hljs-comment">//    2. 将当前时间日期添加到数据对象中，然后存储到数组中</span>      <span class="hljs-comment">//    3. 让用户重定向跳转到首页 /</span>      <span class="hljs-comment">//       当用户重新请求 / 的时候，我数组中的数据已经发生变化了，所以用户看到的页面也就变了</span>      <span class="hljs-keyword">var</span> comment = parseObj.query      comment.dateTime = <span class="hljs-string">&#x27;2017-11-2 17:11:22&#x27;</span>      comments.unshift(comment)      <span class="hljs-comment">// 服务端这个时候已经把数据存储好了，接下来就是让用户重新请求 / 首页，就可以看到最新的留言内容了</span>      <span class="hljs-comment">// 如何通过服务器让客户端重定向？</span>      <span class="hljs-comment">//    1. 状态码设置为 302 临时重定向</span>      <span class="hljs-comment">//        statusCode</span>      <span class="hljs-comment">//    2. 在响应头中通过 Location 告诉客户端往哪儿重定向</span>      <span class="hljs-comment">//        setHeader</span>      <span class="hljs-comment">// 如果客户端发现收到服务器的响应的状态码是 302 就会自动去响应头中找 Location ，然后对该地址发起新的请求</span>      <span class="hljs-comment">// 所以你就能看到客户端自动跳转了</span>      res.statusCode = <span class="hljs-number">302</span>      res.setHeader(<span class="hljs-string">&#x27;Location&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>)      res.end()    &#125; <span class="hljs-keyword">else</span> &#123;      <span class="hljs-comment">// 其它的都处理成 404 找不到</span>      fs.readFile(<span class="hljs-string">&#x27;./views/404.html&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, data</span>) </span>&#123;        <span class="hljs-keyword">if</span> (err) &#123;          <span class="hljs-keyword">return</span> res.end(<span class="hljs-string">&#x27;404 Not Found.&#x27;</span>)        &#125;        res.end(data)      &#125;)    &#125;  &#125;)  .listen(<span class="hljs-number">3000</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;running...&#x27;</span>)  &#125;)</code></pre>]]></content>
    
    
    <categories>
      
      <category>Nodejs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Node</tag>
      
      <tag>art-template模板引擎</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Node来实现简单的HTTP响应请求</title>
    <link href="/2020/08/05/02.%E7%AE%80%E5%8D%95%E7%9A%84HTTP%E5%93%8D%E5%BA%94%E8%AF%B7%E6%B1%82/"/>
    <url>/2020/08/05/02.%E7%AE%80%E5%8D%95%E7%9A%84HTTP%E5%93%8D%E5%BA%94%E8%AF%B7%E6%B1%82/</url>
    
    <content type="html"><![CDATA[<h1 id="简单的HTTP响应请求"><a href="#简单的HTTP响应请求" class="headerlink" title="简单的HTTP响应请求"></a>简单的HTTP响应请求</h1><h4 id="1-引入http模块"><a href="#1-引入http模块" class="headerlink" title="1. 引入http模块"></a>1. 引入http模块</h4><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);</code></pre><h4 id="2-创建-server"><a href="#2-创建-server" class="headerlink" title="2.创建 server"></a>2.创建 server</h4><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> server = http.createServer();</code></pre><h4 id="3-当客户端请求过来，就会自动触发服务器的-request-请求事件，-然后执行第二个参数：回调函数"><a href="#3-当客户端请求过来，就会自动触发服务器的-request-请求事件，-然后执行第二个参数：回调函数" class="headerlink" title="3. 当客户端请求过来，就会自动触发服务器的 request 请求事件， 然后执行第二个参数：回调函数"></a>3. 当客户端请求过来，就会自动触发服务器的 request 请求事件， 然后执行第二个参数：回调函数</h4><blockquote><ul><li>request 请求事件处理函数 需要接受俩个参数：  </li><li>request 请求对象：请求对象可以用来获取客户端的一些请求信息，例如请求路径</li><li>response 响应对象 ：响应对象可以用来给客户端发送响应信息</li></ul></blockquote><pre><code class="hljs JavaScript">server.on(<span class="hljs-string">&#x27;request&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;收到了客户端的请求了,请求路径是：&#x27;</span> + req.url);    <span class="hljs-comment">// 要根据不同的请求立即发送不同的响应结果</span>    <span class="hljs-comment">//  1. 获取请求路径</span>    <span class="hljs-keyword">const</span> url = req.url;    <span class="hljs-comment">//     req.url  获得到的是端口号之后的那一部分路径</span>    <span class="hljs-comment">//     也就是说 所有的 url 都是以 / 开头的</span>    <span class="hljs-comment">//  2. 判断路径来处理响应</span>    <span class="hljs-keyword">if</span> (url == <span class="hljs-string">&#x27;/&#x27;</span>) &#123;        res.end(<span class="hljs-string">&#x27;index page&#x27;</span>);    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (url == <span class="hljs-string">&#x27;/login&#x27;</span>) &#123;        res.end(<span class="hljs-string">&#x27;login page&#x27;</span>);    &#125; <span class="hljs-keyword">else</span> &#123;        res.end(<span class="hljs-string">&#x27;404 Not found.&#x27;</span>)    &#125;&#125;);</code></pre><hr><p>不推荐使用 wirte  因为end的参数就可以接受，并且开发中基本都是一对一的响应</p><pre><code class="hljs JavaScript">    <span class="hljs-comment">// response 对象有一个方法： write 可以用来给客户端发送响应数据</span>    <span class="hljs-comment">// write 可以使用多次 ，但是最后一次一定要使用 end 来结束响应， 否则客户端会一直等待</span>     <span class="hljs-keyword">if</span> (req.url == <span class="hljs-string">&#x27;/&#x27;</span>) &#123;         res.write(<span class="hljs-string">&#x27;heelo&#x27;</span>);         res.write(<span class="hljs-string">&#x27; nonejs&#x27;</span>);     &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (req.url == <span class="hljs-string">&#x27;/login&#x27;</span>) &#123;         res.write(<span class="hljs-string">&#x27;login&#x27;</span>);     &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (req.url == <span class="hljs-string">&#x27;/index&#x27;</span>) &#123;         res.write(<span class="hljs-string">&#x27;index&#x27;</span>);     &#125;    res.end();     <span class="hljs-comment">//  以上的代码方式比较麻烦， 推荐使用直接 end 的同时 加请求信息</span><span class="hljs-comment">// res.end(&#x27;hello nodejs&#x27;);</span></code></pre><hr><h5 id="以下例子证明了-响应内容只能是-字符串-和-二进制-。-对象，数组，布尔值，数值等等都是不行的"><a href="#以下例子证明了-响应内容只能是-字符串-和-二进制-。-对象，数组，布尔值，数值等等都是不行的" class="headerlink" title="以下例子证明了 响应内容只能是 字符串 和 二进制 。  对象，数组，布尔值，数值等等都是不行的"></a>以下例子证明了 响应内容只能是 字符串 和 二进制 。  对象，数组，布尔值，数值等等都是不行的</h5><pre><code class="hljs JavaScript"><span class="hljs-keyword">if</span> (url == <span class="hljs-string">&#x27;/products&#x27;</span>) &#123;    <span class="hljs-keyword">let</span> products = [&#123;       name: <span class="hljs-string">&#x27;苹果&#x27;</span>,        price: <span class="hljs-number">5</span>    &#125;, &#123;        name: <span class="hljs-string">&#x27;香蕉&#x27;</span>,        price: <span class="hljs-number">3</span>    &#125;];    res.end(<span class="hljs-built_in">JSON</span>.stringify(products));&#125;;</code></pre>]]></content>
    
    
    <categories>
      
      <category>Nodejs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Node</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于Express 下的 增删改查项目</title>
    <link href="/2020/08/05/08.%E5%9F%BA%E4%BA%8EExpress%20%E4%B8%8B%E7%9A%84%20%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E9%A1%B9%E7%9B%AE/"/>
    <url>/2020/08/05/08.%E5%9F%BA%E4%BA%8EExpress%20%E4%B8%8B%E7%9A%84%20%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="基于Express-下的-增删改查项目"><a href="#基于Express-下的-增删改查项目" class="headerlink" title="基于Express 下的 增删改查项目"></a>基于Express 下的 增删改查项目</h1><h2 id="整体步骤："><a href="#整体步骤：" class="headerlink" title="整体步骤："></a>整体步骤：</h2><ul><li>处理模块</li><li>配置开放静态资源</li><li>配置模板引擎</li><li>简单路由： /students 渲染静态页面</li><li>路由设计</li><li>提取路由模块</li><li>由于接下来一系列的业务操作都需要处理文件数据，所以我们需要封装一个 students.js 模块</li><li>写好  students.js 文件结构<ul><li>find  查询所有学生列表的 API </li><li>findById 查询单个学生的ID</li><li>save   保存学生信息</li><li>updateById   更新学生信息</li><li>deleteById  删除学生信息</li></ul></li><li>实现具体功能<ul><li>通过路由收到请求</li><li>接受请求中的数据（get, post）<ul><li>req.query </li><li>rqe.body</li></ul></li><li>调用数据操作API 处理数据</li><li>根据数据结果给客户端发送响应</li></ul></li><li>业务功能处理顺序<ul><li>列表</li><li>添加</li><li>编辑</li><li>删除</li></ul></li></ul><h2 id="路由设计"><a href="#路由设计" class="headerlink" title="路由设计"></a>路由设计</h2><table><thead><tr><th>请求方法</th><th>请求路径</th><th>get参数</th><th>post参数</th><th>备注</th></tr></thead><tbody><tr><td>GET</td><td>/</td><td></td><td></td><td>渲染首页</td></tr><tr><td>GET</td><td>/new</td><td></td><td></td><td>渲染添加页面</td></tr><tr><td>POST</td><td>/new</td><td></td><td>name、age、gender、hobbies</td><td>处理添加请求</td></tr><tr><td>GET</td><td>/edit</td><td>id</td><td></td><td>渲染编辑页面</td></tr><tr><td>POST</td><td>/edit</td><td></td><td>id、name、age、gender、hobbies</td><td>处理编辑请求</td></tr><tr><td>GET</td><td>/delete</td><td>id</td><td></td><td>处理编辑请求</td></tr></tbody></table><h2 id="1-app-js"><a href="#1-app-js" class="headerlink" title="1.app.js"></a>1.app.js</h2><h3 id="用来加载模块和模板引擎"><a href="#用来加载模块和模板引擎" class="headerlink" title="用来加载模块和模板引擎"></a>用来加载模块和模板引擎</h3><pre><code class="hljs JavaScript"><span class="hljs-comment">//  引入express 模块</span><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<span class="hljs-keyword">const</span> app = express()<span class="hljs-keyword">const</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;body-parser&#x27;</span>)<span class="hljs-comment">// 引入 touter.js 模块（自定义模块）</span><span class="hljs-keyword">const</span> router = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./router&#x27;</span>)<span class="hljs-comment">// 在express中使用 art-template 模块引擎</span>app.engine(<span class="hljs-string">&#x27;html&#x27;</span>, <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express-art-template&#x27;</span>))<span class="hljs-comment">// 开放静态资源</span>app.use(<span class="hljs-string">&#x27;/node_modules/&#x27;</span>, express.static(<span class="hljs-string">&#x27;./node_modules/&#x27;</span>))app.use(<span class="hljs-string">&#x27;/public/&#x27;</span>, express.static(<span class="hljs-string">&#x27;./public/&#x27;</span>))<span class="hljs-comment">//一定要放在 app.use(router) 挂载路由之前</span><span class="hljs-comment">// create application/json parser</span>app.use(bodyParser.json())<span class="hljs-comment">// create application/x-www-form-urlencoded parser</span>app.use(bodyParser.urlencoded(&#123;    extended: <span class="hljs-literal">false</span>&#125;))<span class="hljs-comment">// 把 router模块中 的 路由容器挂载在app这个服务上</span>app.use(router)app.listen(<span class="hljs-number">3000</span>, <span class="hljs-function">() =&gt;</span> &#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;running...&#x27;</span>);&#125;)</code></pre><h2 id="2-router-js"><a href="#2-router-js" class="headerlink" title="2.router.js"></a>2.router.js</h2><h3 id="用来挂载路由"><a href="#用来挂载路由" class="headerlink" title="用来挂载路由"></a>用来挂载路由</h3><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<span class="hljs-keyword">const</span> Student = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./students.js&#x27;</span>)<span class="hljs-comment">// 创建一个路由容器</span><span class="hljs-keyword">const</span> router = express.Router()<span class="hljs-comment">// 把路由都挂载到 router 路由容器中</span>router.get(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;   &#125;)router.get(<span class="hljs-string">&#x27;/new&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;    &#125;)router.post(<span class="hljs-string">&#x27;/new&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;&#125;)router.get(<span class="hljs-string">&#x27;/edit&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;&#125;)router.post(<span class="hljs-string">&#x27;/edit&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;&#125;)router.get(<span class="hljs-string">&#x27;/delete&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;&#125;)<span class="hljs-built_in">module</span>.exports = router</code></pre><h3 id="2-1-调用-获取学生信息的封装函数"><a href="#2-1-调用-获取学生信息的封装函数" class="headerlink" title="2.1  调用  获取学生信息的封装函数"></a>2.1  调用  获取学生信息的封装函数</h3><pre><code class="hljs JavaScript">router.get(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;    Student.find(<span class="hljs-function">(<span class="hljs-params">err,students</span>)=&gt;</span>&#123;        <span class="hljs-keyword">if</span>(err)&#123;        <span class="hljs-keyword">return</span> res.status(<span class="hljs-number">500</span>).send(<span class="hljs-string">&#x27;Servererr..&#x27;</span>)        &#125;        res.render(<span class="hljs-string">&#x27;index.html&#x27;</span>,&#123;            comments: [<span class="hljs-string">&#x27;苹果&#x27;</span>, <span class="hljs-string">&#x27;橘子&#x27;</span>, <span class="hljs-string">&#x27;香蕉&#x27;</span>, <span class="hljs-string">&#x27;菠萝&#x27;</span>],            students: students        &#125;)    &#125;)&#125;)</code></pre><h3 id="2-2-调用-添加并保存学生信息的封装函数"><a href="#2-2-调用-添加并保存学生信息的封装函数" class="headerlink" title="2.2 调用 添加并保存学生信息的封装函数"></a>2.2 调用 添加并保存学生信息的封装函数</h3><pre><code class="hljs JavaScript">router.post(<span class="hljs-string">&#x27;/new&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;   Student.save(req.body, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;        <span class="hljs-keyword">if</span> (err) &#123;            <span class="hljs-keyword">return</span> res.status(<span class="hljs-number">500</span>).send(<span class="hljs-string">&#x27;Server err..&#x27;</span>)        &#125;        res.redirect(<span class="hljs-string">&#x27;/&#x27;</span>)    &#125;)&#125;)</code></pre><h3 id="2-3-1-修改前-前调取-修改该学生的ID"><a href="#2-3-1-修改前-前调取-修改该学生的ID" class="headerlink" title="2.3 1.修改前 前调取 修改该学生的ID"></a>2.3 1.修改前 前调取 修改该学生的ID</h3><pre><code class="hljs JavaScript">router.get(<span class="hljs-string">&#x27;/edit&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;    <span class="hljs-comment">// 1. 在客户端的列表页中处理链接问题 （需要有 id 的参数）</span>    <span class="hljs-comment">// 2. 获取要编辑的 id</span>    <span class="hljs-comment">// console.log(req.query.id);</span>    <span class="hljs-comment">// 3. 渲染编辑页面   </span>    <span class="hljs-comment">//   根据id 吧学生信息查出来</span>    <span class="hljs-comment">//   使用模板引擎来渲染页面</span>    Student.findById(<span class="hljs-built_in">parseInt</span>(req.query.id), <span class="hljs-function">(<span class="hljs-params">err, student</span>) =&gt;</span> &#123;        <span class="hljs-comment">// req.query.id 是字符串 而我们要的 id 是个 数字型 所以要转换</span>        <span class="hljs-keyword">if</span> (err) &#123;            <span class="hljs-keyword">return</span> res.status(<span class="hljs-number">500</span>).send(<span class="hljs-string">&#x27;Server err..&#x27;</span>)        &#125;        <span class="hljs-comment">// console.log(studnet);   id 是多 传过来的数据 就是 该 id 的对象</span>        <span class="hljs-comment">// 把 所取到该 id 对象的 值 来渲染到页面上</span>        res.render(<span class="hljs-string">&#x27;edit.html&#x27;</span>, &#123;            student: student        &#125;)    &#125;)&#125;)</code></pre><h3 id="2-3-2-调用-修改学生信息的封装函数"><a href="#2-3-2-调用-修改学生信息的封装函数" class="headerlink" title="2.3 2.调用 修改学生信息的封装函数"></a>2.3 2.调用 修改学生信息的封装函数</h3><pre><code class="hljs JavaScript">router.post(<span class="hljs-string">&#x27;/edit&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;    <span class="hljs-comment">// 1. 获取表单数据  req.body </span>    <span class="hljs-comment">// console.log(req.body);</span>    <span class="hljs-comment">// 2.  更新       Student.updataById()</span>    <span class="hljs-comment">//  3.  发送响应</span>    Student.updateById(req.body, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;        <span class="hljs-keyword">if</span> (err) &#123;            <span class="hljs-keyword">return</span> res.status(<span class="hljs-number">500</span>).send(<span class="hljs-string">&#x27;Server err..&#x27;</span>)        &#125;        res.redirect(<span class="hljs-string">&#x27;/&#x27;</span>)    &#125;)&#125;)</code></pre><h3 id="2-4-调用-删除学生信息的封装函数"><a href="#2-4-调用-删除学生信息的封装函数" class="headerlink" title="2.4 调用 删除学生信息的封装函数"></a>2.4 调用 删除学生信息的封装函数</h3><pre><code class="hljs JavaScript">router.get(<span class="hljs-string">&#x27;/delete&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;    <span class="hljs-comment">// 1. 在客户端的列表页中处理链接问题 （需要有 id 的参数）</span>    <span class="hljs-comment">// 2. 获取要编辑的 id</span>    <span class="hljs-built_in">console</span>.log(req.query.id);    <span class="hljs-comment">// 3. 渲染编辑页面   </span>    <span class="hljs-comment">//   根据id 把学生信息查出来</span>    <span class="hljs-comment">//   使用模板引擎来渲染页面</span>    Student.deleteById(<span class="hljs-built_in">parseInt</span>(req.query.id), <span class="hljs-function">(<span class="hljs-params">err, student</span>) =&gt;</span> &#123;        <span class="hljs-comment">// req.query.id 是字符串 而我们要的 id 是个 数字型 所以要转换</span>        <span class="hljs-keyword">if</span> (err) &#123;            <span class="hljs-keyword">return</span> res.status(<span class="hljs-number">500</span>).send(<span class="hljs-string">&#x27;Server err..&#x27;</span>)        &#125;        res.redirect(<span class="hljs-string">&#x27;/&#x27;</span>)    &#125;)&#125;)</code></pre><h2 id="3-students-js"><a href="#3-students-js" class="headerlink" title="3.students.js"></a>3.students.js</h2><h3 id="设计操作文件数据的API模块"><a href="#设计操作文件数据的API模块" class="headerlink" title="设计操作文件数据的API模块"></a>设计操作文件数据的API模块</h3><h4 id="用来处理增删改查数据"><a href="#用来处理增删改查数据" class="headerlink" title="用来处理增删改查数据"></a>用来处理增删改查数据</h4><pre><code class="hljs JavaScript">/  数据文件操作模块<span class="hljs-comment">// 职责： 操作文件中的数据： 只处理数据 不处理业务</span><span class="hljs-comment">// 1. 获取所有学生信息列表</span><span class="hljs-built_in">exports</span>.find = <span class="hljs-function">() =&gt;</span> &#123; &#125;<span class="hljs-comment">// 1.1 通过ID 来获取 该学生的信息</span><span class="hljs-built_in">exports</span>.findById = <span class="hljs-function">() =&gt;</span> &#123; &#125;<span class="hljs-comment">// 2. 添加保存学生信息</span><span class="hljs-built_in">exports</span>.save = <span class="hljs-function">() =&gt;</span> &#123; &#125;<span class="hljs-comment">// 3. 更新学生信息</span><span class="hljs-built_in">exports</span>.updateById = <span class="hljs-function">() =&gt;</span> &#123; &#125;<span class="hljs-comment">// 4. 删除学生信息</span><span class="hljs-built_in">exports</span>.delete = <span class="hljs-function">() =&gt;</span> &#123; &#125;</code></pre><h3 id="3-1-获取所有学生信息封装函数"><a href="#3-1-获取所有学生信息封装函数" class="headerlink" title="3.1 获取所有学生信息封装函数"></a>3.1 获取所有学生信息封装函数</h3><pre><code class="hljs JavaScript"><span class="hljs-built_in">exports</span>.find = <span class="hljs-function">(<span class="hljs-params">callback</span>) =&gt;</span> &#123;    fs.readFile(dbPath, <span class="hljs-string">&#x27;utf8&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;        <span class="hljs-keyword">if</span> (err) &#123;            <span class="hljs-keyword">return</span> callback(err)        &#125;        <span class="hljs-comment">// err  成功时返回 null  错误返回 err</span>        <span class="hljs-comment">// data  成功时返回 data  错误返回 undefined</span>        callback(<span class="hljs-literal">null</span>, <span class="hljs-built_in">JSON</span>.parse(data).students)    &#125;)&#125;</code></pre><h3 id="3-2-添加并保存学生信息"><a href="#3-2-添加并保存学生信息" class="headerlink" title="3.2 添加并保存学生信息"></a>3.2 添加并保存学生信息</h3><pre><code class="hljs JavaScript"><span class="hljs-comment">// student 表示 添加的值</span><span class="hljs-built_in">exports</span>.save = <span class="hljs-function">(<span class="hljs-params">student, callback</span>) =&gt;</span> &#123;    <span class="hljs-comment">// 1. 读文件</span>    fs.readFile(dbPath, <span class="hljs-string">&#x27;utf8&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;        <span class="hljs-keyword">if</span> (err) &#123;            <span class="hljs-keyword">return</span> callback(err)        &#125;       <span class="hljs-comment">// 2. 转成对象</span>        <span class="hljs-keyword">let</span> students = <span class="hljs-built_in">JSON</span>.parse(data).students        <span class="hljs-comment">// 2.1处理id 唯一  不重复</span>        student.id = students[students.length - <span class="hljs-number">1</span>].id + <span class="hljs-number">1</span>        <span class="hljs-comment">// 3.把用户传递的对象push到数组中</span>        students.push(student)        <span class="hljs-comment">// 4.把对象转成字符串</span>        <span class="hljs-keyword">let</span> fileData = <span class="hljs-built_in">JSON</span>.stringify(&#123;            students: students        &#125;)        <span class="hljs-comment">// 5.把字符串保存在 文件中</span>        fs.writeFile(dbPath, fileData, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;            <span class="hljs-keyword">if</span> (err) &#123;                <span class="hljs-keyword">return</span> callback(err)            &#125;            callback(<span class="hljs-literal">null</span>)        &#125;)    &#125;)&#125;</code></pre><h3 id="3-3-修改学生信息"><a href="#3-3-修改学生信息" class="headerlink" title="3.3  修改学生信息"></a>3.3  修改学生信息</h3><h4 id="3-3-1-获得修改该学生个人ID"><a href="#3-3-1-获得修改该学生个人ID" class="headerlink" title="3.3.1 获得修改该学生个人ID"></a>3.3.1 获得修改该学生个人ID</h4><pre><code class="hljs JavaScript"><span class="hljs-comment">// 1.1  通过ID 来获取 该学生的信息</span><span class="hljs-built_in">exports</span>.findById = <span class="hljs-function">(<span class="hljs-params">id, callback</span>) =&gt;</span> &#123;    fs.readFile(dbPath, <span class="hljs-string">&#x27;utf8&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;        <span class="hljs-keyword">if</span> (err) &#123;            <span class="hljs-keyword">return</span> callback(err)        &#125;        <span class="hljs-keyword">let</span> students = <span class="hljs-built_in">JSON</span>.parse(data).students        <span class="hljs-keyword">let</span> ret = students.find(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;            <span class="hljs-keyword">return</span> item.id === <span class="hljs-built_in">parseInt</span>(id)        &#125;)        callback(<span class="hljs-literal">null</span>, ret)    &#125;)&#125;</code></pre><h4 id="3-3-2-修改学生信息"><a href="#3-3-2-修改学生信息" class="headerlink" title="3.3.2  修改学生信息"></a>3.3.2  修改学生信息</h4><pre><code class="hljs JavaScript"><span class="hljs-comment">// 3. 更新学生信息</span><span class="hljs-built_in">exports</span>.updateById = <span class="hljs-function">(<span class="hljs-params">student, callback</span>) =&gt;</span> &#123;    <span class="hljs-comment">// 1. 读文件</span>    fs.readFile(dbPath, <span class="hljs-string">&#x27;utf8&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;        <span class="hljs-keyword">if</span> (err) &#123;            <span class="hljs-keyword">return</span> callback(err)        &#125;        <span class="hljs-comment">// 2. 转成对象</span>        <span class="hljs-keyword">let</span> students = <span class="hljs-built_in">JSON</span>.parse(data).students        <span class="hljs-comment">// 注意要把 id 改成数字型  因为 更改信息的时候 id会变成字符串</span>        <span class="hljs-keyword">let</span> studentsId = <span class="hljs-built_in">parseInt</span>(student.id)        <span class="hljs-comment">// 3.需要修改谁， 就把谁的ID找出来     （找出修改的 对象 ）</span>        <span class="hljs-comment">// 使用 ES6 中 find 方法来 遍历符合 item.id === studnent.id 条件的时候， find会终止遍历并返回</span>        <span class="hljs-keyword">let</span> stu = students.find(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;            <span class="hljs-keyword">return</span> item.id === studentsId        &#125;)        <span class="hljs-comment">// console.log(stu);  // &#123; id: 1, name: &#x27;朱元璋111&#x27;, gender: 0, age: 22, hobbies: &#x27;写代码&#x27; &#125;</span>        <span class="hljs-comment">// 4. 拿到 需要修改的  让它遍历拷贝对象  （ 修改这个被找出来的 对象）</span>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> student) &#123;            stu[key] = student[key]        &#125;        <span class="hljs-comment">// console.log(students);  // 是jsonw文件中的 students 内的 所有对象</span>        <span class="hljs-comment">// 5.把对象转成字符串</span>        <span class="hljs-keyword">let</span> fileData = <span class="hljs-built_in">JSON</span>.stringify(&#123;            students: students        &#125;)        <span class="hljs-comment">// 6.把字符串保存在 文件中</span>        fs.writeFile(dbPath, fileData, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;            <span class="hljs-keyword">if</span> (err) &#123;                <span class="hljs-keyword">return</span> callback(err)            &#125;            callback(<span class="hljs-literal">null</span>)        &#125;)    &#125;)&#125;</code></pre><h3 id="3-4-删除学生信息"><a href="#3-4-删除学生信息" class="headerlink" title="3.4  删除学生信息"></a>3.4  删除学生信息</h3><pre><code class="hljs JavaScript"><span class="hljs-comment">// 4. 删除学生信息</span><span class="hljs-built_in">exports</span>.deleteById = <span class="hljs-function">(<span class="hljs-params">id, callback</span>) =&gt;</span> &#123;    <span class="hljs-comment">// 1. 读文件</span>    fs.readFile(dbPath, <span class="hljs-string">&#x27;utf8&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;        <span class="hljs-keyword">if</span> (err) &#123;            <span class="hljs-keyword">return</span> callback(err)        &#125;        <span class="hljs-comment">// 2. 转成对象</span>        <span class="hljs-keyword">let</span> students = <span class="hljs-built_in">JSON</span>.parse(data).students        <span class="hljs-keyword">let</span> deleteID = students.findIndex(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;            <span class="hljs-keyword">return</span> item.id === <span class="hljs-built_in">parseInt</span>(id)        &#125;)        students.splice(deleteID, <span class="hljs-number">1</span>)        <span class="hljs-comment">// 4.把对象转成字符串</span>        <span class="hljs-keyword">let</span> fileData = <span class="hljs-built_in">JSON</span>.stringify(&#123;            students: students        &#125;)        <span class="hljs-comment">// 5.把字符串保存在 文件中</span>        fs.writeFile(dbPath, fileData, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;            <span class="hljs-keyword">if</span> (err) &#123;                <span class="hljs-keyword">return</span> callback(err)            &#125;            callback(<span class="hljs-literal">null</span>)        &#125;)    &#125;)&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>Nodejs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Node</tag>
      
      <tag>Express</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Node介绍</title>
    <link href="/2020/08/04/01.Nodejs%E4%BB%8B%E7%BB%8D/"/>
    <url>/2020/08/04/01.Nodejs%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="Node-js-准备"><a href="#Node-js-准备" class="headerlink" title="Node.js 准备"></a>Node.js 准备</h1><h2 id="学前准备"><a href="#学前准备" class="headerlink" title="学前准备"></a>学前准备</h2><ul><li>Node.js 是什么<ul><li>JavaScript 运行时</li><li>既不是语言，也不是框架，它是一个平台</li></ul></li><li>Node.js 中的 JavaScript<ul><li>没有 BOM、DOM</li><li>EcmaScript 基本的 JavaScript 语言部分</li><li>在 Node 中为 JavaScript 提供了一些服务器级别的 API<ul><li>文件操作的能力</li><li>http 服务的能力</li></ul></li></ul></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><p>Node 中的 JavaScript</p><ul><li>EcmaScript<ul><li>变量</li><li>方法</li><li>数据类型</li><li>内置对象</li><li>Array</li><li>Object</li><li>Date</li><li>Math</li></ul></li><li>模块系统<ul><li>在 Node 中没有全局作用域的概念</li><li>在 Node 中，只能通过 require 方法来加载执行多个 JavaScript 脚本文件</li><li>require 加载只能是执行其中的代码，文件与文件之间由于是模块作用域，所以不会有污染的问题<ul><li>模块完全是封闭的</li><li>外部无法访问内部</li><li>内部也无法访问外部</li></ul></li><li>模块作用域固然带来了一些好处，可以加载执行多个文件，可以完全避免变量命名冲突污染的问题</li><li>但是某些情况下，模块与模块是需要进行通信的</li><li>在每个模块中，都提供了一个对象：<code>exports</code></li><li>该对象默认是一个空对象</li><li>你要做的就是把需要被外部访问使用的成员手动的挂载到 <code>exports</code> 接口对象中</li><li>然后谁来 <code>require</code> 这个模块，谁就可以得到模块内部的 <code>exports</code> 接口对象</li><li>还有其它的一些规则，具体后面讲，以及如何在项目中去使用这种编程方式，会通过后面的案例来处理</li></ul></li><li>核心模块<ul><li>核心模块是由 Node 提供的一个个的具名的模块，它们都有自己特殊的名称标识，例如<ul><li>fs 文件操作模块</li><li>http 网络服务构建模块</li><li>os 操作系统信息模块</li><li>path 路径处理模块</li><li>。。。。</li></ul></li><li>所有核心模块在使用的时候都必须手动的先使用 <code>require</code> 方法来加载，然后才可以使用，例如：<ul><li><code>var fs = require(&#39;fs&#39;)</code></li></ul></li></ul></li></ul></li><li><p>http</p><ul><li>require</li><li>端口号<ul><li>ip 地址定位计算机</li><li>端口号定位具体的应用程序</li></ul></li><li>Content-Type<ul><li>服务器最好把每次响应的数据是什么内容类型都告诉客户端，而且要正确的告诉</li><li>不同的资源对应的 Content-Type 是不一样，具体参照：<a href="http://tool.oschina.net/commons">http://tool.oschina.net/commons</a></li><li>对于文本类型的数据，最好都加上编码，目的是为了防止中文解析乱码问题</li></ul></li><li>通过网络发送文件<ul><li>发送的并不是文件，本质上来讲发送是文件的内容</li><li>当浏览器收到服务器响应内容之后，就会根据你的 Content-Type 进行对应的解析处理<pre><code class="hljs reasonml">res.set<span class="hljs-constructor">Header(&#x27;Content-Type&#x27;, &#x27;<span class="hljs-params">text</span><span class="hljs-operator">/</span><span class="hljs-params">plain</span>;<span class="hljs-params">charset</span>=<span class="hljs-params">utf</span>-8&#x27;)</span>;</code></pre></li></ul></li></ul></li><li><p>模块系统</p></li><li><p>Node 中的其它的核心模块</p></li><li><p>做一个小管理系统：</p><ul><li>CRUD</li></ul></li><li><p>Express Web 开发框架</p><ul><li><code>npm install express</code></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Nodejs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Node</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
